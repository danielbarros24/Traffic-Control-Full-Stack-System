{"ast":null,"code":"// Styles\nimport \"../../../src/components/VColorPicker/VColorPickerEdit.sass\"; // Components\n\nimport VBtn from '../VBtn';\nimport VIcon from '../VIcon'; // Helpers\n\nimport { parseHex } from '../../util/colorUtils'; // Types\n\nimport Vue from 'vue';\nimport { fromRGBA, fromHexa, fromHSLA } from './util';\nexport const modes = {\n  rgba: {\n    inputs: [['r', 255, 'int'], ['g', 255, 'int'], ['b', 255, 'int'], ['a', 1, 'float']],\n    from: fromRGBA\n  },\n  hsla: {\n    inputs: [['h', 360, 'int'], ['s', 1, 'float'], ['l', 1, 'float'], ['a', 1, 'float']],\n    from: fromHSLA\n  },\n  hexa: {\n    from: fromHexa\n  }\n};\nexport default Vue.extend({\n  name: 'v-color-picker-edit',\n  props: {\n    color: Object,\n    disabled: Boolean,\n    hideAlpha: Boolean,\n    hideModeSwitch: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: v => Object.keys(modes).includes(v)\n    }\n  },\n\n  data() {\n    return {\n      modes,\n      internalMode: this.mode\n    };\n  },\n\n  computed: {\n    currentMode() {\n      return this.modes[this.internalMode];\n    }\n\n  },\n  watch: {\n    mode(mode) {\n      this.internalMode = mode;\n    }\n\n  },\n\n  created() {\n    this.internalMode = this.mode;\n  },\n\n  methods: {\n    getValue(v, type) {\n      if (type === 'float') return Math.round(v * 100) / 100;else if (type === 'int') return Math.round(v);else return 0;\n    },\n\n    parseValue(v, type) {\n      if (type === 'float') return parseFloat(v);else if (type === 'int') return parseInt(v, 10) || 0;else return 0;\n    },\n\n    changeMode() {\n      const modes = Object.keys(this.modes);\n      const index = modes.indexOf(this.internalMode);\n      const newMode = modes[(index + 1) % modes.length];\n      this.internalMode = newMode;\n      this.$emit('update:mode', newMode);\n    },\n\n    genInput(target, attrs, value, on) {\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__input'\n      }, [this.$createElement('input', {\n        key: target,\n        attrs,\n        domProps: {\n          value\n        },\n        on\n      }), this.$createElement('span', target.toUpperCase())]);\n    },\n\n    genInputs() {\n      if (this.internalMode === 'hexa') {\n        const hex = this.color.hexa;\n        const value = this.hideAlpha && hex.endsWith('FF') ? hex.substr(0, 7) : hex;\n        return this.genInput('hex', {\n          maxlength: this.hideAlpha ? 7 : 9,\n          disabled: this.disabled\n        }, value, {\n          change: e => {\n            const el = e.target;\n            this.$emit('update:color', this.currentMode.from(parseHex(el.value)));\n          }\n        });\n      } else {\n        const inputs = this.hideAlpha ? this.currentMode.inputs.slice(0, -1) : this.currentMode.inputs;\n        return inputs.map(([target, max, type]) => {\n          const value = this.color[this.internalMode];\n          return this.genInput(target, {\n            type: 'number',\n            min: 0,\n            max,\n            step: type === 'float' ? '0.01' : type === 'int' ? '1' : undefined,\n            disabled: this.disabled\n          }, this.getValue(value[target], type), {\n            input: e => {\n              const el = e.target;\n              const newVal = this.parseValue(el.value || '0', type);\n              this.$emit('update:color', this.currentMode.from(Object.assign({}, value, {\n                [target]: newVal\n              }), this.color.alpha));\n            }\n          });\n        });\n      }\n    },\n\n    genSwitch() {\n      return this.$createElement(VBtn, {\n        props: {\n          small: true,\n          icon: true,\n          disabled: this.disabled\n        },\n        on: {\n          click: this.changeMode\n        }\n      }, [this.$createElement(VIcon, '$unfold')]);\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-color-picker__edit'\n    }, [this.genInputs(), !this.hideModeSwitch && this.genSwitch()]);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBtn","VIcon","parseHex","Vue","fromRGBA","fromHexa","fromHSLA","modes","rgba","inputs","from","hsla","hexa","extend","name","props","color","Object","disabled","Boolean","hideAlpha","hideModeSwitch","mode","type","String","default","validator","v","keys","includes","data","internalMode","computed","currentMode","watch","created","methods","getValue","Math","round","parseValue","parseFloat","parseInt","changeMode","index","indexOf","newMode","length","$emit","genInput","target","attrs","value","on","$createElement","staticClass","key","domProps","toUpperCase","genInputs","hex","endsWith","substr","maxlength","change","e","el","slice","map","max","min","step","undefined","input","newVal","assign","alpha","genSwitch","small","icon","click","render","h"],"sourceRoot":"","sources":["../../../src/components/VColorPicker/VColorPickerEdit.ts"],"sourcesContent":["// Styles\nimport './VColorPickerEdit.sass'\n\n// Components\nimport VBtn from '../VBtn'\nimport VIcon from '../VIcon'\n\n// Helpers\nimport { parseHex } from '../../util/colorUtils'\n\n// Types\nimport Vue, { VNode, PropType } from 'vue'\nimport { VColorPickerColor, fromRGBA, fromHexa, fromHSLA } from './util'\n\ntype Input = [string, number, string]\n\nexport type Mode = {\n  inputs?: Input[]\n  from: Function\n}\n\nexport const modes = {\n  rgba: {\n    inputs: [\n      ['r', 255, 'int'],\n      ['g', 255, 'int'],\n      ['b', 255, 'int'],\n      ['a', 1, 'float'],\n    ],\n    from: fromRGBA,\n  },\n  hsla: {\n    inputs: [\n      ['h', 360, 'int'],\n      ['s', 1, 'float'],\n      ['l', 1, 'float'],\n      ['a', 1, 'float'],\n    ],\n    from: fromHSLA,\n  },\n  hexa: {\n    from: fromHexa,\n  },\n} as { [key: string]: Mode }\n\nexport default Vue.extend({\n  name: 'v-color-picker-edit',\n\n  props: {\n    color: Object as PropType<VColorPickerColor>,\n    disabled: Boolean,\n    hideAlpha: Boolean,\n    hideModeSwitch: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: (v: string) => Object.keys(modes).includes(v),\n    },\n  },\n\n  data () {\n    return {\n      modes,\n      internalMode: this.mode,\n    }\n  },\n\n  computed: {\n    currentMode (): Mode {\n      return this.modes[this.internalMode]\n    },\n  },\n\n  watch: {\n    mode (mode) {\n      this.internalMode = mode\n    },\n  },\n\n  created () {\n    this.internalMode = this.mode\n  },\n\n  methods: {\n    getValue (v: any, type: string) {\n      if (type === 'float') return Math.round(v * 100) / 100\n      else if (type === 'int') return Math.round(v)\n      else return 0\n    },\n    parseValue (v: string, type: string) {\n      if (type === 'float') return parseFloat(v)\n      else if (type === 'int') return parseInt(v, 10) || 0\n      else return 0\n    },\n    changeMode () {\n      const modes = Object.keys(this.modes)\n      const index = modes.indexOf(this.internalMode)\n      const newMode = modes[(index + 1) % modes.length]\n      this.internalMode = newMode\n      this.$emit('update:mode', newMode)\n    },\n    genInput (target: string, attrs: any, value: any, on: any): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__input',\n      }, [\n        this.$createElement('input', {\n          key: target,\n          attrs,\n          domProps: {\n            value,\n          },\n          on,\n        }),\n        this.$createElement('span', target.toUpperCase()),\n      ])\n    },\n    genInputs (): VNode[] | VNode {\n      if (this.internalMode === 'hexa') {\n        const hex = this.color.hexa\n        const value = this.hideAlpha && hex.endsWith('FF') ? hex.substr(0, 7) : hex\n        return this.genInput(\n          'hex',\n          {\n            maxlength: this.hideAlpha ? 7 : 9,\n            disabled: this.disabled,\n          },\n          value,\n          {\n            change: (e: Event) => {\n              const el = e.target as HTMLInputElement\n              this.$emit('update:color', this.currentMode.from(parseHex(el.value)))\n            },\n          }\n        )\n      } else {\n        const inputs = this.hideAlpha ? this.currentMode.inputs!.slice(0, -1) : this.currentMode.inputs!\n        return inputs.map(([target, max, type]) => {\n          const value = this.color[this.internalMode as keyof VColorPickerColor] as any\n          return this.genInput(\n            target,\n            {\n              type: 'number',\n              min: 0,\n              max,\n              step: type === 'float' ? '0.01' : type === 'int' ? '1' : undefined,\n              disabled: this.disabled,\n            },\n            this.getValue(value[target], type),\n            {\n              input: (e: Event) => {\n                const el = e.target as HTMLInputElement\n                const newVal = this.parseValue(el.value || '0', type)\n\n                this.$emit('update:color', this.currentMode.from(\n                  Object.assign({}, value, { [target]: newVal }),\n                  this.color.alpha\n                ))\n              },\n            }\n          )\n        })\n      }\n    },\n    genSwitch (): VNode {\n      return this.$createElement(VBtn, {\n        props: {\n          small: true,\n          icon: true,\n          disabled: this.disabled,\n        },\n        on: {\n          click: this.changeMode,\n        },\n      }, [\n        this.$createElement(VIcon, '$unfold'),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-color-picker__edit',\n    }, [\n      this.genInputs(),\n      !this.hideModeSwitch && this.genSwitch(),\n    ])\n  },\n})\n"]},"metadata":{},"sourceType":"module"}