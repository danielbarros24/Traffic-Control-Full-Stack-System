{"ast":null,"code":"// Styles\nimport \"../../../src/components/VFileInput/VFileInput.sass\"; // Extensions\n\nimport VTextField from '../VTextField'; // Components\n\nimport { VChip } from '../VChip'; // Utilities\n\nimport { deepEqual, humanReadableFileSize, wrapInArray } from '../../util/helpers';\nimport { consoleError } from '../../util/console';\nimport { mergeStyles } from '../../util/mergeData';\nexport default VTextField.extend({\n  name: 'v-file-input',\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  props: {\n    chips: Boolean,\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize'\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter'\n    },\n    hideInput: Boolean,\n    multiple: Boolean,\n    placeholder: String,\n    prependIcon: {\n      type: String,\n      default: '$file'\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    showSize: {\n      type: [Boolean, Number],\n      default: false,\n      validator: v => {\n        return typeof v === 'boolean' || [1000, 1024].includes(v);\n      }\n    },\n    smallChips: Boolean,\n    truncateLength: {\n      type: [Number, String],\n      default: 22\n    },\n    type: {\n      type: String,\n      default: 'file'\n    },\n    value: {\n      default: undefined,\n      validator: val => {\n        return wrapInArray(val).every(v => v != null && typeof v === 'object');\n      }\n    }\n  },\n  computed: {\n    classes() {\n      return { ...VTextField.options.computed.classes.call(this),\n        'v-file-input': true\n      };\n    },\n\n    computedCounterValue() {\n      const fileCount = this.multiple && this.lazyValue ? this.lazyValue.length : this.lazyValue instanceof File ? 1 : 0;\n      if (!this.showSize) return this.$vuetify.lang.t(this.counterString, fileCount);\n      const bytes = this.internalArrayValue.reduce((bytes, {\n        size = 0\n      }) => {\n        return bytes + size;\n      }, 0);\n      return this.$vuetify.lang.t(this.counterSizeString, fileCount, humanReadableFileSize(bytes, this.base === 1024));\n    },\n\n    internalArrayValue() {\n      return wrapInArray(this.internalValue);\n    },\n\n    internalValue: {\n      get() {\n        return this.lazyValue;\n      },\n\n      set(val) {\n        this.lazyValue = val;\n        this.$emit('change', this.lazyValue);\n      }\n\n    },\n\n    isDirty() {\n      return this.internalArrayValue.length > 0;\n    },\n\n    isLabelActive() {\n      return this.isDirty;\n    },\n\n    text() {\n      if (!this.isDirty && (this.persistentPlaceholder || this.isFocused || !this.hasLabel)) return [this.placeholder];\n      return this.internalArrayValue.map(file => {\n        const {\n          name = '',\n          size = 0\n        } = file;\n        const truncatedText = this.truncateText(name);\n        return !this.showSize ? truncatedText : `${truncatedText} (${humanReadableFileSize(size, this.base === 1024)})`;\n      });\n    },\n\n    base() {\n      return typeof this.showSize !== 'boolean' ? this.showSize : undefined;\n    },\n\n    hasChips() {\n      return this.chips || this.smallChips;\n    }\n\n  },\n  watch: {\n    readonly: {\n      handler(v) {\n        if (v === true) consoleError('readonly is not supported on <v-file-input>', this);\n      },\n\n      immediate: true\n    },\n\n    value(v) {\n      const value = this.multiple ? v : v ? [v] : [];\n\n      if (!deepEqual(value, this.$refs.input.files)) {\n        // When the input value is changed programatically, clear the\n        // internal input's value so that the `onInput` handler\n        // can be triggered again if the user re-selects the exact\n        // same file(s). Ideally, `input.files` should be\n        // manipulated directly but that property is readonly.\n        this.$refs.input.value = '';\n      }\n    }\n\n  },\n  methods: {\n    clearableCallback() {\n      this.internalValue = this.multiple ? [] : null;\n      this.$refs.input.value = '';\n    },\n\n    genChips() {\n      if (!this.isDirty) return [];\n      return this.text.map((text, index) => this.$createElement(VChip, {\n        props: {\n          small: this.smallChips\n        },\n        on: {\n          'click:close': () => {\n            const internalValue = this.internalValue;\n            internalValue.splice(index, 1);\n            this.internalValue = internalValue; // Trigger the watcher\n          }\n        }\n      }, [text]));\n    },\n\n    genControl() {\n      const render = VTextField.options.methods.genControl.call(this);\n\n      if (this.hideInput) {\n        render.data.style = mergeStyles(render.data.style, {\n          display: 'none'\n        });\n      }\n\n      return render;\n    },\n\n    genInput() {\n      const input = VTextField.options.methods.genInput.call(this);\n      input.data.attrs.multiple = this.multiple; // We should not be setting value\n      // programmatically on the input\n      // when it is using type=\"file\"\n\n      delete input.data.domProps.value; // This solves an issue in Safari where\n      // nothing happens when adding a file\n      // do to the input event not firing\n      // https://github.com/vuetifyjs/vuetify/issues/7941\n\n      delete input.data.on.input;\n      input.data.on.change = this.onInput;\n      return [this.genSelections(), input];\n    },\n\n    genPrependSlot() {\n      if (!this.prependIcon) return null;\n      const icon = this.genIcon('prepend', () => {\n        this.$refs.input.click();\n      });\n      return this.genSlot('prepend', 'outer', [icon]);\n    },\n\n    genSelectionText() {\n      const length = this.text.length;\n      if (length < 2) return this.text;\n      if (this.showSize && !this.counter) return [this.computedCounterValue];\n      return [this.$vuetify.lang.t(this.counterString, length)];\n    },\n\n    genSelections() {\n      const children = [];\n\n      if (this.isDirty && this.$scopedSlots.selection) {\n        this.internalArrayValue.forEach((file, index) => {\n          if (!this.$scopedSlots.selection) return;\n          children.push(this.$scopedSlots.selection({\n            text: this.text[index],\n            file,\n            index\n          }));\n        });\n      } else {\n        children.push(this.hasChips && this.isDirty ? this.genChips() : this.genSelectionText());\n      }\n\n      return this.$createElement('div', {\n        staticClass: 'v-file-input__text',\n        class: {\n          'v-file-input__text--placeholder': this.placeholder && !this.isDirty,\n          'v-file-input__text--chips': this.hasChips && !this.$scopedSlots.selection\n        }\n      }, children);\n    },\n\n    genTextFieldSlot() {\n      const node = VTextField.options.methods.genTextFieldSlot.call(this);\n      node.data.on = { ...(node.data.on || {}),\n        click: () => this.$refs.input.click()\n      };\n      return node;\n    },\n\n    onInput(e) {\n      const files = [...(e.target.files || [])];\n      this.internalValue = this.multiple ? files : files[0]; // Set initialValue here otherwise isFocused\n      // watcher in VTextField will emit a change\n      // event whenever the component is blurred\n\n      this.initialValue = this.internalValue;\n    },\n\n    onKeyDown(e) {\n      this.$emit('keydown', e);\n    },\n\n    truncateText(str) {\n      if (str.length < Number(this.truncateLength)) return str;\n      const charsKeepOneSide = Math.floor((Number(this.truncateLength) - 1) / 2);\n      return `${str.slice(0, charsKeepOneSide)}â€¦${str.slice(str.length - charsKeepOneSide)}`;\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["VTextField","VChip","deepEqual","humanReadableFileSize","wrapInArray","consoleError","mergeStyles","extend","name","model","prop","event","props","chips","Boolean","clearable","type","default","counterSizeString","String","counterString","hideInput","multiple","placeholder","prependIcon","readonly","showSize","Number","validator","v","includes","smallChips","truncateLength","value","undefined","val","every","computed","classes","options","call","computedCounterValue","fileCount","lazyValue","length","File","$vuetify","lang","t","bytes","internalArrayValue","reduce","size","base","internalValue","get","set","$emit","isDirty","isLabelActive","text","persistentPlaceholder","isFocused","hasLabel","map","file","truncatedText","truncateText","hasChips","watch","handler","immediate","$refs","input","files","methods","clearableCallback","genChips","index","$createElement","small","on","splice","genControl","render","data","style","display","genInput","attrs","domProps","change","onInput","genSelections","genPrependSlot","icon","genIcon","click","genSlot","genSelectionText","counter","children","$scopedSlots","selection","forEach","push","staticClass","class","genTextFieldSlot","node","e","target","initialValue","onKeyDown","str","charsKeepOneSide","Math","floor","slice"],"sourceRoot":"","sources":["../../../src/components/VFileInput/VFileInput.ts"],"sourcesContent":["// Styles\nimport './VFileInput.sass'\n\n// Extensions\nimport VTextField from '../VTextField'\n\n// Components\nimport { VChip } from '../VChip'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n// Utilities\nimport { deepEqual, humanReadableFileSize, wrapInArray } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\nimport { mergeStyles } from '../../util/mergeData'\n\nexport default VTextField.extend({\n  name: 'v-file-input',\n\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n\n  props: {\n    chips: Boolean,\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize',\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter',\n    },\n    hideInput: Boolean,\n    multiple: Boolean,\n    placeholder: String,\n    prependIcon: {\n      type: String,\n      default: '$file',\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    showSize: {\n      type: [Boolean, Number],\n      default: false,\n      validator: (v: boolean | number) => {\n        return (\n          typeof v === 'boolean' ||\n          [1000, 1024].includes(v)\n        )\n      },\n    } as PropValidator<boolean | 1000 | 1024>,\n    smallChips: Boolean,\n    truncateLength: {\n      type: [Number, String],\n      default: 22,\n    },\n    type: {\n      type: String,\n      default: 'file',\n    },\n    value: {\n      default: undefined,\n      validator: val => {\n        return wrapInArray(val).every(v => v != null && typeof v === 'object')\n      },\n    } as PropValidator<File | File[]>,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VTextField.options.computed.classes.call(this),\n        'v-file-input': true,\n      }\n    },\n    computedCounterValue (): string {\n      const fileCount = (this.multiple && this.lazyValue)\n        ? this.lazyValue.length\n        : (this.lazyValue instanceof File) ? 1 : 0\n\n      if (!this.showSize) return this.$vuetify.lang.t(this.counterString, fileCount)\n\n      const bytes = this.internalArrayValue.reduce((bytes: number, { size = 0 }: File) => {\n        return bytes + size\n      }, 0)\n\n      return this.$vuetify.lang.t(\n        this.counterSizeString,\n        fileCount,\n        humanReadableFileSize(bytes, this.base === 1024)\n      )\n    },\n    internalArrayValue (): File[] {\n      return wrapInArray(this.internalValue)\n    },\n    internalValue: {\n      get (): File[] {\n        return this.lazyValue\n      },\n      set (val: File | File[]) {\n        this.lazyValue = val\n        this.$emit('change', this.lazyValue)\n      },\n    },\n    isDirty (): boolean {\n      return this.internalArrayValue.length > 0\n    },\n    isLabelActive (): boolean {\n      return this.isDirty\n    },\n    text (): string[] {\n      if (!this.isDirty && (this.persistentPlaceholder || this.isFocused || !this.hasLabel)) return [this.placeholder]\n\n      return this.internalArrayValue.map((file: File) => {\n        const {\n          name = '',\n          size = 0,\n        } = file\n\n        const truncatedText = this.truncateText(name)\n\n        return !this.showSize\n          ? truncatedText\n          : `${truncatedText} (${humanReadableFileSize(size, this.base === 1024)})`\n      })\n    },\n    base (): 1000 | 1024 | undefined {\n      return typeof this.showSize !== 'boolean' ? this.showSize : undefined\n    },\n    hasChips (): boolean {\n      return this.chips || this.smallChips\n    },\n  },\n\n  watch: {\n    readonly: {\n      handler (v) {\n        if (v === true) consoleError('readonly is not supported on <v-file-input>', this)\n      },\n      immediate: true,\n    },\n    value (v) {\n      const value = this.multiple ? v : v ? [v] : []\n      if (!deepEqual(value, this.$refs.input.files)) {\n        // When the input value is changed programatically, clear the\n        // internal input's value so that the `onInput` handler\n        // can be triggered again if the user re-selects the exact\n        // same file(s). Ideally, `input.files` should be\n        // manipulated directly but that property is readonly.\n        this.$refs.input.value = ''\n      }\n    },\n  },\n\n  methods: {\n    clearableCallback () {\n      this.internalValue = this.multiple ? [] : null\n      this.$refs.input.value = ''\n    },\n    genChips () {\n      if (!this.isDirty) return []\n\n      return this.text.map((text, index) => this.$createElement(VChip, {\n        props: { small: this.smallChips },\n        on: {\n          'click:close': () => {\n            const internalValue = this.internalValue\n            internalValue.splice(index, 1)\n            this.internalValue = internalValue // Trigger the watcher\n          },\n        },\n      }, [text]))\n    },\n    genControl () {\n      const render = VTextField.options.methods.genControl.call(this)\n\n      if (this.hideInput) {\n        render.data!.style = mergeStyles(\n          render.data!.style,\n          { display: 'none' }\n        )\n      }\n\n      return render\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data!.attrs!.multiple = this.multiple\n\n      // We should not be setting value\n      // programmatically on the input\n      // when it is using type=\"file\"\n      delete input.data!.domProps!.value\n\n      // This solves an issue in Safari where\n      // nothing happens when adding a file\n      // do to the input event not firing\n      // https://github.com/vuetifyjs/vuetify/issues/7941\n      delete input.data!.on!.input\n      input.data!.on!.change = this.onInput\n\n      return [this.genSelections(), input]\n    },\n    genPrependSlot () {\n      if (!this.prependIcon) return null\n\n      const icon = this.genIcon('prepend', () => {\n        this.$refs.input.click()\n      })\n\n      return this.genSlot('prepend', 'outer', [icon])\n    },\n    genSelectionText (): string[] {\n      const length = this.text.length\n\n      if (length < 2) return this.text\n      if (this.showSize && !this.counter) return [this.computedCounterValue]\n      return [this.$vuetify.lang.t(this.counterString, length)]\n    },\n    genSelections () {\n      const children = []\n\n      if (this.isDirty && this.$scopedSlots.selection) {\n        this.internalArrayValue.forEach((file: File, index: number) => {\n          if (!this.$scopedSlots.selection) return\n\n          children.push(\n            this.$scopedSlots.selection({\n              text: this.text[index],\n              file,\n              index,\n            })\n          )\n        })\n      } else {\n        children.push(this.hasChips && this.isDirty ? this.genChips() : this.genSelectionText())\n      }\n\n      return this.$createElement('div', {\n        staticClass: 'v-file-input__text',\n        class: {\n          'v-file-input__text--placeholder': this.placeholder && !this.isDirty,\n          'v-file-input__text--chips': this.hasChips && !this.$scopedSlots.selection,\n        },\n      }, children)\n    },\n    genTextFieldSlot () {\n      const node = VTextField.options.methods.genTextFieldSlot.call(this)\n\n      node.data!.on = {\n        ...(node.data!.on || {}),\n        click: () => this.$refs.input.click(),\n      }\n\n      return node\n    },\n    onInput (e: Event) {\n      const files = [...(e.target as HTMLInputElement).files || []]\n\n      this.internalValue = this.multiple ? files : files[0]\n\n      // Set initialValue here otherwise isFocused\n      // watcher in VTextField will emit a change\n      // event whenever the component is blurred\n      this.initialValue = this.internalValue\n    },\n    onKeyDown (e: KeyboardEvent) {\n      this.$emit('keydown', e)\n    },\n    truncateText (str: string) {\n      if (str.length < Number(this.truncateLength)) return str\n      const charsKeepOneSide = Math.floor((Number(this.truncateLength) - 1) / 2)\n      return `${str.slice(0, charsKeepOneSide)}â€¦${str.slice(str.length - charsKeepOneSide)}`\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}