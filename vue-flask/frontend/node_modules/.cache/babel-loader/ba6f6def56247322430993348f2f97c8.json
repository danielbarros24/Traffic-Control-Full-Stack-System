{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex'; // imports of AJAX functions will go here\n\nimport { fetchSurveys, fetchSurvey, saveSurveyResponse, postNewSurvey, authenticate, register as _register } from '@/api';\nimport { isValidJwt, EventBus } from '@/utils';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    snackbars: [],\n    surveys: [],\n    currentSurvey: {},\n    user: {},\n    jwt: ''\n  },\n  mutations: {\n    SET_SNACKBAR: function SET_SNACKBAR(state, snackbar) {\n      state.snackbars = state.snackbars.concat(snackbar);\n    },\n    setUserData: function setUserData(state, payload) {\n      console.log('setUserData payload = ', payload);\n      state.userData = payload.userData;\n    },\n    setJwtToken: function setJwtToken(state, payload) {\n      console.log('setJwtToken payload = ', payload);\n      localStorage.token = payload.jwt.token;\n      state.jwt = payload.jwt;\n    }\n  },\n  actions: {\n    setSnackbar: function setSnackbar(_ref, snackbar) {\n      var commit = _ref.commit;\n      snackbar.showing = true;\n      snackbar.color = snackbar.color || 'primary';\n      commit('SET_SNACKBAR', snackbar);\n    },\n    login: function login(context, userData) {\n      context.commit('setUserData', {\n        userData: userData\n      });\n      return authenticate(userData).then(function (response) {\n        return context.commit('setJwtToken', {\n          jwt: response.data\n        });\n      }).catch(function (error) {\n        console.log('Error Authenticating: ', error);\n        EventBus.emit('failedAuthentication', error);\n      });\n    },\n    register: function register(context, userData) {\n      context.commit('setUserData', {\n        userData: userData\n      });\n      return _register(userData).then(context.dispatch('login', userData)).catch(function (error) {\n        console.log('Error Registering: ', error);\n        EventBus.emit('failedRegistering: ', error);\n      });\n    },\n    submitNewSurvey: function submitNewSurvey(context, survey) {\n      return postNewSurvey(survey, context.state.jwt.token);\n    }\n  },\n  getters: {\n    isLoggedIn: function isLoggedIn(state) {\n      return !!state.token;\n    }\n  },\n  modules: {}\n});","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/store/index.js"],"names":["Vue","Vuex","fetchSurveys","fetchSurvey","saveSurveyResponse","postNewSurvey","authenticate","register","isValidJwt","EventBus","use","Store","state","snackbars","surveys","currentSurvey","user","jwt","mutations","SET_SNACKBAR","snackbar","concat","setUserData","payload","console","log","userData","setJwtToken","localStorage","token","actions","setSnackbar","commit","showing","color","login","context","then","response","data","catch","error","emit","dispatch","submitNewSurvey","survey","getters","isLoggedIn","modules"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\n// imports of AJAX functions will go here\nimport { fetchSurveys, fetchSurvey, saveSurveyResponse, postNewSurvey, authenticate, register } from '@/api'  \nimport { isValidJwt, EventBus } from '@/utils'\n\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    snackbars: [],\n    surveys: [],\n    currentSurvey: {},\n    user: {},\n    jwt: ''\n  },\n  mutations: {\n\n    SET_SNACKBAR(state, snackbar) {\n      state.snackbars= state.snackbars.concat(snackbar)\n    },\n    setUserData (state, payload) {\n      console.log('setUserData payload = ', payload)\n      state.userData = payload.userData\n    },\n    setJwtToken (state, payload) {\n      console.log('setJwtToken payload = ', payload)\n      localStorage.token = payload.jwt.token\n      state.jwt = payload.jwt\n    }\n  },\n  actions: {\n    setSnackbar({commit}, snackbar) {\n      snackbar.showing = true;\n      snackbar.color = snackbar.color || 'primary';\n      commit ('SET_SNACKBAR', snackbar);\n    },\n    login (context, userData) {\n      context.commit('setUserData', { userData })\n      return authenticate(userData)\n        .then(response => context.commit('setJwtToken', { jwt: response.data }))\n        .catch(error => {\n          console.log('Error Authenticating: ', error)\n          EventBus.emit('failedAuthentication', error)\n        })\n    },\n    register (context, userData) {\n      context.commit('setUserData', { userData })\n      return register(userData)\n        .then(context.dispatch('login', userData))\n        .catch(error => {\n          console.log('Error Registering: ', error)\n          EventBus.emit('failedRegistering: ', error)\n        })\n    },\n    submitNewSurvey (context, survey) {\n      return postNewSurvey(survey, context.state.jwt.token)\n    }\n  },\n  getters: {\n    isLoggedIn(state) {\n      return !!state.token\n    }\n  },\n  modules: {\n  },\n})\n"]},"metadata":{},"sourceType":"module"}