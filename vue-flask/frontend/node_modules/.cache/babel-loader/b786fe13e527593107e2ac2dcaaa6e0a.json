{"ast":null,"code":"// Styles\nimport \"../../../src/components/VSkeletonLoader/VSkeletonLoader.sass\"; // Mixins\n\nimport Elevatable from '../../mixins/elevatable';\nimport Measurable from '../../mixins/measurable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { getSlot } from '../../util/helpers';\n/* @vue/component */\n\nexport default mixins(Elevatable, Measurable, Themeable).extend({\n  name: 'VSkeletonLoader',\n  props: {\n    boilerplate: Boolean,\n    loading: Boolean,\n    tile: Boolean,\n    transition: String,\n    type: String,\n    types: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  computed: {\n    attrs() {\n      if (!this.isLoading) return this.$attrs;\n      return !this.boilerplate ? {\n        'aria-busy': true,\n        'aria-live': 'polite',\n        role: 'alert',\n        ...this.$attrs\n      } : {};\n    },\n\n    classes() {\n      return {\n        'v-skeleton-loader--boilerplate': this.boilerplate,\n        'v-skeleton-loader--is-loading': this.isLoading,\n        'v-skeleton-loader--tile': this.tile,\n        ...this.themeClasses,\n        ...this.elevationClasses\n      };\n    },\n\n    isLoading() {\n      return !('default' in this.$scopedSlots) || this.loading;\n    },\n\n    rootTypes() {\n      return {\n        actions: 'button@2',\n        article: 'heading, paragraph',\n        avatar: 'avatar',\n        button: 'button',\n        card: 'image, card-heading',\n        'card-avatar': 'image, list-item-avatar',\n        'card-heading': 'heading',\n        chip: 'chip',\n        'date-picker': 'list-item, card-heading, divider, date-picker-options, date-picker-days, actions',\n        'date-picker-options': 'text, avatar@2',\n        'date-picker-days': 'avatar@28',\n        heading: 'heading',\n        image: 'image',\n        'list-item': 'text',\n        'list-item-avatar': 'avatar, text',\n        'list-item-two-line': 'sentences',\n        'list-item-avatar-two-line': 'avatar, sentences',\n        'list-item-three-line': 'paragraph',\n        'list-item-avatar-three-line': 'avatar, paragraph',\n        paragraph: 'text@3',\n        sentences: 'text@2',\n        table: 'table-heading, table-thead, table-tbody, table-tfoot',\n        'table-heading': 'heading, text',\n        'table-thead': 'heading@6',\n        'table-tbody': 'table-row-divider@6',\n        'table-row-divider': 'table-row, divider',\n        'table-row': 'table-cell@6',\n        'table-cell': 'text',\n        'table-tfoot': 'text@2, avatar@2',\n        text: 'text',\n        ...this.types\n      };\n    }\n\n  },\n  methods: {\n    genBone(text, children) {\n      return this.$createElement('div', {\n        staticClass: `v-skeleton-loader__${text} v-skeleton-loader__bone`\n      }, children);\n    },\n\n    genBones(bone) {\n      // e.g. 'text@3'\n      const [type, length] = bone.split('@');\n\n      const generator = () => this.genStructure(type); // Generate a length array based upon\n      // value after @ in the bone string\n\n\n      return Array.from({\n        length\n      }).map(generator);\n    },\n\n    // Fix type when this is merged\n    // https://github.com/microsoft/TypeScript/pull/33050\n    genStructure(type) {\n      let children = [];\n      type = type || this.type || '';\n      const bone = this.rootTypes[type] || ''; // End of recursion, do nothing\n\n      /* eslint-disable-next-line no-empty, brace-style */\n\n      if (type === bone) {} // Array of values - e.g. 'heading, paragraph, text@2'\n      else if (type.indexOf(',') > -1) return this.mapBones(type); // Array of values - e.g. 'paragraph@4'\n      else if (type.indexOf('@') > -1) return this.genBones(type); // Array of values - e.g. 'card@2'\n      else if (bone.indexOf(',') > -1) children = this.mapBones(bone); // Array of values - e.g. 'list-item@2'\n      else if (bone.indexOf('@') > -1) children = this.genBones(bone); // Single value - e.g. 'card-heading'\n      else if (bone) children.push(this.genStructure(bone));\n\n      return [this.genBone(type, children)];\n    },\n\n    genSkeleton() {\n      const children = [];\n      if (!this.isLoading) children.push(getSlot(this));else children.push(this.genStructure());\n      /* istanbul ignore else */\n\n      if (!this.transition) return children;\n      /* istanbul ignore next */\n\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition\n        },\n        // Only show transition when\n        // content has been loaded\n        on: {\n          afterEnter: this.resetStyles,\n          beforeEnter: this.onBeforeEnter,\n          beforeLeave: this.onBeforeLeave,\n          leaveCancelled: this.resetStyles\n        }\n      }, children);\n    },\n\n    mapBones(bones) {\n      // Remove spaces and return array of structures\n      return bones.replace(/\\s/g, '').split(',').map(this.genStructure);\n    },\n\n    onBeforeEnter(el) {\n      this.resetStyles(el);\n      if (!this.isLoading) return;\n      el._initialStyle = {\n        display: el.style.display,\n        transition: el.style.transition\n      };\n      el.style.setProperty('transition', 'none', 'important');\n    },\n\n    onBeforeLeave(el) {\n      el.style.setProperty('display', 'none', 'important');\n    },\n\n    resetStyles(el) {\n      if (!el._initialStyle) return;\n      el.style.display = el._initialStyle.display || '';\n      el.style.transition = el._initialStyle.transition;\n      delete el._initialStyle;\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-skeleton-loader',\n      attrs: this.attrs,\n      on: this.$listeners,\n      class: this.classes,\n      style: this.isLoading ? this.measurableStyles : undefined\n    }, [this.genSkeleton()]);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["Elevatable","Measurable","Themeable","mixins","getSlot","extend","name","props","boilerplate","Boolean","loading","tile","transition","String","type","types","Object","default","computed","attrs","isLoading","$attrs","role","classes","themeClasses","elevationClasses","$scopedSlots","rootTypes","actions","article","avatar","button","card","chip","heading","image","paragraph","sentences","table","text","methods","genBone","children","$createElement","staticClass","genBones","bone","length","split","generator","genStructure","Array","from","map","indexOf","mapBones","push","genSkeleton","on","afterEnter","resetStyles","beforeEnter","onBeforeEnter","beforeLeave","onBeforeLeave","leaveCancelled","bones","replace","el","_initialStyle","display","style","setProperty","render","h","$listeners","class","measurableStyles","undefined"],"sourceRoot":"","sources":["../../../src/components/VSkeletonLoader/VSkeletonLoader.ts"],"sourcesContent":["// Styles\nimport './VSkeletonLoader.sass'\n\n// Mixins\nimport Elevatable from '../../mixins/elevatable'\nimport Measurable from '../../mixins/measurable'\nimport Themeable from '../../mixins/themeable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\nimport { getSlot } from '../../util/helpers'\nimport { PropValidator } from 'vue/types/options'\n\nexport interface HTMLSkeletonLoaderElement extends HTMLElement {\n  _initialStyle?: {\n    display: string | null\n    transition: string\n  }\n}\n\n/* @vue/component */\nexport default mixins(\n  Elevatable,\n  Measurable,\n  Themeable,\n).extend({\n  name: 'VSkeletonLoader',\n\n  props: {\n    boilerplate: Boolean,\n    loading: Boolean,\n    tile: Boolean,\n    transition: String,\n    type: String,\n    types: {\n      type: Object,\n      default: () => ({}),\n    } as PropValidator<Record<string, string>>,\n  },\n\n  computed: {\n    attrs (): object {\n      if (!this.isLoading) return this.$attrs\n\n      return !this.boilerplate ? {\n        'aria-busy': true,\n        'aria-live': 'polite',\n        role: 'alert',\n        ...this.$attrs,\n      } : {}\n    },\n    classes (): object {\n      return {\n        'v-skeleton-loader--boilerplate': this.boilerplate,\n        'v-skeleton-loader--is-loading': this.isLoading,\n        'v-skeleton-loader--tile': this.tile,\n        ...this.themeClasses,\n        ...this.elevationClasses,\n      }\n    },\n    isLoading (): boolean {\n      return !('default' in this.$scopedSlots) || this.loading\n    },\n    rootTypes (): Record<string, string> {\n      return {\n        actions: 'button@2',\n        article: 'heading, paragraph',\n        avatar: 'avatar',\n        button: 'button',\n        card: 'image, card-heading',\n        'card-avatar': 'image, list-item-avatar',\n        'card-heading': 'heading',\n        chip: 'chip',\n        'date-picker': 'list-item, card-heading, divider, date-picker-options, date-picker-days, actions',\n        'date-picker-options': 'text, avatar@2',\n        'date-picker-days': 'avatar@28',\n        heading: 'heading',\n        image: 'image',\n        'list-item': 'text',\n        'list-item-avatar': 'avatar, text',\n        'list-item-two-line': 'sentences',\n        'list-item-avatar-two-line': 'avatar, sentences',\n        'list-item-three-line': 'paragraph',\n        'list-item-avatar-three-line': 'avatar, paragraph',\n        paragraph: 'text@3',\n        sentences: 'text@2',\n        table: 'table-heading, table-thead, table-tbody, table-tfoot',\n        'table-heading': 'heading, text',\n        'table-thead': 'heading@6',\n        'table-tbody': 'table-row-divider@6',\n        'table-row-divider': 'table-row, divider',\n        'table-row': 'table-cell@6',\n        'table-cell': 'text',\n        'table-tfoot': 'text@2, avatar@2',\n        text: 'text',\n        ...this.types,\n      }\n    },\n  },\n\n  methods: {\n    genBone (text: string, children: VNode[]) {\n      return this.$createElement('div', {\n        staticClass: `v-skeleton-loader__${text} v-skeleton-loader__bone`,\n      }, children)\n    },\n    genBones (bone: string): VNode[] {\n      // e.g. 'text@3'\n      const [type, length] = bone.split('@') as [string, number]\n      const generator = () => this.genStructure(type)\n\n      // Generate a length array based upon\n      // value after @ in the bone string\n      return Array.from({ length }).map(generator)\n    },\n    // Fix type when this is merged\n    // https://github.com/microsoft/TypeScript/pull/33050\n    genStructure (type?: string): any {\n      let children = []\n      type = type || this.type || ''\n      const bone = this.rootTypes[type] || ''\n\n      // End of recursion, do nothing\n      /* eslint-disable-next-line no-empty, brace-style */\n      if (type === bone) {}\n      // Array of values - e.g. 'heading, paragraph, text@2'\n      else if (type.indexOf(',') > -1) return this.mapBones(type)\n      // Array of values - e.g. 'paragraph@4'\n      else if (type.indexOf('@') > -1) return this.genBones(type)\n      // Array of values - e.g. 'card@2'\n      else if (bone.indexOf(',') > -1) children = this.mapBones(bone)\n      // Array of values - e.g. 'list-item@2'\n      else if (bone.indexOf('@') > -1) children = this.genBones(bone)\n      // Single value - e.g. 'card-heading'\n      else if (bone) children.push(this.genStructure(bone))\n\n      return [this.genBone(type, children)]\n    },\n    genSkeleton () {\n      const children = []\n\n      if (!this.isLoading) children.push(getSlot(this))\n      else children.push(this.genStructure())\n\n      /* istanbul ignore else */\n      if (!this.transition) return children\n\n      /* istanbul ignore next */\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n        },\n        // Only show transition when\n        // content has been loaded\n        on: {\n          afterEnter: this.resetStyles,\n          beforeEnter: this.onBeforeEnter,\n          beforeLeave: this.onBeforeLeave,\n          leaveCancelled: this.resetStyles,\n        },\n      }, children)\n    },\n    mapBones (bones: string) {\n      // Remove spaces and return array of structures\n      return bones.replace(/\\s/g, '').split(',').map(this.genStructure)\n    },\n    onBeforeEnter (el: HTMLSkeletonLoaderElement) {\n      this.resetStyles(el)\n\n      if (!this.isLoading) return\n\n      el._initialStyle = {\n        display: el.style.display,\n        transition: el.style.transition,\n      }\n\n      el.style.setProperty('transition', 'none', 'important')\n    },\n    onBeforeLeave (el: HTMLSkeletonLoaderElement) {\n      el.style.setProperty('display', 'none', 'important')\n    },\n    resetStyles (el: HTMLSkeletonLoaderElement) {\n      if (!el._initialStyle) return\n\n      el.style.display = el._initialStyle.display || ''\n      el.style.transition = el._initialStyle.transition\n\n      delete el._initialStyle\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-skeleton-loader',\n      attrs: this.attrs,\n      on: this.$listeners,\n      class: this.classes,\n      style: this.isLoading ? this.measurableStyles : undefined,\n    }, [this.genSkeleton()])\n  },\n})\n"]},"metadata":{},"sourceType":"module"}