{"ast":null,"code":"// Styles\nimport \"../../../src/components/VTextField/VTextField.sass\";\nimport \"../../../src/components/VOtpInput/VOtpInput.sass\"; // Extensions\n\nimport VInput from '../VInput';\nimport VTextField from '../VTextField/VTextField'; // Directives\n\nimport ripple from '../../directives/ripple'; // Utilities\n\nimport { convertToUnit, keyCodes } from '../../util/helpers';\nimport { breaking } from '../../util/console'; // Types\n\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(VInput);\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-otp-input',\n  directives: {\n    ripple\n  },\n  inheritAttrs: false,\n  props: {\n    length: {\n      type: [Number, String],\n      default: 6\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    plain: Boolean\n  },\n  data: () => ({\n    badInput: false,\n    initialValue: null,\n    isBooted: false,\n    otp: []\n  }),\n  computed: {\n    outlined() {\n      return !this.plain;\n    },\n\n    classes() {\n      return { ...VInput.options.computed.classes.call(this),\n        ...VTextField.options.computed.classes.call(this),\n        'v-otp-input--plain': this.plain\n      };\n    },\n\n    isDirty() {\n      return VInput.options.computed.isDirty.call(this) || this.badInput;\n    }\n\n  },\n  watch: {\n    isFocused: 'updateValue',\n\n    value(val) {\n      this.lazyValue = val;\n      this.otp = (val == null ? void 0 : val.split('')) || [];\n    }\n\n  },\n\n  created() {\n    var _this$internalValue;\n    /* istanbul ignore next */\n\n\n    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {\n      breaking('browser-autocomplete', 'autocomplete', this);\n    }\n\n    this.otp = ((_this$internalValue = this.internalValue) == null ? void 0 : _this$internalValue.split('')) || [];\n  },\n\n  mounted() {\n    requestAnimationFrame(() => this.isBooted = true);\n  },\n\n  methods: {\n    /** @public */\n    focus(e, otpIdx) {\n      this.onFocus(e, otpIdx || 0);\n    },\n\n    genInputSlot(otpIdx) {\n      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor, {\n        staticClass: 'v-input__slot',\n        style: {\n          height: convertToUnit(this.height)\n        },\n        on: {\n          click: () => this.onClick(otpIdx),\n          mousedown: e => this.onMouseDown(e, otpIdx),\n          mouseup: e => this.onMouseUp(e, otpIdx)\n        }\n      }), [this.genDefaultSlot(otpIdx)]);\n    },\n\n    genControl(otpIdx) {\n      return this.$createElement('div', {\n        staticClass: 'v-input__control'\n      }, [this.genInputSlot(otpIdx)]);\n    },\n\n    genDefaultSlot(otpIdx) {\n      return [this.genFieldset(), this.genTextFieldSlot(otpIdx)];\n    },\n\n    genContent() {\n      return Array.from({\n        length: +this.length\n      }, (_, i) => {\n        return this.$createElement('div', this.setTextColor(this.validationState, {\n          staticClass: 'v-input',\n          class: this.classes\n        }), [this.genControl(i)]);\n      });\n    },\n\n    genFieldset() {\n      return this.$createElement('fieldset', {\n        attrs: {\n          'aria-hidden': true\n        }\n      }, [this.genLegend()]);\n    },\n\n    genLegend() {\n      const span = this.$createElement('span', {\n        domProps: {\n          innerHTML: '&#8203;'\n        }\n      });\n      return this.$createElement('legend', {\n        style: {\n          width: '0px'\n        }\n      }, [span]);\n    },\n\n    genInput(otpIdx) {\n      const listeners = Object.assign({}, this.listeners$);\n      delete listeners.change; // Change should not be bound externally\n\n      return this.$createElement('input', {\n        style: {},\n        domProps: {\n          value: this.otp[otpIdx],\n          min: this.type === 'number' ? 0 : null\n        },\n        attrs: { ...this.attrs$,\n          disabled: this.isDisabled,\n          readonly: this.isReadonly,\n          type: this.type,\n          id: `${this.computedId}--${otpIdx}`,\n          class: `otp-field-box--${otpIdx}`,\n          maxlength: 1\n        },\n        on: Object.assign(listeners, {\n          blur: this.onBlur,\n          input: e => this.onInput(e, otpIdx),\n          focus: e => this.onFocus(e, otpIdx),\n          paste: e => this.onPaste(e, otpIdx),\n          keydown: this.onKeyDown,\n          keyup: e => this.onKeyUp(e, otpIdx)\n        }),\n        ref: 'input',\n        refInFor: true\n      });\n    },\n\n    genTextFieldSlot(otpIdx) {\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__slot'\n      }, [this.genInput(otpIdx)]);\n    },\n\n    onBlur(e) {\n      this.isFocused = false;\n      e && this.$nextTick(() => this.$emit('blur', e));\n    },\n\n    onClick(otpIdx) {\n      if (this.isFocused || this.isDisabled || !this.$refs.input[otpIdx]) return;\n      this.onFocus(undefined, otpIdx);\n    },\n\n    onFocus(e, otpIdx) {\n      e == null ? void 0 : e.preventDefault();\n      e == null ? void 0 : e.stopPropagation();\n      const elements = this.$refs.input;\n      const ref = this.$refs.input && elements[otpIdx || 0];\n      if (!ref) return;\n\n      if (document.activeElement !== ref) {\n        ref.focus();\n        return ref.select();\n      }\n\n      if (!this.isFocused) {\n        this.isFocused = true;\n        ref.select();\n        e && this.$emit('focus', e);\n      }\n    },\n\n    onInput(e, otpIdx) {\n      const target = e.target;\n      const value = target.value;\n      this.applyValue(otpIdx, target.value, () => {\n        this.internalValue = this.otp.join('');\n      });\n      this.badInput = target.validity && target.validity.badInput;\n      const nextIndex = otpIdx + 1;\n\n      if (value) {\n        if (nextIndex < +this.length) {\n          this.changeFocus(nextIndex);\n        } else {\n          this.clearFocus(otpIdx);\n          this.onCompleted();\n        }\n      }\n    },\n\n    clearFocus(index) {\n      const input = this.$refs.input[index];\n      input.blur();\n    },\n\n    onKeyDown(e) {\n      if (e.keyCode === keyCodes.enter) {\n        this.$emit('change', this.internalValue);\n      }\n\n      this.$emit('keydown', e);\n    },\n\n    onMouseDown(e, otpIdx) {\n      // Prevent input from being blurred\n      if (e.target !== this.$refs.input[otpIdx]) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      VInput.options.methods.onMouseDown.call(this, e);\n    },\n\n    onMouseUp(e, otpIdx) {\n      if (this.hasMouseDown) this.focus(e, otpIdx);\n      VInput.options.methods.onMouseUp.call(this, e);\n    },\n\n    onPaste(event, index) {\n      var _event$clipboardData;\n\n      const maxCursor = +this.length - 1;\n      const inputVal = event == null ? void 0 : (_event$clipboardData = event.clipboardData) == null ? void 0 : _event$clipboardData.getData('Text');\n      const inputDataArray = (inputVal == null ? void 0 : inputVal.split('')) || [];\n      event.preventDefault();\n      const newOtp = [...this.otp];\n\n      for (let i = 0; i < inputDataArray.length; i++) {\n        const appIdx = index + i;\n        if (appIdx > maxCursor) break;\n        newOtp[appIdx] = inputDataArray[i].toString();\n      }\n\n      this.otp = newOtp;\n      this.internalValue = this.otp.join('');\n      const targetFocus = Math.min(index + inputDataArray.length, maxCursor);\n      this.changeFocus(targetFocus);\n\n      if (newOtp.length === +this.length) {\n        this.onCompleted();\n        this.clearFocus(targetFocus);\n      }\n    },\n\n    applyValue(index, inputVal, next) {\n      const newOtp = [...this.otp];\n      newOtp[index] = inputVal;\n      this.otp = newOtp;\n      next();\n    },\n\n    changeFocus(index) {\n      this.onFocus(undefined, index || 0);\n    },\n\n    updateValue(val) {\n      // Sets validationState from validatable\n      this.hasColor = val;\n\n      if (val) {\n        this.initialValue = this.lazyValue;\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue);\n      }\n    },\n\n    onKeyUp(event, index) {\n      event.preventDefault();\n      const eventKey = event.key;\n\n      if (['Tab', 'Shift', 'Meta', 'Control', 'Alt'].includes(eventKey)) {\n        return;\n      }\n\n      if (['Delete'].includes(eventKey)) {\n        return;\n      }\n\n      if (eventKey === 'ArrowLeft' || eventKey === 'Backspace' && !this.otp[index]) {\n        return index > 0 && this.changeFocus(index - 1);\n      }\n\n      if (eventKey === 'ArrowRight') {\n        return index + 1 < +this.length && this.changeFocus(index + 1);\n      }\n    },\n\n    onCompleted() {\n      const rsp = this.otp.join('');\n\n      if (rsp.length === +this.length) {\n        this.$emit('finish', rsp);\n      }\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-otp-input',\n      class: this.themeClasses\n    }, this.genContent());\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VInput","VTextField","ripple","convertToUnit","keyCodes","breaking","mixins","baseMixins","extend","name","directives","inheritAttrs","props","length","type","Number","String","default","plain","Boolean","data","badInput","initialValue","isBooted","otp","computed","outlined","classes","options","call","isDirty","watch","isFocused","value","val","lazyValue","split","created","$attrs","hasOwnProperty","internalValue","mounted","requestAnimationFrame","methods","focus","e","otpIdx","onFocus","genInputSlot","$createElement","setBackgroundColor","backgroundColor","staticClass","style","height","on","click","onClick","mousedown","onMouseDown","mouseup","onMouseUp","genDefaultSlot","genControl","genFieldset","genTextFieldSlot","genContent","Array","from","_","i","setTextColor","validationState","class","attrs","genLegend","span","domProps","innerHTML","width","genInput","listeners","Object","assign","listeners$","change","min","attrs$","disabled","isDisabled","readonly","isReadonly","id","computedId","maxlength","blur","onBlur","input","onInput","paste","onPaste","keydown","onKeyDown","keyup","onKeyUp","ref","refInFor","$nextTick","$emit","$refs","undefined","preventDefault","stopPropagation","elements","document","activeElement","select","target","applyValue","join","validity","nextIndex","changeFocus","clearFocus","onCompleted","index","keyCode","enter","hasMouseDown","event","maxCursor","inputVal","clipboardData","_event$clipboardData","getData","inputDataArray","newOtp","appIdx","toString","targetFocus","Math","next","updateValue","hasColor","eventKey","key","includes","rsp","render","h","themeClasses"],"sourceRoot":"","sources":["../../../src/components/VOtpInput/VOtpInput.ts"],"sourcesContent":["// Styles\nimport '../VTextField/VTextField.sass'\nimport './VOtpInput.sass'\n\n// Extensions\nimport VInput from '../VInput'\nimport VTextField from '../VTextField/VTextField'\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { convertToUnit, keyCodes } from '../../util/helpers'\nimport { breaking } from '../../util/console'\n\n// Types\nimport mixins from '../../util/mixins'\nimport { VNode } from 'vue'\n\nconst baseMixins = mixins(\n  VInput,\n)\n\ninterface options extends InstanceType<typeof baseMixins> {\n  $refs: {\n    input: HTMLInputElement[]\n  }\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-otp-input',\n\n  directives: {\n    ripple,\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    length: {\n      type: [Number, String],\n      default: 6,\n    },\n    type: {\n      type: String,\n      default: 'text',\n    },\n    plain: Boolean,\n  },\n\n  data: () => ({\n    badInput: false,\n    initialValue: null,\n    isBooted: false,\n    otp: [] as string[],\n  }),\n\n  computed: {\n    outlined (): Boolean {\n      return !this.plain\n    },\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        ...VTextField.options.computed.classes.call(this),\n        'v-otp-input--plain': this.plain,\n      }\n    },\n    isDirty (): boolean {\n      return VInput.options.computed.isDirty.call(this) || this.badInput\n    },\n  },\n\n  watch: {\n    isFocused: 'updateValue',\n    value (val) {\n      this.lazyValue = val\n      this.otp = val?.split('') || []\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {\n      breaking('browser-autocomplete', 'autocomplete', this)\n    }\n\n    this.otp = this.internalValue?.split('') || []\n  },\n\n  mounted () {\n    requestAnimationFrame(() => (this.isBooted = true))\n  },\n\n  methods: {\n    /** @public */\n    focus (e: Event, otpIdx: number) {\n      this.onFocus(e, otpIdx || 0)\n    },\n    genInputSlot (otpIdx: number) {\n      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor, {\n        staticClass: 'v-input__slot',\n        style: { height: convertToUnit(this.height) },\n        on: {\n          click: () => this.onClick(otpIdx),\n          mousedown: (e: Event) => this.onMouseDown(e, otpIdx),\n          mouseup: (e: Event) => this.onMouseUp(e, otpIdx),\n        },\n      }), [this.genDefaultSlot(otpIdx)])\n    },\n    genControl (otpIdx: number) {\n      return this.$createElement('div', {\n        staticClass: 'v-input__control',\n      }, [\n        this.genInputSlot(otpIdx),\n      ])\n    },\n    genDefaultSlot (otpIdx: number) {\n      return [\n        this.genFieldset(),\n        this.genTextFieldSlot(otpIdx),\n      ]\n    },\n    genContent () {\n      return Array.from({ length: +this.length }, (_, i) => {\n        return this.$createElement('div', this.setTextColor(this.validationState, {\n          staticClass: 'v-input',\n          class: this.classes,\n        }), [this.genControl(i)])\n      })\n    },\n    genFieldset () {\n      return this.$createElement('fieldset', {\n        attrs: {\n          'aria-hidden': true,\n        },\n      }, [this.genLegend()])\n    },\n    genLegend () {\n      const span = this.$createElement('span', {\n        domProps: { innerHTML: '&#8203;' },\n      })\n\n      return this.$createElement('legend', {\n        style: {\n          width: '0px',\n        },\n      }, [span])\n    },\n    genInput (otpIdx: number) {\n      const listeners = Object.assign({}, this.listeners$)\n      delete listeners.change // Change should not be bound externally\n\n      return this.$createElement('input', {\n        style: {},\n        domProps: {\n          value: this.otp[otpIdx],\n          min: this.type === 'number' ? 0 : null,\n        },\n        attrs: {\n          ...this.attrs$,\n          disabled: this.isDisabled,\n          readonly: this.isReadonly,\n          type: this.type,\n          id: `${this.computedId}--${otpIdx}`,\n          class: `otp-field-box--${otpIdx}`,\n          maxlength: 1,\n        },\n        on: Object.assign(listeners, {\n          blur: this.onBlur,\n          input: (e: Event) => this.onInput(e, otpIdx),\n          focus: (e: Event) => this.onFocus(e, otpIdx),\n          paste: (e: ClipboardEvent) => this.onPaste(e, otpIdx),\n          keydown: this.onKeyDown,\n          keyup: (e: KeyboardEvent) => this.onKeyUp(e, otpIdx),\n        }),\n        ref: 'input',\n        refInFor: true,\n      })\n    },\n    genTextFieldSlot (otpIdx: number): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__slot',\n      }, [\n        this.genInput(otpIdx),\n      ])\n    },\n    onBlur (e?: Event) {\n      this.isFocused = false\n      e && this.$nextTick(() => this.$emit('blur', e))\n    },\n    onClick (otpIdx: number) {\n      if (this.isFocused || this.isDisabled || !this.$refs.input[otpIdx]) return\n\n      this.onFocus(undefined, otpIdx)\n    },\n    onFocus (e?: Event, otpIdx?: number) {\n      e?.preventDefault()\n      e?.stopPropagation()\n      const elements = this.$refs.input as HTMLInputElement[]\n      const ref = this.$refs.input && elements[otpIdx || 0]\n      if (!ref) return\n\n      if (document.activeElement !== ref) {\n        ref.focus()\n        return ref.select()\n      }\n\n      if (!this.isFocused) {\n        this.isFocused = true\n        ref.select()\n        e && this.$emit('focus', e)\n      }\n    },\n    onInput (e: Event, otpIdx: number) {\n      const target = e.target as HTMLInputElement\n      const value = target.value\n      this.applyValue(otpIdx, target.value, () => {\n        this.internalValue = this.otp.join('')\n      })\n      this.badInput = target.validity && target.validity.badInput\n\n      const nextIndex = otpIdx + 1\n      if (value) {\n        if (nextIndex < +this.length) {\n          this.changeFocus(nextIndex)\n        } else {\n          this.clearFocus(otpIdx)\n          this.onCompleted()\n        }\n      }\n    },\n    clearFocus (index: number) {\n      const input = this.$refs.input[index] as HTMLInputElement\n      input.blur()\n    },\n    onKeyDown (e: KeyboardEvent) {\n      if (e.keyCode === keyCodes.enter) {\n        this.$emit('change', this.internalValue)\n      }\n\n      this.$emit('keydown', e)\n    },\n    onMouseDown (e: Event, otpIdx: number) {\n      // Prevent input from being blurred\n      if (e.target !== this.$refs.input[otpIdx]) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n\n      VInput.options.methods.onMouseDown.call(this, e)\n    },\n    onMouseUp (e: Event, otpIdx: number) {\n      if (this.hasMouseDown) this.focus(e, otpIdx)\n\n      VInput.options.methods.onMouseUp.call(this, e)\n    },\n    onPaste (event: ClipboardEvent, index: number) {\n      const maxCursor = +this.length - 1\n      const inputVal = event?.clipboardData?.getData('Text')\n      const inputDataArray = inputVal?.split('') || []\n      event.preventDefault()\n      const newOtp: string[] = [...this.otp]\n      for (let i = 0; i < inputDataArray.length; i++) {\n        const appIdx = index + i\n        if (appIdx > maxCursor) break\n        newOtp[appIdx] = inputDataArray[i].toString()\n      }\n      this.otp = newOtp\n      this.internalValue = this.otp.join('')\n      const targetFocus = Math.min(index + inputDataArray.length, maxCursor)\n      this.changeFocus(targetFocus)\n\n      if (newOtp.length === +this.length) { this.onCompleted(); this.clearFocus(targetFocus) }\n    },\n    applyValue (index: number, inputVal: string, next: Function) {\n      const newOtp: string[] = [...this.otp]\n      newOtp[index] = inputVal\n      this.otp = newOtp\n      next()\n    },\n    changeFocus (index: number) {\n      this.onFocus(undefined, index || 0)\n    },\n    updateValue (val: boolean) {\n      // Sets validationState from validatable\n      this.hasColor = val\n\n      if (val) {\n        this.initialValue = this.lazyValue\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue)\n      }\n    },\n    onKeyUp (event: KeyboardEvent, index: number) {\n      event.preventDefault()\n      const eventKey = event.key\n      if (['Tab', 'Shift', 'Meta', 'Control', 'Alt'].includes(eventKey)) {\n        return\n      }\n      if (['Delete'].includes(eventKey)) {\n        return\n      }\n      if (eventKey === 'ArrowLeft' || (eventKey === 'Backspace' && !this.otp[index])) {\n        return index > 0 && this.changeFocus(index - 1)\n      }\n      if (eventKey === 'ArrowRight') {\n        return index + 1 < +this.length && this.changeFocus(index + 1)\n      }\n    },\n    onCompleted () {\n      const rsp = this.otp.join('')\n      if (rsp.length === +this.length) {\n        this.$emit('finish', rsp)\n      }\n    },\n  },\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-otp-input',\n      class: this.themeClasses,\n    }, this.genContent())\n  },\n})\n"]},"metadata":{},"sourceType":"module"}