{"ast":null,"code":"import _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../sockets\";\nimport Node from \"rete-vue-render-plugin/src/end/Node.vue\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport { SwitchControl } from \"@/node-editor/controls/SwitchControl/SwitchControl\";\nexport var GpioComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(GpioComponent, _Rete$Component);\n\n  var _super = _createSuper(GpioComponent);\n\n  function GpioComponent() {\n    var _this;\n\n    _classCallCheck(this, GpioComponent);\n\n    _this = _super.call(this, \"GPIO\");\n    _this.data.component = Node;\n    return _this;\n  }\n\n  _createClass(GpioComponent, [{\n    key: \"builder\",\n    value: function builder(node) {\n      var input = new Rete.Input('num', \"Input\", Socket.boolean, true);\n      return node.addInput(input).addControl(new SelectControl(this.editor, 'type1', [{\n        text: 'GPIO 1',\n        value: '1'\n      }, {\n        text: 'GPIO 2',\n        value: '2'\n      }], \"GPIO\")).addControl(new SwitchControl(this.editor, 'type'));\n    }\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {}\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var _connectionComponent$;\n\n      var inputs = node.inputs;\n\n      if (inputs.length == 0) {\n        return {};\n      }\n\n      var inputNum = inputs.get('num');\n      var connections = inputNum.connections;\n\n      if (connections.length == 0) {\n        return {};\n      }\n\n      var connection = connections[0];\n      var connectionNode = connection.output.node;\n      var connectionComponent = this.editor.getComponent(connectionNode.name);\n      return (_connectionComponent$ = connectionComponent.toJsonLogic) === null || _connectionComponent$ === void 0 ? void 0 : _connectionComponent$.call(connectionComponent, connectionNode);\n    }\n  }, {\n    key: \"toGPIO\",\n    value: function toGPIO(node) {\n      var gpio = node.data.type1;\n      var inverted = node.data.type;\n      return {\n        gpio: gpio,\n        inverted: inverted\n      };\n    }\n  }]);\n\n  return GpioComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/GpioComponent.js"],"names":["Rete","Socket","Node","SelectControl","SwitchControl","GpioComponent","data","component","node","input","Input","boolean","addInput","addControl","editor","text","value","inputs","outputs","length","inputNum","get","connections","connection","connectionNode","output","connectionComponent","getComponent","name","toJsonLogic","gpio","type1","inverted","type","Component"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAEA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,SAASC,aAAT,QAA8B,oDAA9B;AACA,SAASC,aAAT,QAA8B,oDAA9B;AAEA,WAAaC,aAAb;AAAA;;AAAA;;AACI,2BAAa;AAAA;;AAAA;;AACT,8BAAM,MAAN;AACA,UAAKC,IAAL,CAAUC,SAAV,GAAsBL,IAAtB;AAFS;AAGZ;;AAJL;AAAA;AAAA,WAMI,iBAAQM,IAAR,EAAc;AACV,UAAIC,KAAK,GAAG,IAAIT,IAAI,CAACU,KAAT,CAAe,KAAf,EAAsB,OAAtB,EAA+BT,MAAM,CAACU,OAAtC,EAA+C,IAA/C,CAAZ;AACA,aAAOH,IAAI,CACRI,QADI,CACKH,KADL,EAEJI,UAFI,CAEO,IAAIV,aAAJ,CAAkB,KAAKW,MAAvB,EAA+B,OAA/B,EAAwC,CAClD;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OADkD,EAElD;AAAED,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAFkD,CAAxC,EAGX,MAHW,CAFP,EAMJH,UANI,CAMO,IAAIT,aAAJ,CAAkB,KAAKU,MAAvB,EAA+B,MAA/B,CANP,CAAP;AAOH;AAfL;AAAA;AAAA,WAiBI,gBAAON,IAAP,EAAaS,MAAb,EAAqBC,OAArB,EAA8B,CAC7B;AAlBL;AAAA;AAAA,WAoBI,qBAAYV,IAAZ,EAAkB;AAAA;;AACd,UAAQS,MAAR,GAAmBT,IAAnB,CAAQS,MAAR;;AAEA,UAAIA,MAAM,CAACE,MAAP,IAAiB,CAArB,EAAwB;AACpB,eAAO,EAAP;AACH;;AAED,UAAMC,QAAQ,GAAGH,MAAM,CAACI,GAAP,CAAW,KAAX,CAAjB;AACA,UAAQC,WAAR,GAAwBF,QAAxB,CAAQE,WAAR;;AAEA,UAAIA,WAAW,CAACH,MAAZ,IAAsB,CAA1B,EAA6B;AACzB,eAAO,EAAP;AACH;;AAED,UAAMI,UAAU,GAAGD,WAAW,CAAC,CAAD,CAA9B;AACA,UAAME,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkBjB,IAAzC;AACA,UAAMkB,mBAAmB,GAAG,KAAKZ,MAAL,CAAYa,YAAZ,CAAyBH,cAAc,CAACI,IAAxC,CAA5B;AAEA,sCAAOF,mBAAmB,CAACG,WAA3B,0DAAO,2BAAAH,mBAAmB,EAAeF,cAAf,CAA1B;AACH;AAvCL;AAAA;AAAA,WAyCI,gBAAOhB,IAAP,EAAa;AACT,UAAMsB,IAAI,GAAGtB,IAAI,CAACF,IAAL,CAAUyB,KAAvB;AACA,UAAMC,QAAQ,GAAGxB,IAAI,CAACF,IAAL,CAAU2B,IAA3B;AAEA,aAAO;AAACH,QAAAA,IAAI,EAAJA,IAAD;AAAOE,QAAAA,QAAQ,EAARA;AAAP,OAAP;AACH;AA9CL;;AAAA;AAAA,EAAmChC,IAAI,CAACkC,SAAxC","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\n\nimport Node from \"rete-vue-render-plugin/src/end/Node.vue\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport { SwitchControl } from \"@/node-editor/controls/SwitchControl/SwitchControl\";\n\nexport class GpioComponent extends Rete.Component {\n    constructor(){\n        super(\"GPIO\");\n        this.data.component = Node;\n    }\n\n    builder(node) {\n        var input = new Rete.Input('num', \"Input\", Socket.boolean, true);\n        return node\n          .addInput(input)\n          .addControl(new SelectControl(this.editor, 'type1', [\n            { text: 'GPIO 1', value: '1' },\n            { text: 'GPIO 2', value: '2' }\n        ], \"GPIO\"))\n          .addControl(new SwitchControl(this.editor, 'type'))\n    }\n\n    worker(node, inputs, outputs) {\n    }\n\n    toJsonLogic(node) {\n        const { inputs } = node;\n\n        if (inputs.length == 0) {\n            return {};\n        }\n\n        const inputNum = inputs.get('num')\n        const { connections } = inputNum;\n\n        if (connections.length == 0) {\n            return {};\n        }\n\n        const connection = connections[0];\n        const connectionNode = connection.output.node;\n        const connectionComponent = this.editor.getComponent(connectionNode.name);\n\n        return connectionComponent.toJsonLogic?.(connectionNode);\n    }\n\n    toGPIO(node) {\n        const gpio = node.data.type1\n        const inverted = node.data.type\n\n        return {gpio, inverted}\n    }\n}"]},"metadata":{},"sourceType":"module"}