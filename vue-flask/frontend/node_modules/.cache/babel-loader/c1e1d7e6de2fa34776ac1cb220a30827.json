{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport { TimeControl } from \"@/node-editor/controls/TimeControl/TimeControl\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\nexport var FlowComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(FlowComponent, _Rete$Component);\n\n  var _super = _createSuper(FlowComponent);\n\n  function FlowComponent() {\n    var _this;\n\n    _classCallCheck(this, FlowComponent);\n\n    _this = _super.call(this, \"Flow\");\n    _this.data.component = Node;\n    return _this;\n  }\n\n  _createClass(FlowComponent, [{\n    key: \"builder\",\n    value: function () {\n      var _builder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node) {\n        var responseZones, zones, all, x, sensor, sensorNumber, aux, out1;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://127.0.0.1:5000/settings-zones\");\n\n              case 2:\n                responseZones = _context.sent;\n                _context.next = 5;\n                return responseZones.json();\n\n              case 5:\n                zones = _context.sent;\n                all = [];\n\n                for (x in zones.Zones) {\n                  sensor = zones.Zones[x].split('-');\n                  sensorNumber = sensor[0].replace(/[^\\d.]/g, '');\n                  aux = [];\n                  aux.push(sensorNumber);\n                  aux.push(sensor[1]);\n                  all.push(aux);\n                }\n\n                out1 = new Rete.Output('num', \"Out\", Socket.number);\n                return _context.abrupt(\"return\", node.addControl(new SelectControl(this.editor, 'type', [{\n                  text: 'All',\n                  value: 'ALL'\n                }, {\n                  text: 'Car',\n                  value: 'CAR'\n                }, {\n                  text: 'Truck',\n                  value: 'TRUCK'\n                }, {\n                  text: 'Bike',\n                  value: 'BIKE'\n                }], \"Vehicle Type\")).addControl(new SelectControl(this.editor, 'type1', all.map(function (value) {\n                  return {\n                    text: \"Sensor \".concat(value[0], \" - Lane \").concat(value[1]),\n                    value: \"T\".concat(value[0], \"-\").concat(value[1])\n                  };\n                }), \"Zone\")).addControl(new TimeControl(this.editor, 'str')).addOutput(out1));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function builder(_x) {\n        return _builder.apply(this, arguments);\n      }\n\n      return builder;\n    }()\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['num'] = node.data.num;\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var zone = node.data.type1;\n      var vehicleType = node.data.type;\n      var duration = node.data.str;\n      return {\n        \"flow\": [zone, vehicleType, duration]\n      };\n    }\n  }]);\n\n  return FlowComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/variables/FlowComponent.js"],"names":["Rete","Socket","TimeControl","SelectControl","Node","FlowComponent","data","component","node","fetch","responseZones","json","zones","all","x","Zones","sensor","split","sensorNumber","replace","aux","push","out1","Output","number","addControl","editor","text","value","map","addOutput","inputs","outputs","num","zone","type1","vehicleType","type","duration","str","Component"],"mappings":"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","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\n\nimport { TimeControl } from \"@/node-editor/controls/TimeControl/TimeControl\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\n\nexport class FlowComponent extends Rete.Component {\n    constructor(){\n        super(\"Flow\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n        const responseZones = await fetch(\"http://127.0.0.1:5000/settings-zones\");\n        const zones = await responseZones.json();\n\n        \n        const all = []\n\n        for (const x in zones.Zones) {\n            const sensor = zones.Zones[x].split('-')\n            const sensorNumber = sensor[0].replace( /[^\\d.]/g, '' )\n\n            const aux = []\n            aux.push(sensorNumber)\n            aux.push(sensor[1])\n\n            all.push(aux)\n        }\n        var out1 = new Rete.Output('num', \"Out\", Socket.number);\n\n        return node\n    \n          .addControl(new SelectControl(this.editor, 'type', [\n            { text: 'All', value: 'ALL' },\n            { text: 'Car', value: 'CAR' },\n            { text: 'Truck', value: 'TRUCK' },\n            { text: 'Bike', value: 'BIKE' }\n          ], \"Vehicle Type\"))\n          .addControl(new SelectControl(this.editor, 'type1', all.map((value) => ({\n            text: `Sensor ${value[0]} - Lane ${value[1]}`, value: `T${value[0]}-${value[1]}`,\n          })), \"Zone\"))\n          .addControl(new TimeControl(this.editor, 'str'))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.num;\n    }\n    toJsonLogic(node) {\n        const zone = node.data.type1;\n        const vehicleType = node.data.type;\n        const duration = node.data.str;\n\n        return {\n            \"flow\": [ zone, vehicleType, duration ]\n        }  \n    }\n}"]},"metadata":{},"sourceType":"module"}