{"ast":null,"code":"// Styles\nimport \"../../../src/components/VDialog/VDialog.sass\"; // Components\n\nimport { VThemeProvider } from '../VThemeProvider'; // Mixins\n\nimport Activatable from '../../mixins/activatable';\nimport Dependent from '../../mixins/dependent';\nimport Detachable from '../../mixins/detachable';\nimport Overlayable from '../../mixins/overlayable';\nimport Returnable from '../../mixins/returnable';\nimport Stackable from '../../mixins/stackable'; // Directives\n\nimport ClickOutside from '../../directives/click-outside'; // Helpers\n\nimport mixins from '../../util/mixins';\nimport { removed } from '../../util/console';\nimport { convertToUnit, keyCodes } from '../../util/helpers';\nconst baseMixins = mixins(Dependent, Detachable, Overlayable, Returnable, Stackable, Activatable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'v-dialog',\n  directives: {\n    ClickOutside\n  },\n  props: {\n    dark: Boolean,\n    disabled: Boolean,\n    fullscreen: Boolean,\n    light: Boolean,\n    maxWidth: [String, Number],\n    noClickAnimation: Boolean,\n    origin: {\n      type: String,\n      default: 'center center'\n    },\n    persistent: Boolean,\n    retainFocus: {\n      type: Boolean,\n      default: true\n    },\n    scrollable: Boolean,\n    transition: {\n      type: [String, Boolean],\n      default: 'dialog-transition'\n    },\n    width: [String, Number]\n  },\n\n  data() {\n    return {\n      activatedBy: null,\n      animate: false,\n      animateTimeout: -1,\n      stackMinZIndex: 200,\n      previousActiveElement: null\n    };\n  },\n\n  computed: {\n    classes() {\n      return {\n        [`v-dialog ${this.contentClass}`.trim()]: true,\n        'v-dialog--active': this.isActive,\n        'v-dialog--persistent': this.persistent,\n        'v-dialog--fullscreen': this.fullscreen,\n        'v-dialog--scrollable': this.scrollable,\n        'v-dialog--animated': this.animate\n      };\n    },\n\n    contentClasses() {\n      return {\n        'v-dialog__content': true,\n        'v-dialog__content--active': this.isActive\n      };\n    },\n\n    hasActivator() {\n      return Boolean(!!this.$slots.activator || !!this.$scopedSlots.activator);\n    }\n\n  },\n  watch: {\n    isActive(val) {\n      if (val) {\n        this.show();\n        this.hideScroll();\n      } else {\n        var _this$previousActiveE;\n\n        this.removeOverlay();\n        this.unbind();\n        (_this$previousActiveE = this.previousActiveElement) == null ? void 0 : _this$previousActiveE.focus();\n      }\n    },\n\n    fullscreen(val) {\n      if (!this.isActive) return;\n\n      if (val) {\n        this.hideScroll();\n        this.removeOverlay(false);\n      } else {\n        this.showScroll();\n        this.genOverlay();\n      }\n    }\n\n  },\n\n  created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('full-width')) {\n      removed('full-width', this);\n    }\n  },\n\n  beforeMount() {\n    this.$nextTick(() => {\n      this.isBooted = this.isActive;\n      this.isActive && this.show();\n    });\n  },\n\n  beforeDestroy() {\n    if (typeof window !== 'undefined') this.unbind();\n  },\n\n  methods: {\n    animateClick() {\n      this.animate = false; // Needed for when clicking very fast\n      // outside of the dialog\n\n      this.$nextTick(() => {\n        this.animate = true;\n        window.clearTimeout(this.animateTimeout);\n        this.animateTimeout = window.setTimeout(() => this.animate = false, 150);\n      });\n    },\n\n    closeConditional(e) {\n      const target = e.target; // Ignore the click if the dialog is closed or destroyed,\n      // if it was on an element inside the content,\n      // if it was dragged onto the overlay (#6969),\n      // or if this isn't the topmost dialog (#9907)\n\n      return !(this._isDestroyed || !this.isActive || this.$refs.content.contains(target) || this.overlay && target && !this.overlay.$el.contains(target)) && this.activeZIndex >= this.getMaxZIndex();\n    },\n\n    hideScroll() {\n      if (this.fullscreen) {\n        document.documentElement.classList.add('overflow-y-hidden');\n      } else {\n        Overlayable.options.methods.hideScroll.call(this);\n      }\n    },\n\n    show() {\n      !this.fullscreen && !this.hideOverlay && this.genOverlay(); // Double nextTick to wait for lazy content to be generated\n\n      this.$nextTick(() => {\n        this.$nextTick(() => {\n          if (!this.$refs.content.contains(document.activeElement)) {\n            this.previousActiveElement = document.activeElement;\n            this.$refs.content.focus();\n          }\n\n          this.bind();\n        });\n      });\n    },\n\n    bind() {\n      window.addEventListener('focusin', this.onFocusin);\n    },\n\n    unbind() {\n      window.removeEventListener('focusin', this.onFocusin);\n    },\n\n    onClickOutside(e) {\n      this.$emit('click:outside', e);\n\n      if (this.persistent) {\n        this.noClickAnimation || this.animateClick();\n      } else {\n        this.isActive = false;\n      }\n    },\n\n    onKeydown(e) {\n      if (e.keyCode === keyCodes.esc && !this.getOpenDependents().length) {\n        if (!this.persistent) {\n          this.isActive = false;\n          const activator = this.getActivator();\n          this.$nextTick(() => activator && activator.focus());\n        } else if (!this.noClickAnimation) {\n          this.animateClick();\n        }\n      }\n\n      this.$emit('keydown', e);\n    },\n\n    // On focus change, wrap focus to stay inside the dialog\n    // https://github.com/vuetifyjs/vuetify/issues/6892\n    onFocusin(e) {\n      if (!e || !this.retainFocus) return;\n      const target = e.target;\n\n      if (!!target && // It isn't the document or the dialog body\n      ![document, this.$refs.content].includes(target) && // It isn't inside the dialog body\n      !this.$refs.content.contains(target) && // We're the topmost dialog\n      this.activeZIndex >= this.getMaxZIndex() && // It isn't inside a dependent element (like a menu)\n      !this.getOpenDependentElements().some(el => el.contains(target)) // So we must have focused something outside the dialog and its children\n      ) {\n        // Find and focus the first available element inside the dialog\n        const focusable = this.$refs.content.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        const el = [...focusable].find(el => !el.hasAttribute('disabled'));\n        el && el.focus();\n      }\n    },\n\n    genContent() {\n      return this.showLazyContent(() => [this.$createElement(VThemeProvider, {\n        props: {\n          root: true,\n          light: this.light,\n          dark: this.dark\n        }\n      }, [this.$createElement('div', {\n        class: this.contentClasses,\n        attrs: {\n          role: 'dialog',\n          tabindex: this.isActive ? 0 : undefined,\n          'aria-modal': this.hideOverlay ? undefined : 'true',\n          ...this.getScopeIdAttrs()\n        },\n        on: {\n          keydown: this.onKeydown\n        },\n        style: {\n          zIndex: this.activeZIndex\n        },\n        ref: 'content'\n      }, [this.genTransition()])])]);\n    },\n\n    genTransition() {\n      const content = this.genInnerContent();\n      if (!this.transition) return content;\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n          origin: this.origin,\n          appear: true\n        }\n      }, [content]);\n    },\n\n    genInnerContent() {\n      const data = {\n        class: this.classes,\n        ref: 'dialog',\n        directives: [{\n          name: 'click-outside',\n          value: {\n            handler: this.onClickOutside,\n            closeConditional: this.closeConditional,\n            include: this.getOpenDependentElements\n          }\n        }, {\n          name: 'show',\n          value: this.isActive\n        }],\n        style: {\n          transformOrigin: this.origin\n        }\n      };\n\n      if (!this.fullscreen) {\n        data.style = { ...data.style,\n          maxWidth: convertToUnit(this.maxWidth),\n          width: convertToUnit(this.width)\n        };\n      }\n\n      return this.$createElement('div', data, this.getContentSlot());\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-dialog__container',\n      class: {\n        'v-dialog__container--attached': this.attach === '' || this.attach === true || this.attach === 'attach'\n      }\n    }, [this.genActivator(), this.genContent()]);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VThemeProvider","Activatable","Dependent","Detachable","Overlayable","Returnable","Stackable","ClickOutside","mixins","removed","convertToUnit","keyCodes","baseMixins","extend","name","directives","props","dark","Boolean","disabled","fullscreen","light","maxWidth","String","Number","noClickAnimation","origin","type","default","persistent","retainFocus","scrollable","transition","width","data","activatedBy","animate","animateTimeout","stackMinZIndex","previousActiveElement","computed","classes","contentClass","trim","isActive","contentClasses","hasActivator","$slots","activator","$scopedSlots","watch","val","show","hideScroll","removeOverlay","unbind","focus","showScroll","genOverlay","created","$attrs","hasOwnProperty","beforeMount","$nextTick","isBooted","beforeDestroy","window","methods","animateClick","clearTimeout","setTimeout","closeConditional","e","target","_isDestroyed","$refs","content","contains","overlay","$el","activeZIndex","getMaxZIndex","document","documentElement","classList","add","options","call","hideOverlay","activeElement","bind","addEventListener","onFocusin","removeEventListener","onClickOutside","$emit","onKeydown","keyCode","esc","getOpenDependents","length","getActivator","includes","getOpenDependentElements","some","el","focusable","querySelectorAll","find","hasAttribute","genContent","showLazyContent","$createElement","root","class","attrs","role","tabindex","undefined","getScopeIdAttrs","on","keydown","style","zIndex","ref","genTransition","genInnerContent","appear","value","handler","include","transformOrigin","getContentSlot","render","h","staticClass","attach","genActivator"],"sourceRoot":"","sources":["../../../src/components/VDialog/VDialog.ts"],"sourcesContent":["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VThemeProvider } from '../VThemeProvider'\n\n// Mixins\nimport Activatable from '../../mixins/activatable'\nimport Dependent from '../../mixins/dependent'\nimport Detachable from '../../mixins/detachable'\nimport Overlayable from '../../mixins/overlayable'\nimport Returnable from '../../mixins/returnable'\nimport Stackable from '../../mixins/stackable'\n\n// Directives\nimport ClickOutside from '../../directives/click-outside'\n\n// Helpers\nimport mixins from '../../util/mixins'\nimport { removed } from '../../util/console'\nimport {\n  convertToUnit,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeData } from 'vue'\n\nconst baseMixins = mixins(\n  Dependent,\n  Detachable,\n  Overlayable,\n  Returnable,\n  Stackable,\n  Activatable,\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'v-dialog',\n\n  directives: { ClickOutside },\n\n  props: {\n    dark: Boolean,\n    disabled: Boolean,\n    fullscreen: Boolean,\n    light: Boolean,\n    maxWidth: [String, Number],\n    noClickAnimation: Boolean,\n    origin: {\n      type: String,\n      default: 'center center',\n    },\n    persistent: Boolean,\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n    transition: {\n      type: [String, Boolean],\n      default: 'dialog-transition',\n    },\n    width: [String, Number],\n  },\n\n  data () {\n    return {\n      activatedBy: null as EventTarget | null,\n      animate: false,\n      animateTimeout: -1,\n      stackMinZIndex: 200,\n      previousActiveElement: null as HTMLElement | null,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        [(`v-dialog ${this.contentClass}`).trim()]: true,\n        'v-dialog--active': this.isActive,\n        'v-dialog--persistent': this.persistent,\n        'v-dialog--fullscreen': this.fullscreen,\n        'v-dialog--scrollable': this.scrollable,\n        'v-dialog--animated': this.animate,\n      }\n    },\n    contentClasses (): object {\n      return {\n        'v-dialog__content': true,\n        'v-dialog__content--active': this.isActive,\n      }\n    },\n    hasActivator (): boolean {\n      return Boolean(\n        !!this.$slots.activator ||\n        !!this.$scopedSlots.activator\n      )\n    },\n  },\n\n  watch: {\n    isActive (val) {\n      if (val) {\n        this.show()\n        this.hideScroll()\n      } else {\n        this.removeOverlay()\n        this.unbind()\n        this.previousActiveElement?.focus()\n      }\n    },\n    fullscreen (val) {\n      if (!this.isActive) return\n\n      if (val) {\n        this.hideScroll()\n        this.removeOverlay(false)\n      } else {\n        this.showScroll()\n        this.genOverlay()\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('full-width')) {\n      removed('full-width', this)\n    }\n  },\n\n  beforeMount () {\n    this.$nextTick(() => {\n      this.isBooted = this.isActive\n      this.isActive && this.show()\n    })\n  },\n\n  beforeDestroy () {\n    if (typeof window !== 'undefined') this.unbind()\n  },\n\n  methods: {\n    animateClick () {\n      this.animate = false\n      // Needed for when clicking very fast\n      // outside of the dialog\n      this.$nextTick(() => {\n        this.animate = true\n        window.clearTimeout(this.animateTimeout)\n        this.animateTimeout = window.setTimeout(() => (this.animate = false), 150)\n      })\n    },\n    closeConditional (e: Event) {\n      const target = e.target as HTMLElement\n      // Ignore the click if the dialog is closed or destroyed,\n      // if it was on an element inside the content,\n      // if it was dragged onto the overlay (#6969),\n      // or if this isn't the topmost dialog (#9907)\n      return !(\n        this._isDestroyed ||\n        !this.isActive ||\n        this.$refs.content.contains(target) ||\n        (this.overlay && target && !this.overlay.$el.contains(target))\n      ) && this.activeZIndex >= this.getMaxZIndex()\n    },\n    hideScroll () {\n      if (this.fullscreen) {\n        document.documentElement.classList.add('overflow-y-hidden')\n      } else {\n        Overlayable.options.methods.hideScroll.call(this)\n      }\n    },\n    show () {\n      !this.fullscreen && !this.hideOverlay && this.genOverlay()\n      // Double nextTick to wait for lazy content to be generated\n      this.$nextTick(() => {\n        this.$nextTick(() => {\n          if (!this.$refs.content.contains(document.activeElement)) {\n            this.previousActiveElement = document.activeElement as HTMLElement\n            this.$refs.content.focus()\n          }\n          this.bind()\n        })\n      })\n    },\n    bind () {\n      window.addEventListener('focusin', this.onFocusin)\n    },\n    unbind () {\n      window.removeEventListener('focusin', this.onFocusin)\n    },\n    onClickOutside (e: Event) {\n      this.$emit('click:outside', e)\n\n      if (this.persistent) {\n        this.noClickAnimation || this.animateClick()\n      } else {\n        this.isActive = false\n      }\n    },\n    onKeydown (e: KeyboardEvent) {\n      if (e.keyCode === keyCodes.esc && !this.getOpenDependents().length) {\n        if (!this.persistent) {\n          this.isActive = false\n          const activator = this.getActivator()\n          this.$nextTick(() => activator && (activator as HTMLElement).focus())\n        } else if (!this.noClickAnimation) {\n          this.animateClick()\n        }\n      }\n      this.$emit('keydown', e)\n    },\n    // On focus change, wrap focus to stay inside the dialog\n    // https://github.com/vuetifyjs/vuetify/issues/6892\n    onFocusin (e: Event) {\n      if (!e || !this.retainFocus) return\n\n      const target = e.target as HTMLElement\n\n      if (\n        !!target &&\n        // It isn't the document or the dialog body\n        ![document, this.$refs.content].includes(target) &&\n        // It isn't inside the dialog body\n        !this.$refs.content.contains(target) &&\n        // We're the topmost dialog\n        this.activeZIndex >= this.getMaxZIndex() &&\n        // It isn't inside a dependent element (like a menu)\n        !this.getOpenDependentElements().some(el => el.contains(target))\n        // So we must have focused something outside the dialog and its children\n      ) {\n        // Find and focus the first available element inside the dialog\n        const focusable = this.$refs.content.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])')\n        const el = [...focusable].find(el => !el.hasAttribute('disabled')) as HTMLElement | undefined\n        el && el.focus()\n      }\n    },\n    genContent () {\n      return this.showLazyContent(() => [\n        this.$createElement(VThemeProvider, {\n          props: {\n            root: true,\n            light: this.light,\n            dark: this.dark,\n          },\n        }, [\n          this.$createElement('div', {\n            class: this.contentClasses,\n            attrs: {\n              role: 'dialog',\n              tabindex: this.isActive ? 0 : undefined,\n              'aria-modal': this.hideOverlay ? undefined : 'true',\n              ...this.getScopeIdAttrs(),\n            },\n            on: { keydown: this.onKeydown },\n            style: { zIndex: this.activeZIndex },\n            ref: 'content',\n          }, [this.genTransition()]),\n        ]),\n      ])\n    },\n    genTransition () {\n      const content = this.genInnerContent()\n\n      if (!this.transition) return content\n\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n          origin: this.origin,\n          appear: true,\n        },\n      }, [content])\n    },\n    genInnerContent () {\n      const data: VNodeData = {\n        class: this.classes,\n        ref: 'dialog',\n        directives: [\n          {\n            name: 'click-outside',\n            value: {\n              handler: this.onClickOutside,\n              closeConditional: this.closeConditional,\n              include: this.getOpenDependentElements,\n            },\n          },\n          { name: 'show', value: this.isActive },\n        ],\n        style: {\n          transformOrigin: this.origin,\n        },\n      }\n\n      if (!this.fullscreen) {\n        data.style = {\n          ...data.style as object,\n          maxWidth: convertToUnit(this.maxWidth),\n          width: convertToUnit(this.width),\n        }\n      }\n\n      return this.$createElement('div', data, this.getContentSlot())\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-dialog__container',\n      class: {\n        'v-dialog__container--attached':\n          this.attach === '' ||\n          this.attach === true ||\n          this.attach === 'attach',\n      },\n    }, [\n      this.genActivator(),\n      this.genContent(),\n    ])\n  },\n})\n"]},"metadata":{},"sourceType":"module"}