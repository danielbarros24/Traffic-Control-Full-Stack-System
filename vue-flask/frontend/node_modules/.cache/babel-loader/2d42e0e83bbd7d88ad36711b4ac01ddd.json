{"ast":null,"code":"import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\nexport class DoubleParkComponent extends Rete.Component {\n  constructor() {\n    super(\"Double-Park\");\n    this.data.component = Node;\n  }\n\n  async builder(node) {\n    const urlDesktop = \"127.0.0.1:5000\";\n    const urlRasp = \"192.168.1.216:8080\";\n    const responseZones = await fetch(`http://${urlRasp}/sensors`);\n    const sensors = await responseZones.json();\n    let all = [];\n\n    for (let x in sensors) {\n      let sensor = sensors[x];\n      let lanes = sensor.lanes;\n      let n = 1;\n      let aux = [];\n\n      while (lanes > 0) {\n        aux = [];\n        aux.push(sensor.name);\n        aux.push(n);\n        all.push(aux);\n        n++;\n        lanes--;\n      }\n    }\n\n    var out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n    return node.addControl(new SelectControl(this.editor, 'type1', all.map(value => ({\n      text: `${value[0]} - Lane ${value[1]}`,\n      value: `${value[0]}-${value[1]}`\n    })), \"Zone\")).addControl(new SelectControl(this.editor, 'type', [{\n      text: 'All',\n      value: 'ALL'\n    }, {\n      text: 'Car',\n      value: 'CAR'\n    }, {\n      text: 'Truck',\n      value: 'TRUCK'\n    }, {\n      text: 'Bike',\n      value: 'BIKE'\n    }], \"Vehicle Type\")).addOutput(out1);\n  }\n\n  worker(node, inputs, outputs) {\n    outputs['num'] = node.data.num;\n  }\n\n  toJsonLogic(node) {\n    const zone = node.data.type1;\n    const vehicleType = node.data.type;\n    return {\n      \"doublePark\": [zone, vehicleType]\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/variables/DoubleParkComponent.js"],"names":["Rete","Socket","SelectControl","Node","DoubleParkComponent","Component","constructor","data","component","builder","node","urlDesktop","urlRasp","responseZones","fetch","sensors","json","all","x","sensor","lanes","n","aux","push","name","out1","Output","boolean","addControl","editor","map","value","text","addOutput","worker","inputs","outputs","num","toJsonLogic","zone","type1","vehicleType","type"],"mappings":"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","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\n\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\n\nexport class DoubleParkComponent extends Rete.Component {\n    constructor() {\n        super(\"Double-Park\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n\n        const urlDesktop = \"127.0.0.1:5000\"\n        const urlRasp = \"192.168.1.216:8080\"\n        const responseZones = await fetch(`http://${urlRasp}/sensors`);\n        const sensors = await responseZones.json();\n\n        let all = []\n\n\n        for (let x in sensors) {\n\n            let sensor = sensors[x]\n            let lanes = sensor.lanes\n\n            let n = 1\n\n            let aux = []\n\n            while (lanes > 0) {\n\n                aux = [];\n                aux.push(sensor.name);\n                aux.push(n);\n\n                all.push(aux);\n\n                n ++;\n                lanes --;\n\n            }\n        } \n        \n\n        var out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n        return node\n\n            .addControl(new SelectControl(this.editor, 'type1', all.map((value) => ({\n                text: `${value[0]} - Lane ${value[1]}`, value: `${value[0]}-${value[1]}`,\n            })), \"Zone\"))\n            .addControl(new SelectControl(this.editor, 'type', [\n                { text: 'All', value: 'ALL' },\n                { text: 'Car', value: 'CAR' },\n                { text: 'Truck', value: 'TRUCK' },\n                { text: 'Bike', value: 'BIKE' }\n            ], \"Vehicle Type\"))\n            .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.num;\n    }\n\n    toJsonLogic(node) {\n        const zone = node.data.type1;\n        const vehicleType = node.data.type;\n\n        return {\n            \"doublePark\": [zone, vehicleType]\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}