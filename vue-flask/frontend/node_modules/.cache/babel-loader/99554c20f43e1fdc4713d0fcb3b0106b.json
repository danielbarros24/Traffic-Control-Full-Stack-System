{"ast":null,"code":"// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable';\nimport { provide as RegistrableProvide } from '../../mixins/registrable'; // Utilities\n\nimport { getSlot } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nexport default mixins(GroupableFactory('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'), RegistrableProvide('expansionPanel', true)\n/* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n  props: {\n    disabled: Boolean,\n    readonly: Boolean\n  },\n\n  data() {\n    return {\n      content: null,\n      header: null,\n      nextIsActive: false\n    };\n  },\n\n  computed: {\n    classes() {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses\n      };\n    },\n\n    isDisabled() {\n      return this.expansionPanels.disabled || this.disabled;\n    },\n\n    isReadonly() {\n      return this.expansionPanels.readonly || this.readonly;\n    }\n\n  },\n  methods: {\n    registerContent(vm) {\n      this.content = vm;\n    },\n\n    unregisterContent() {\n      this.content = null;\n    },\n\n    registerHeader(vm) {\n      this.header = vm;\n      vm.$on('click', this.onClick);\n    },\n\n    unregisterHeader() {\n      this.header = null;\n    },\n\n    onClick(e) {\n      if (e.detail) this.header.$el.blur();\n      this.$emit('click', e);\n      this.isReadonly || this.isDisabled || this.toggle();\n    },\n\n    toggle() {\n      this.$nextTick(() => this.$emit('change'));\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive)\n      }\n    }, getSlot(this));\n  }\n\n});","map":{"version":3,"mappings":"AAKA;AACA,SAASA,OAAO,IAAIC,gBAApB,QAA4C,wBAA5C;AACA,SAASC,OAAO,IAAIC,kBAApB,QAA8C,0BAA9C,C,CAEA;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAQA,eAAeA,MAAM,CACnBJ,gBAAgB,CAA6C,iBAA7C,EAAgE,mBAAhE,EAAqF,oBAArF,CADG,EAEnBE,kBAAkB,CAAC,gBAAD,EAAmB,IAAnB;AAClB;AAHmB,CAAN,CAIbG,MAJa,CAIN;AACPC,MAAI,EAAE,mBADC;AAGPC,OAAK,EAAE;AACLC,YAAQ,EAAEC,OADL;AAELC,YAAQ,EAAED;AAFL,GAHA;;AAQPE,MAAI;AACF,WAAO;AACLC,aAAO,EAAE,IADJ;AAELC,YAAM,EAAE,IAFH;AAGLC,kBAAY,EAAE;AAHT,KAAP;AATK;;AAgBPC,UAAQ,EAAE;AACRC,WAAO;AACL,aAAO;AACL,qCAA6B,KAAKC,QAD7B;AAEL,0CAAkC,KAAKH,YAFlC;AAGL,uCAA+B,KAAKI,UAH/B;AAIL,WAAG,KAAKC;AAJH,OAAP;AAFM;;AASRD,cAAU;AACR,aAAO,KAAKE,eAAL,CAAqBZ,QAArB,IAAiC,KAAKA,QAA7C;AAVM;;AAYRa,cAAU;AACR,aAAO,KAAKD,eAAL,CAAqBV,QAArB,IAAiC,KAAKA,QAA7C;AACD;;AAdO,GAhBH;AAiCPY,SAAO,EAAE;AACPC,mBAAe,CAAEC,EAAF,EAAoC;AACjD,WAAKZ,OAAL,GAAeY,EAAf;AAFK;;AAIPC,qBAAiB;AACf,WAAKb,OAAL,GAAe,IAAf;AALK;;AAOPc,kBAAc,CAAEF,EAAF,EAAmC;AAC/C,WAAKX,MAAL,GAAcW,EAAd;AACAA,QAAE,CAACG,GAAH,CAAO,OAAP,EAAgB,KAAKC,OAArB;AATK;;AAWPC,oBAAgB;AACd,WAAKhB,MAAL,GAAc,IAAd;AAZK;;AAcPe,WAAO,CAAEE,CAAF,EAAe;AACpB,UAAIA,CAAC,CAACC,MAAN,EAAc,KAAKlB,MAAL,CAAamB,GAAb,CAAiBC,IAAjB;AAEd,WAAKC,KAAL,CAAW,OAAX,EAAoBJ,CAApB;AAEA,WAAKT,UAAL,IAAmB,KAAKH,UAAxB,IAAsC,KAAKiB,MAAL,EAAtC;AAnBK;;AAqBPA,UAAM;AACJ,WAAKC,SAAL,CAAe,MAAM,KAAKF,KAAL,CAAW,QAAX,CAArB;AACD;;AAvBM,GAjCF;;AA2DPG,QAAM,CAAEC,CAAF,EAAG;AACP,WAAOA,CAAC,CAAC,KAAD,EAAQ;AACdC,iBAAW,EAAE,mBADC;AAEdC,WAAK,EAAE,KAAKxB,OAFE;AAGdyB,WAAK,EAAE;AACL,yBAAiBC,MAAM,CAAC,KAAKzB,QAAN;AADlB;AAHO,KAAR,EAMLd,OAAO,CAAC,IAAD,CANF,CAAR;AAOD;;AAnEM,CAJM,CAAf","names":["factory","GroupableFactory","provide","RegistrableProvide","getSlot","mixins","extend","name","props","disabled","Boolean","readonly","data","content","header","nextIsActive","computed","classes","isActive","isDisabled","groupClasses","expansionPanels","isReadonly","methods","registerContent","vm","unregisterContent","registerHeader","$on","onClick","unregisterHeader","e","detail","$el","blur","$emit","toggle","$nextTick","render","h","staticClass","class","attrs","String"],"sourceRoot":"","sources":["../../../src/components/VExpansionPanel/VExpansionPanel.ts"],"sourcesContent":["// Components\nimport VExpansionPanels from './VExpansionPanels'\nimport VExpansionPanelHeader from './VExpansionPanelHeader'\nimport VExpansionPanelContent from './VExpansionPanelContent'\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VExpansionPanelHeaderInstance = InstanceType<typeof VExpansionPanelHeader>\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\nexport default mixins(\n  GroupableFactory<'expansionPanels', typeof VExpansionPanels>('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'),\n  RegistrableProvide('expansionPanel', true)\n  /* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n  },\n\n  data () {\n    return {\n      content: null as VExpansionPanelContentInstance | null,\n      header: null as VExpansionPanelHeaderInstance | null,\n      nextIsActive: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses,\n      }\n    },\n    isDisabled (): boolean {\n      return this.expansionPanels.disabled || this.disabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanels.readonly || this.readonly\n    },\n  },\n\n  methods: {\n    registerContent (vm: VExpansionPanelContentInstance) {\n      this.content = vm\n    },\n    unregisterContent () {\n      this.content = null\n    },\n    registerHeader (vm: VExpansionPanelHeaderInstance) {\n      this.header = vm\n      vm.$on('click', this.onClick)\n    },\n    unregisterHeader () {\n      this.header = null\n    },\n    onClick (e: MouseEvent) {\n      if (e.detail) this.header!.$el.blur()\n\n      this.$emit('click', e)\n\n      this.isReadonly || this.isDisabled || this.toggle()\n    },\n    toggle () {\n      this.$nextTick(() => this.$emit('change'))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive),\n      },\n    }, getSlot(this))\n  },\n})\n"]},"metadata":{},"sourceType":"module"}