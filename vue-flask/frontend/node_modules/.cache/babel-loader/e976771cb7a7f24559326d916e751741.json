{"ast":null,"code":"import Vue from 'vue';\nexport default Vue.extend({\n  name: 'mouse',\n  methods: {\n    getDefaultMouseEventHandlers(suffix, getEvent) {\n      return this.getMouseEventHandlers({\n        ['click' + suffix]: {\n          event: 'click'\n        },\n        ['contextmenu' + suffix]: {\n          event: 'contextmenu',\n          prevent: true,\n          result: false\n        },\n        ['mousedown' + suffix]: {\n          event: 'mousedown'\n        },\n        ['mousemove' + suffix]: {\n          event: 'mousemove'\n        },\n        ['mouseup' + suffix]: {\n          event: 'mouseup'\n        },\n        ['mouseenter' + suffix]: {\n          event: 'mouseenter'\n        },\n        ['mouseleave' + suffix]: {\n          event: 'mouseleave'\n        },\n        ['touchstart' + suffix]: {\n          event: 'touchstart'\n        },\n        ['touchmove' + suffix]: {\n          event: 'touchmove'\n        },\n        ['touchend' + suffix]: {\n          event: 'touchend'\n        }\n      }, getEvent);\n    },\n\n    getMouseEventHandlers(events, getEvent) {\n      const on = {};\n\n      for (const event in events) {\n        const eventOptions = events[event];\n        if (!this.$listeners[event]) continue; // TODO somehow pull in modifiers\n\n        const prefix = eventOptions.passive ? '&' : (eventOptions.once ? '~' : '') + (eventOptions.capture ? '!' : '');\n        const key = prefix + eventOptions.event;\n\n        const handler = e => {\n          const mouseEvent = e;\n\n          if (eventOptions.button === undefined || mouseEvent.buttons > 0 && mouseEvent.button === eventOptions.button) {\n            if (eventOptions.prevent) {\n              e.preventDefault();\n            }\n\n            if (eventOptions.stop) {\n              e.stopPropagation();\n            } // Due to TouchEvent target always returns the element that is first placed\n            // Even if touch point has since moved outside the interactive area of that element\n            // Ref: https://developer.mozilla.org/en-US/docs/Web/API/Touch/target\n            // This block of code aims to make sure touchEvent is always dispatched from the element that is being pointed at\n\n\n            if (e && 'touches' in e) {\n              var _e$currentTarget, _e$target;\n\n              const classSeparator = ' ';\n              const eventTargetClasses = (_e$currentTarget = e.currentTarget) == null ? void 0 : _e$currentTarget.className.split(classSeparator);\n              const currentTargets = document.elementsFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY); // Get \"the same kind\" current hovering target by checking\n              // If element has the same class of initial touch start element (which has touch event listener registered)\n\n              const currentTarget = currentTargets.find(t => t.className.split(classSeparator).some(c => eventTargetClasses.includes(c)));\n\n              if (currentTarget && !((_e$target = e.target) != null && _e$target.isSameNode(currentTarget))) {\n                currentTarget.dispatchEvent(new TouchEvent(e.type, {\n                  changedTouches: e.changedTouches,\n                  targetTouches: e.targetTouches,\n                  touches: e.touches\n                }));\n                return;\n              }\n            }\n\n            this.$emit(event, getEvent(e), e);\n          }\n\n          return eventOptions.result;\n        };\n\n        if (key in on) {\n          /* istanbul ignore next */\n          if (Array.isArray(on[key])) {\n            on[key].push(handler);\n          } else {\n            on[key] = [on[key], handler];\n          }\n        } else {\n          on[key] = handler;\n        }\n      }\n\n      return on;\n    }\n\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAqBA,eAAeA,GAAG,CAACC,MAAJ,CAAW;AACxBC,MAAI,EAAE,OADkB;AAGxBC,SAAO,EAAE;AACPC,gCAA4B,CAAEC,MAAF,EAAkBC,QAAlB,EAAwC;AAClE,aAAO,KAAKC,qBAAL,CAA2B;AAChC,SAAC,UAAUF,MAAX,GAAoB;AAAEG,eAAK,EAAE;AAAT,SADY;AAEhC,SAAC,gBAAgBH,MAAjB,GAA0B;AAAEG,eAAK,EAAE,aAAT;AAAwBC,iBAAO,EAAE,IAAjC;AAAuCC,gBAAM,EAAE;AAA/C,SAFM;AAGhC,SAAC,cAAcL,MAAf,GAAwB;AAAEG,eAAK,EAAE;AAAT,SAHQ;AAIhC,SAAC,cAAcH,MAAf,GAAwB;AAAEG,eAAK,EAAE;AAAT,SAJQ;AAKhC,SAAC,YAAYH,MAAb,GAAsB;AAAEG,eAAK,EAAE;AAAT,SALU;AAMhC,SAAC,eAAeH,MAAhB,GAAyB;AAAEG,eAAK,EAAE;AAAT,SANO;AAOhC,SAAC,eAAeH,MAAhB,GAAyB;AAAEG,eAAK,EAAE;AAAT,SAPO;AAQhC,SAAC,eAAeH,MAAhB,GAAyB;AAAEG,eAAK,EAAE;AAAT,SARO;AAShC,SAAC,cAAcH,MAAf,GAAwB;AAAEG,eAAK,EAAE;AAAT,SATQ;AAUhC,SAAC,aAAaH,MAAd,GAAuB;AAAEG,eAAK,EAAE;AAAT;AAVS,OAA3B,EAWJF,QAXI,CAAP;AAFK;;AAePC,yBAAqB,CAAEI,MAAF,EAAuBL,QAAvB,EAA6C;AAChE,YAAMM,EAAE,GAAmB,EAA3B;;AAEA,WAAK,MAAMJ,KAAX,IAAoBG,MAApB,EAA4B;AAC1B,cAAME,YAAY,GAAGF,MAAM,CAACH,KAAD,CAA3B;AAEA,YAAI,CAAC,KAAKM,UAAL,CAAgBN,KAAhB,CAAL,EAA6B,SAHH,CAK1B;;AAEA,cAAMO,MAAM,GAAGF,YAAY,CAACG,OAAb,GAAuB,GAAvB,GAA8B,CAACH,YAAY,CAACI,IAAb,GAAoB,GAApB,GAA0B,EAA3B,KAAkCJ,YAAY,CAACK,OAAb,GAAuB,GAAvB,GAA6B,EAA/D,CAA7C;AACA,cAAMC,GAAG,GAAGJ,MAAM,GAAGF,YAAY,CAACL,KAAlC;;AAEA,cAAMY,OAAO,GAAiBC,CAAC,IAAG;AAChC,gBAAMC,UAAU,GAAeD,CAA/B;;AACA,cAAIR,YAAY,CAACU,MAAb,KAAwBC,SAAxB,IAAsCF,UAAU,CAACG,OAAX,GAAqB,CAArB,IAA0BH,UAAU,CAACC,MAAX,KAAsBV,YAAY,CAACU,MAAvG,EAAgH;AAC9G,gBAAIV,YAAY,CAACJ,OAAjB,EAA0B;AACxBY,eAAC,CAACK,cAAF;AACD;;AACD,gBAAIb,YAAY,CAACc,IAAjB,EAAuB;AACrBN,eAAC,CAACO,eAAF;AAL4G,cAQ9G;AACA;AACA;AACA;;;AACA,gBAAIP,CAAC,IAAI,aAAaA,CAAtB,EAAyB;AAAA;;AACvB,oBAAMQ,cAAc,GAAG,GAAvB;AAEA,oBAAMC,kBAAkB,uBAAIT,CAAC,CAACU,aAAN,qBAAIC,iBAAiCC,SAAjC,CAA2CC,KAA3C,CAAiDL,cAAjD,CAA5B;AACA,oBAAMM,cAAc,GAAGC,QAAQ,CAACC,iBAAT,CAA2BhB,CAAC,CAACiB,cAAF,CAAiB,CAAjB,EAAoBC,OAA/C,EAAwDlB,CAAC,CAACiB,cAAF,CAAiB,CAAjB,EAAoBE,OAA5E,CAAvB,CAJuB,CAMvB;AACA;;AACA,oBAAMT,aAAa,GAAGI,cAAc,CAACM,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAACT,SAAF,CAAYC,KAAZ,CAAkBL,cAAlB,EAAkCc,IAAlC,CAAuCC,CAAC,IAAId,kBAAkB,CAACe,QAAnB,CAA4BD,CAA5B,CAA5C,CAAzB,CAAtB;;AAEA,kBAAIb,aAAa,IACf,eAAEV,CAAC,CAACyB,MAAJ,aAAEC,UAA0BC,UAA1B,CAAqCjB,aAArC,CAAF,CADF,EAEE;AACAA,6BAAa,CAACkB,aAAd,CAA4B,IAAIC,UAAJ,CAAe7B,CAAC,CAAC8B,IAAjB,EAAuB;AACjDb,gCAAc,EAAEjB,CAAC,CAACiB,cAD+B;AAEjDc,+BAAa,EAAE/B,CAAC,CAAC+B,aAFgC;AAGjDC,yBAAO,EAAEhC,CAAC,CAACgC;AAHsC,iBAAvB,CAA5B;AAKA;AACD;AACF;;AAED,iBAAKC,KAAL,CAAW9C,KAAX,EAAkBF,QAAQ,CAACe,CAAD,CAA1B,EAA+BA,CAA/B;AACD;;AAED,iBAAOR,YAAY,CAACH,MAApB;AAvCF;;AA0CA,YAAIS,GAAG,IAAIP,EAAX,EAAe;AACb;AACA,cAAI2C,KAAK,CAACC,OAAN,CAAc5C,EAAE,CAACO,GAAD,CAAhB,CAAJ,EAA4B;AACzBP,cAAE,CAACO,GAAD,CAAF,CAA2BsC,IAA3B,CAAgCrC,OAAhC;AADH,iBAEO;AACLR,cAAE,CAACO,GAAD,CAAF,GAAU,CAACP,EAAE,CAACO,GAAD,CAAH,EAAUC,OAAV,CAAV;AACD;AANH,eAOO;AACLR,YAAE,CAACO,GAAD,CAAF,GAAUC,OAAV;AACD;AACF;;AAED,aAAOR,EAAP;AACD;;AAnFM;AAHe,CAAX,CAAf","names":["Vue","extend","name","methods","getDefaultMouseEventHandlers","suffix","getEvent","getMouseEventHandlers","event","prevent","result","events","on","eventOptions","$listeners","prefix","passive","once","capture","key","handler","e","mouseEvent","button","undefined","buttons","preventDefault","stop","stopPropagation","classSeparator","eventTargetClasses","currentTarget","_e$currentTarget","className","split","currentTargets","document","elementsFromPoint","changedTouches","clientX","clientY","find","t","some","c","includes","target","_e$target","isSameNode","dispatchEvent","TouchEvent","type","targetTouches","touches","$emit","Array","isArray","push"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/mixins/mouse.ts"],"sourcesContent":["import Vue from 'vue'\n\nexport type MouseHandler = (e: MouseEvent | TouchEvent) => any\n\nexport type MouseEvents = {\n  [event: string]: {\n    event: string\n    passive?: boolean\n    capture?: boolean\n    once?: boolean\n    stop?: boolean\n    prevent?: boolean\n    button?: number\n    result?: any\n  }\n}\n\nexport type MouseEventsMap = {\n  [event: string]: MouseHandler | MouseHandler[]\n}\n\nexport default Vue.extend({\n  name: 'mouse',\n\n  methods: {\n    getDefaultMouseEventHandlers (suffix: string, getEvent: MouseHandler): MouseEventsMap {\n      return this.getMouseEventHandlers({\n        ['click' + suffix]: { event: 'click' },\n        ['contextmenu' + suffix]: { event: 'contextmenu', prevent: true, result: false },\n        ['mousedown' + suffix]: { event: 'mousedown' },\n        ['mousemove' + suffix]: { event: 'mousemove' },\n        ['mouseup' + suffix]: { event: 'mouseup' },\n        ['mouseenter' + suffix]: { event: 'mouseenter' },\n        ['mouseleave' + suffix]: { event: 'mouseleave' },\n        ['touchstart' + suffix]: { event: 'touchstart' },\n        ['touchmove' + suffix]: { event: 'touchmove' },\n        ['touchend' + suffix]: { event: 'touchend' },\n      }, getEvent)\n    },\n    getMouseEventHandlers (events: MouseEvents, getEvent: MouseHandler): MouseEventsMap {\n      const on: MouseEventsMap = {}\n\n      for (const event in events) {\n        const eventOptions = events[event]\n\n        if (!this.$listeners[event]) continue\n\n        // TODO somehow pull in modifiers\n\n        const prefix = eventOptions.passive ? '&' : ((eventOptions.once ? '~' : '') + (eventOptions.capture ? '!' : ''))\n        const key = prefix + eventOptions.event\n\n        const handler: MouseHandler = e => {\n          const mouseEvent: MouseEvent = e as MouseEvent\n          if (eventOptions.button === undefined || (mouseEvent.buttons > 0 && mouseEvent.button === eventOptions.button)) {\n            if (eventOptions.prevent) {\n              e.preventDefault()\n            }\n            if (eventOptions.stop) {\n              e.stopPropagation()\n            }\n\n            // Due to TouchEvent target always returns the element that is first placed\n            // Even if touch point has since moved outside the interactive area of that element\n            // Ref: https://developer.mozilla.org/en-US/docs/Web/API/Touch/target\n            // This block of code aims to make sure touchEvent is always dispatched from the element that is being pointed at\n            if (e && 'touches' in e) {\n              const classSeparator = ' '\n\n              const eventTargetClasses = (e.currentTarget as HTMLElement)?.className.split(classSeparator)\n              const currentTargets = document.elementsFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY)\n\n              // Get \"the same kind\" current hovering target by checking\n              // If element has the same class of initial touch start element (which has touch event listener registered)\n              const currentTarget = currentTargets.find(t => t.className.split(classSeparator).some(c => eventTargetClasses.includes(c)))\n\n              if (currentTarget &&\n                !(e.target as HTMLElement)?.isSameNode(currentTarget)\n              ) {\n                currentTarget.dispatchEvent(new TouchEvent(e.type, {\n                  changedTouches: e.changedTouches as unknown as Touch[],\n                  targetTouches: e.targetTouches as unknown as Touch[],\n                  touches: e.touches as unknown as Touch[],\n                }))\n                return\n              }\n            }\n\n            this.$emit(event, getEvent(e), e)\n          }\n\n          return eventOptions.result\n        }\n\n        if (key in on) {\n          /* istanbul ignore next */\n          if (Array.isArray(on[key])) {\n            (on[key] as MouseHandler[]).push(handler)\n          } else {\n            on[key] = [on[key], handler] as MouseHandler[]\n          }\n        } else {\n          on[key] = handler\n        }\n      }\n\n      return on\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}