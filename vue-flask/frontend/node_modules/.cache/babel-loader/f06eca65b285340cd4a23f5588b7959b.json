{"ast":null,"code":"import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\nexport class CrowdDetectionComponent extends Rete.Component {\n  constructor() {\n    super(\"Crowd Detection\");\n    this.data.component = Node;\n  }\n\n  async builder(node) {\n    const urlDesktop = \"127.0.0.1:5000\";\n    const urlRasp = \"192.168.1.216:8080\";\n    const responseZones = await fetch(`http://${urlDesktop}/sensors`);\n    const sensors = await responseZones.json();\n    const all = [];\n\n    for (const x in sensors) {\n      const sensor = sensors[x];\n      const lanes = sensor.lanes;\n      all.push(sensor.name);\n    }\n\n    var out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n    return node.addControl(new SelectControl(this.editor, 'type1', all.map(value => ({\n      text: `${value}`,\n      value: `${value}`\n    })), \"Zone\")).addOutput(out1);\n  }\n\n  worker(node, inputs, outputs) {\n    outputs['num'] = node.data.num;\n  }\n\n  toJsonLogic(node) {\n    const zone = node.data.type1;\n    return {\n      \"crowdDetection\": zone\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/variables/CrowdDetectionComponent.js"],"names":["Rete","Socket","SelectControl","Node","CrowdDetectionComponent","Component","constructor","data","component","builder","node","urlDesktop","urlRasp","responseZones","fetch","sensors","json","all","x","sensor","lanes","push","name","out1","Output","boolean","addControl","editor","map","value","text","addOutput","worker","inputs","outputs","num","toJsonLogic","zone","type1"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AAEA,SAASC,aAAT,QAA8B,oDAA9B;AACA,OAAOC,IAAP,MAAiB,wEAAjB;AAEA,OAAO,MAAMC,uBAAN,SAAsCJ,IAAI,CAACK,SAA3C,CAAqD;AACxDC,EAAAA,WAAW,GAAE;AACT,UAAM,iBAAN;AACA,SAAKC,IAAL,CAAUC,SAAV,GAAsBL,IAAtB;AACH;;AAEY,QAAPM,OAAO,CAACC,IAAD,EAAO;AAEhB,UAAMC,UAAU,GAAG,gBAAnB;AACA,UAAMC,OAAO,GAAG,oBAAhB;AAEA,UAAMC,aAAa,GAAG,MAAMC,KAAK,CAAE,UAASH,UAAW,UAAtB,CAAjC;AACA,UAAMI,OAAO,GAAG,MAAMF,aAAa,CAACG,IAAd,EAAtB;AAEA,UAAMC,GAAG,GAAG,EAAZ;;AAGA,SAAK,MAAMC,CAAX,IAAgBH,OAAhB,EAAyB;AAErB,YAAMI,MAAM,GAAGJ,OAAO,CAACG,CAAD,CAAtB;AACA,YAAME,KAAK,GAAGD,MAAM,CAACC,KAArB;AAEAH,MAAAA,GAAG,CAACI,IAAJ,CAASF,MAAM,CAACG,IAAhB;AAEH;;AAED,QAAIC,IAAI,GAAG,IAAIvB,IAAI,CAACwB,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8BvB,MAAM,CAACwB,OAArC,CAAX;AACA,WAAOf,IAAI,CAENgB,UAFE,CAES,IAAIxB,aAAJ,CAAkB,KAAKyB,MAAvB,EAA+B,OAA/B,EAAwCV,GAAG,CAACW,GAAJ,CAASC,KAAD,KAAY;AACxEC,MAAAA,IAAI,EAAG,GAAED,KAAM,EADyD;AACtDA,MAAAA,KAAK,EAAG,GAAEA,KAAM;AADsC,KAAZ,CAAR,CAAxC,EAET,MAFS,CAFT,EAKJE,SALI,CAKMR,IALN,CAAP;AAMH;;AAEDS,EAAAA,MAAM,CAACtB,IAAD,EAAOuB,MAAP,EAAeC,OAAf,EAAwB;AAC1BA,IAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBxB,IAAI,CAACH,IAAL,CAAU4B,GAA3B;AACH;;AAEDC,EAAAA,WAAW,CAAC1B,IAAD,EAAO;AACd,UAAM2B,IAAI,GAAG3B,IAAI,CAACH,IAAL,CAAU+B,KAAvB;AAEA,WAAO;AACH,wBAAkBD;AADf,KAAP;AAGH;;AA7CuD","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\n\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\n\nexport class CrowdDetectionComponent extends Rete.Component {\n    constructor(){\n        super(\"Crowd Detection\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n\n        const urlDesktop = \"127.0.0.1:5000\"\n        const urlRasp = \"192.168.1.216:8080\"\n        \n        const responseZones = await fetch(`http://${urlDesktop}/sensors`);\n        const sensors = await responseZones.json();\n\n        const all = []\n\n\n        for (const x in sensors) {\n\n            const sensor = sensors[x]\n            const lanes = sensor.lanes\n\n            all.push(sensor.name);\n            \n        }\n\n        var out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n        return node\n\n            .addControl(new SelectControl(this.editor, 'type1', all.map((value) => ({\n            text: `${value}`, value: `${value}`,\n          })), \"Zone\"))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.num;\n    }\n\n    toJsonLogic(node) {\n        const zone = node.data.type1;\n\n        return {\n            \"crowdDetection\": zone\n        }  \n    }\n}"]},"metadata":{},"sourceType":"module"}