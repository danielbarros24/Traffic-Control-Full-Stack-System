{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex'; // imports of AJAX functions will go here\n\nimport { authenticate } from '@/api';\nimport { isValidJwt, EventBus } from '@/utils';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    snackbars: [],\n    surveys: [],\n    currentSurvey: {},\n    user: {},\n    jwt: ''\n  },\n  mutations: {\n    SET_SNACKBAR(state, snackbar) {\n      state.snackbars = state.snackbars.concat(snackbar);\n    },\n\n    setUserData(state, payload) {\n      console.log('setUserData payload = ', payload);\n      state.userData = payload.userData;\n    },\n\n    setJwtToken(state, payload) {\n      console.log('setJwtToken payload = ', payload);\n      localStorage.token = payload.jwt.token;\n      state.jwt = payload.jwt;\n    }\n\n  },\n  actions: {\n    setSnackbar({\n      commit\n    }, snackbar) {\n      snackbar.showing = true;\n      snackbar.color = snackbar.color || 'primary';\n      commit('SET_SNACKBAR', snackbar);\n    },\n\n    login(context, userData) {\n      context.commit('setUserData', {\n        userData\n      });\n      return authenticate(userData).then(response => context.commit('setJwtToken', {\n        jwt: response.data\n      })).catch(error => {\n        console.log('Error Authenticating: ', error);\n        EventBus.emit('failedAuthentication', error);\n      });\n    }\n\n  },\n  getters: {\n    // reusable data accessors\n    isAuthenticated(state) {\n      return isValidJwt(state.jwt.token);\n    }\n\n  },\n  modules: {}\n});","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/store/index.js"],"names":["Vue","Vuex","authenticate","isValidJwt","EventBus","use","Store","state","snackbars","surveys","currentSurvey","user","jwt","mutations","SET_SNACKBAR","snackbar","concat","setUserData","payload","console","log","userData","setJwtToken","localStorage","token","actions","setSnackbar","commit","showing","color","login","context","then","response","data","catch","error","emit","getters","isAuthenticated","modules"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;;AACA,SAASC,YAAT,QAA6B,OAA7B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,SAArC;AAGAJ,GAAG,CAACK,GAAJ,CAAQJ,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACK,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,EADN;AAELC,IAAAA,OAAO,EAAE,EAFJ;AAGLC,IAAAA,aAAa,EAAE,EAHV;AAILC,IAAAA,IAAI,EAAE,EAJD;AAKLC,IAAAA,GAAG,EAAE;AALA,GADqB;AAQ5BC,EAAAA,SAAS,EAAE;AAETC,IAAAA,YAAY,CAACP,KAAD,EAAQQ,QAAR,EAAkB;AAC5BR,MAAAA,KAAK,CAACC,SAAN,GAAiBD,KAAK,CAACC,SAAN,CAAgBQ,MAAhB,CAAuBD,QAAvB,CAAjB;AACD,KAJQ;;AAKTE,IAAAA,WAAW,CAAEV,KAAF,EAASW,OAAT,EAAkB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,OAAtC;AACAX,MAAAA,KAAK,CAACc,QAAN,GAAiBH,OAAO,CAACG,QAAzB;AACD,KARQ;;AASTC,IAAAA,WAAW,CAAEf,KAAF,EAASW,OAAT,EAAkB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,OAAtC;AACAK,MAAAA,YAAY,CAACC,KAAb,GAAqBN,OAAO,CAACN,GAAR,CAAYY,KAAjC;AACAjB,MAAAA,KAAK,CAACK,GAAN,GAAYM,OAAO,CAACN,GAApB;AACD;;AAbQ,GARiB;AAuB5Ba,EAAAA,OAAO,EAAE;AACPC,IAAAA,WAAW,CAAC;AAACC,MAAAA;AAAD,KAAD,EAAWZ,QAAX,EAAqB;AAC9BA,MAAAA,QAAQ,CAACa,OAAT,GAAmB,IAAnB;AACAb,MAAAA,QAAQ,CAACc,KAAT,GAAiBd,QAAQ,CAACc,KAAT,IAAkB,SAAnC;AACAF,MAAAA,MAAM,CAAE,cAAF,EAAkBZ,QAAlB,CAAN;AACD,KALM;;AAMPe,IAAAA,KAAK,CAAEC,OAAF,EAAWV,QAAX,EAAqB;AACxBU,MAAAA,OAAO,CAACJ,MAAR,CAAe,aAAf,EAA8B;AAAEN,QAAAA;AAAF,OAA9B;AACA,aAAOnB,YAAY,CAACmB,QAAD,CAAZ,CACJW,IADI,CACCC,QAAQ,IAAIF,OAAO,CAACJ,MAAR,CAAe,aAAf,EAA8B;AAAEf,QAAAA,GAAG,EAAEqB,QAAQ,CAACC;AAAhB,OAA9B,CADb,EAEJC,KAFI,CAEEC,KAAK,IAAI;AACdjB,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCgB,KAAtC;AACAhC,QAAAA,QAAQ,CAACiC,IAAT,CAAc,sBAAd,EAAsCD,KAAtC;AACD,OALI,CAAP;AAMD;;AAdM,GAvBmB;AAuC5BE,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,eAAe,CAAEhC,KAAF,EAAS;AACtB,aAAOJ,UAAU,CAACI,KAAK,CAACK,GAAN,CAAUY,KAAX,CAAjB;AACD;;AAJM,GAvCmB;AA6C5BgB,EAAAA,OAAO,EAAE;AA7CmB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\n// imports of AJAX functions will go here\nimport { authenticate } from '@/api'  \nimport { isValidJwt, EventBus } from '@/utils'\n\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    snackbars: [],\n    surveys: [],\n    currentSurvey: {},\n    user: {},\n    jwt: ''\n  },\n  mutations: {\n\n    SET_SNACKBAR(state, snackbar) {\n      state.snackbars= state.snackbars.concat(snackbar)\n    },\n    setUserData (state, payload) {\n      console.log('setUserData payload = ', payload)\n      state.userData = payload.userData\n    },\n    setJwtToken (state, payload) {\n      console.log('setJwtToken payload = ', payload)\n      localStorage.token = payload.jwt.token\n      state.jwt = payload.jwt\n    }\n  },\n  actions: {\n    setSnackbar({commit}, snackbar) {\n      snackbar.showing = true;\n      snackbar.color = snackbar.color || 'primary';\n      commit ('SET_SNACKBAR', snackbar);\n    },\n    login (context, userData) {\n      context.commit('setUserData', { userData })\n      return authenticate(userData)\n        .then(response => context.commit('setJwtToken', { jwt: response.data }))\n        .catch(error => {\n          console.log('Error Authenticating: ', error)\n          EventBus.emit('failedAuthentication', error)\n        })\n    }\n  },\n  getters: {\n    // reusable data accessors\n    isAuthenticated (state) {\n      return isValidJwt(state.jwt.token)\n    }\n  },\n  modules: {\n  },\n})\n"]},"metadata":{},"sourceType":"module"}