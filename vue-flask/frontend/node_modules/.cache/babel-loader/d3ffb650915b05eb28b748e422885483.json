{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ReteEditor from \"@/components/rete/ReteEditor\";\nimport * as dayjs from \"dayjs\";\nimport { mapState } from 'vuex';\nexport default {\n  name: \"Automations\",\n  components: {\n    ReteEditor: ReteEditor\n  },\n  data: function data() {\n    return {\n      gpios: [],\n      value: null,\n      items: [{\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click: function click() {\n          this.$router.push(\"/\");\n        }\n      }, {\n        title: \"Dashboard\",\n        icon: \"mdi-view-dashboard\",\n        click: function click() {\n          this.$router.push(\"dashboard\");\n        }\n      }, {\n        title: \"Settings\",\n        icon: \"mdi-cogs\",\n        click: function click() {\n          this.$router.push(\"settings\");\n        }\n      }],\n      nameRules: [function (v) {\n        return !!v;\n      }],\n      dateRules: [function (v) {\n        return !!v || \"Insert 2 dates\";\n      }, function (v) {\n        return /^\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])~\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/.test(v) || \"Insert 2 dates!\";\n      }],\n      valid: true,\n      all_valid: false,\n      process_save: \"Process Saved!\",\n      process_delete: \"Process Deleted!\",\n      //snackbar: false,\n      textProcessTrigger: \"\",\n      snackbar_saved: false,\n      snackbar_deleted: false,\n      timeout: 4000,\n      menuStart: false,\n      menuEnd: false,\n      menu1: null,\n      menu2: null,\n      switch1: false,\n      AutomationName: \"\",\n      dialog: false,\n      rule_dialog: false,\n      dialogDelete: false,\n      headers: [{\n        text: \"\",\n        value: \"enable\",\n        sortable: false,\n        width: 0\n      }, {\n        text: \"Name\",\n        align: \"start\",\n        value: \"name\"\n      }, {\n        text: \"Triggering\",\n        align: \"center\",\n        value: \"triggering\"\n      }, {\n        text: \"Last Trigger\",\n        align: \"center\",\n        value: \"lastTimeTriggerStartDisplay\"\n      }, {\n        text: \"Actions\",\n        value: \"actions\",\n        sortable: false\n      }],\n      automations: [],\n      editedIndex: -1,\n      editedItem: {\n        id: 0,\n        name: \"\",\n        rule: 0,\n        enable: true,\n        dates: [],\n        startHour: \"\",\n        endHour: \"\",\n        triggering: false,\n        lastTimeTriggerStart: \"\",\n        lastTimeTriggerStartDisplay: \"Never\",\n        notification: false,\n        blueprint: {}\n      },\n      defaultItem: {\n        id: 0,\n        name: \"\",\n        rule: 0,\n        enable: true,\n        dates: [],\n        startHour: \"\",\n        endHour: \"\",\n        triggering: false,\n        lastTimeTriggerStart: \"\",\n        lastTimeTriggerStartDisplay: \"Never\",\n        notification: false,\n        blueprint: {}\n      },\n      editor: null,\n      editorJSON: \"\"\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState(['snackbars'])), {}, {\n    formTitle: function formTitle() {\n      return this.editedIndex === -1 ? \"New Process\" : \"Edit Processes\";\n    },\n    dateRangeText: function dateRangeText() {\n      return this.editedItem.dates.join(\"~\");\n    }\n    /*allGpios() {\n      if (this.editedIndex < 0) {\n        return this.gpios.sort((a, b) => a.value - b.value);\n      }\n      return this.gpios\n        .concat(\n          this.automations[this.editedIndex].gpios.map((value) => ({\n            text: `GPIO ${value}`,\n            value: value,\n          }))\n        )\n        .sort((a, b) => a.value - b.value);\n    },\n    orderEditedGpios: {\n      get() {\n        return this.editedItem.gpios.sort((a, b) => a - b);\n      },\n      set(value) {\n        this.editedItem.gpios = value;\n      },\n    },*/\n\n  }),\n  watch: {\n    dialog: function dialog(val) {\n      val || this.close();\n    },\n    dialogDelete: function dialogDelete(val) {\n      val || this.closeDelete();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.getProcesses();\n\n              _this.getPins();\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  created: function created() {//this.interval = setInterval(() => this.getProcesses(), 1000);\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  methods: {\n    notificationTest: function notificationTest() {\n      this.$store.dispatch('setSnackbar', {\n        text: \"process triggered!\"\n      });\n    },\n    isIsoDate: function isIsoDate(str) {\n      if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(str)) return false;\n      var d = new Date(str);\n      return d.toISOString() === str;\n    },\n    getProcesses: function getProcesses() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var responseAutomations, jsonAutomations;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetch(\"http://127.0.0.1:5000/process\");\n\n              case 2:\n                responseAutomations = _context3.sent;\n                _context3.next = 5;\n                return responseAutomations.json();\n\n              case 5:\n                jsonAutomations = _context3.sent;\n                _this2.automations = jsonAutomations.map(function (val) {\n                  var startTime = new Date(val.startTime);\n                  var endTime = new Date(val.endTime);\n                  var triggering = val.triggering;\n                  var notification = val.notification;\n                  var processName = val.name;\n\n                  if (_this2.isIsoDate(val.lastTimeTriggerStart)) {\n                    val.lastTimeTriggerStartDisplay = dayjs(val.lastTimeTriggerStart).fromNow();\n                  } else {\n                    val.lastTimeTriggerStartDisplay = \"Never\";\n                  }\n\n                  if (notification) {\n                    _this2.$store.dispatch('setSnackbar', {\n                      text: \"\".concat(processName, \" process triggered!\")\n                    });\n                  }\n\n                  delete val.notification;\n                  delete val.startTime;\n                  delete val.endTime;\n                  delete val.triggering;\n                  val.dates = [\"\".concat(dayjs(startTime).format(\"YYYY-MM-DD\")), \"\".concat(dayjs(endTime).format(\"YYYY-MM-DD\"))];\n                  val.startHour = \"\".concat(dayjs(startTime).format(\"HH:mm\"));\n                  val.endHour = \"\".concat(dayjs(endTime).format(\"HH:mm\"));\n                  val.triggering = triggering;\n                  return val;\n                });\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    createProcess: function createProcess() {\n      this.createItem();\n      this.getPins();\n      this.$refs.form.reset();\n    },\n    triggerSavedProcess: function triggerSavedProcess() {\n      this.snackbar_saved = true;\n    },\n    triggerDeletedProcess: function triggerDeletedProcess() {\n      this.snackbar_deleted = true;\n    },\n    createNodeClick: function createNodeClick() {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    handleClick: function handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    clickLogo: function clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    getPins: function getPins() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var responseGpios, jsonGpios;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return fetch(\"http://127.0.0.1:5000/pins\");\n\n              case 2:\n                responseGpios = _context5.sent;\n                _context5.next = 5;\n                return responseGpios.json();\n\n              case 5:\n                jsonGpios = _context5.sent;\n                _this3.gpios = jsonGpios.map(function (value) {\n                  return {\n                    text: \"GPIO \".concat(value),\n                    value: value\n                  };\n                });\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    editItem: function editItem(item) {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this4.editedIndex = _this4.automations.indexOf(item);\n                _this4.editedItem = Object.assign({}, item);\n                _this4.dialog = true;\n                setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n                  var blueprint;\n                  return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          blueprint = _this4.editedItem.blueprint;\n                          _context6.next = 3;\n                          return _this4.editor.fromJSON(blueprint);\n\n                        case 3:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                })), 200);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n    createItem: function createItem() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _this5.dialog = true;\n                setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                  return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return _this5.editor.clear();\n\n                        case 2:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                })), 200);\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }))();\n    },\n    deleteItem: function deleteItem(item) {\n      this.editedIndex = this.automations.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n    deleteItemConfirm: function deleteItemConfirm() {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n        var id, response;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                id = _this6.editedItem.id;\n                _context10.next = 3;\n                return fetch(\"http://127.0.0.1:5000/process?id=\".concat(id), {\n                  method: \"DELETE\"\n                });\n\n              case 3:\n                response = _context10.sent;\n\n                if (!response.ok) {\n                  _this6.process_delete = \"An error has occured: \".concat(response.status);\n                } else {\n                  _this6.process_delete = \"Process Deleted!\";\n                }\n\n                _this6.automations.splice(_this6.editedIndex, 1);\n\n                _this6.closeDelete();\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }))();\n    },\n    close: function close() {\n      var _this7 = this;\n\n      this.dialog = false;\n      this.$nextTick(function () {\n        _this7.editedItem = Object.assign({}, _this7.defaultItem);\n        _this7.editedIndex = -1;\n      });\n      this.all_valid = false;\n    },\n    closeDelete: function closeDelete() {\n      var _this8 = this;\n\n      this.dialogDelete = false;\n      this.$nextTick(function () {\n        _this8.editedItem = Object.assign({}, _this8.defaultItem);\n        _this8.editedIndex = -1;\n      });\n      this.all_valid = false;\n    },\n    save: function save() {\n      var _this9 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n        var _endComponent$toJsonL;\n\n        var editor, blueprint, endNode, endComponent, gpios, logic, dates, startHour, endHour, startTime, endTime, automation, file, id, response, _response;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                editor = _this9.editor;\n                _context11.next = 3;\n                return editor.toJSON();\n\n              case 3:\n                blueprint = _context11.sent;\n                endNode = _this9.editor.nodes.find(function (node) {\n                  return node.name === \"GPIO\";\n                });\n                endComponent = editor.getComponent(\"GPIO\");\n                gpios = _this9.editor.nodes.filter(function (node) {\n                  return node.name === \"GPIO\";\n                }).map(function (node) {\n                  return _this9.editor.getComponent(node.name).toGPIO(node);\n                });\n                logic = (_endComponent$toJsonL = endComponent.toJsonLogic) === null || _endComponent$toJsonL === void 0 ? void 0 : _endComponent$toJsonL.call(endComponent, endNode);\n                dates = _this9.editedItem.dates;\n                startHour = _this9.editedItem.startHour;\n                endHour = _this9.editedItem.endHour;\n                startTime = dayjs(dates[0] + \" \" + startHour).toISOString();\n                endTime = dayjs(dates[1] + \" \" + endHour).toISOString();\n                automation = {\n                  name: _this9.editedItem.name,\n                  startTime: startTime,\n                  endTime: endTime,\n                  enable: _this9.editedItem.enable,\n                  gpios: gpios,\n                  triggering: _this9.editedItem.triggering,\n                  lastTimeTriggerStart: _this9.editedItem.lastTimeTriggerStart,\n                  notification: _this9.editedItem.notification,\n                  rules: logic,\n                  blueprint: blueprint\n                };\n                file = JSON.stringify(automation);\n                console.log(file);\n\n                if (!(_this9.editedIndex > -1)) {\n                  _context11.next = 25;\n                  break;\n                }\n\n                id = _this9.editedItem.id;\n                _context11.next = 20;\n                return fetch(\"http://127.0.0.1:5000/process?id=\".concat(id), {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 20:\n                response = _context11.sent;\n                Object.assign(_this9.automations[_this9.editedIndex], _this9.editedItem);\n\n                if (!response.ok) {\n                  _this9.process_save = \"An error has occured: \".concat(response.status);\n\n                  _this9.close();\n                } else {\n                  _this9.process_save = \"Process Saved!\";\n                }\n\n                _context11.next = 30;\n                break;\n\n              case 25:\n                _context11.next = 27;\n                return fetch(\"http://127.0.0.1:5000/process\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 27:\n                _response = _context11.sent;\n\n                _this9.automations.push(_this9.editedItem);\n\n                if (!_response.ok) {\n                  _this9.process_save = \"An error has occured: \".concat(_response.status);\n\n                  _this9.close();\n                } else {\n                  _this9.process_save = \"Process Saved!\";\n                }\n\n              case 30:\n                _this9.close();\n\n                _this9.triggerSavedProcess();\n\n              case 32:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }))();\n    },\n    updateEnable: function updateEnable(event, item) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n        var id;\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                id = item.id;\n                _context12.next = 3;\n                return fetch(\"http://127.0.0.1:5000/process?id=\".concat(id), {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    enable: !!event\n                  })\n                });\n\n              case 3:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }))();\n    },\n    Validate: function Validate() {\n      var _this10 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n        var endNodes, inputNum0, connection0, connectionNode0, connectionComponent0, i, inputNum, connections, connection, connectionNode, connectionComponent;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                console.log(\"start validate\");\n                endNodes = _this10.editor.nodes.filter(function (node) {\n                  return node.name === \"GPIO\";\n                });\n                console.log(endNodes.length);\n\n                if (!(endNodes.length <= 0)) {\n                  _context13.next = 6;\n                  break;\n                }\n\n                _this10.all_valid = false;\n                return _context13.abrupt(\"return\");\n\n              case 6:\n                inputNum0 = endNodes[0].inputs.get(\"num\");\n\n                if (!(inputNum0.connections.length == 0)) {\n                  _context13.next = 10;\n                  break;\n                }\n\n                _this10.all_valid = false;\n                return _context13.abrupt(\"return\");\n\n              case 10:\n                connection0 = inputNum0.connections[0];\n                connectionNode0 = connection0.output.node;\n                connectionComponent0 = _this10.editor.getComponent(connectionNode0.name);\n                i = 1;\n\n              case 14:\n                if (!(i < endNodes.length)) {\n                  _context13.next = 31;\n                  break;\n                }\n\n                inputNum = endNodes[i].inputs.get(\"num\");\n                connections = inputNum.connections;\n\n                if (!(connections.length == 0)) {\n                  _context13.next = 21;\n                  break;\n                }\n\n                _this10.all_valid = false;\n                console.log(\"3\");\n                return _context13.abrupt(\"return\");\n\n              case 21:\n                connection = connections[0];\n                connectionNode = connection.output.node;\n                connectionComponent = _this10.editor.getComponent(connectionNode.name);\n\n                if (!(connectionComponent0 !== connectionComponent)) {\n                  _context13.next = 28;\n                  break;\n                }\n\n                _this10.all_valid = false;\n                console.log(\"4\");\n                return _context13.abrupt(\"return\");\n\n              case 28:\n                i++;\n                _context13.next = 14;\n                break;\n\n              case 31:\n                _this10.all_valid = true;\n                console.log(\"sucess\");\n\n              case 33:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["name","components","ReteEditor","data","gpios","value","items","title","icon","click","nameRules","dateRules","v","valid","all_valid","process_save","process_delete","textProcessTrigger","snackbar_saved","snackbar_deleted","timeout","menuStart","menuEnd","menu1","menu2","switch1","AutomationName","dialog","rule_dialog","dialogDelete","headers","text","sortable","width","align","automations","editedIndex","editedItem","id","rule","enable","dates","startHour","endHour","triggering","lastTimeTriggerStart","lastTimeTriggerStartDisplay","notification","blueprint","defaultItem","editor","editorJSON","computed","mapState","formTitle","dateRangeText","watch","val","mounted","created","methods","notificationTest","isIsoDate","str","getProcesses","fetch","responseAutomations","jsonAutomations","fromNow","dayjs","createProcess","triggerSavedProcess","triggerDeletedProcess","createNodeClick","handleClick","index","clickLogo","getPins","responseGpios","jsonGpios","editItem","item","setTimeout","createItem","deleteItem","deleteItemConfirm","method","response","close","closeDelete","save","endNode","endComponent","filter","map","logic","startTime","endTime","automation","rules","file","JSON","console","body","Object","updateEnable","event","Validate","endNodes","inputNum0","connection0","connectionNode0","connectionComponent0","i","inputNum","connections","connection","connectionNode","connectionComponent"],"sourceRoot":"src/views","sources":["Processes.vue"],"sourcesContent":["<template>\n  <div>\n    <v-app-bar color=\"transparent\" dark elevation=\"0\">\n      <v-img\n        max-height=\"35\"\n        max-width=\"35\"\n        src=\"../assets/logo_simple.png\"\n        @click=\"clickLogo()\"\n      ></v-img>\n      <v-toolbar-title class=\"ml-4\">Processes</v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-menu transition=\"slide-y-transition\" offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n        </template>\n\n        <v-list>\n          <v-list-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            @click=\"handleClick(index)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ item.title }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n    </v-app-bar>\n\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"automations\"\n      class=\"elevation-24 mt-13\"\n    >\n      <template v-slot:top>\n        <v-toolbar flat>\n          <v-toolbar-title class=\"font-weight-bold\">Processes</v-toolbar-title>\n          <v-spacer></v-spacer>\n          <v-btn\n            color=\"primary\"\n            depressed\n            elevation=\"4\"\n            raised\n            mx-auto\n            rounded\n            dark\n            @click=\"createProcess\"\n          >\n            <v-icon class=\"mr-3\">mdi-plus</v-icon>Create process\n          </v-btn>\n          <v-dialog v-model=\"dialog\" full-screen>\n            <v-card overflow-hidden>\n              <v-card-title>\n                <span class=\"text-h4 font-weight-bold\">{{ formTitle }}</span>\n              </v-card-title>\n              <v-card-actions>\n                <v-btn\n                  color=\"primary\"\n                  text\n                  :disabled=\"!(all_valid & valid)\"\n                  @click=\"save\"\n                >\n                  Save\n                </v-btn>\n                <v-btn color=\"primary\" text @click=\"close\"> Cancel </v-btn>\n              </v-card-actions>\n              <v-card-text>\n                <v-row>\n                  <v-col>\n                    <v-form ref=\"form\" v-model=\"valid\">\n                      <h2 class=\"mt-12\">Name</h2>\n                      <v-text-field\n                        v-model=\"editedItem.name\"\n                        label=\"Insert process Name Here!\"\n                        class=\"mt-3 mb-6\"\n                        :rules=\"nameRules\"\n                        required\n                      ></v-text-field>\n\n                      <div>\n                        <h2 class=\"mt-12\">Time</h2>\n                        <v-menu\n                          v-model=\"menu2\"\n                          :close-on-content-click=\"false\"\n                          :nudge-right=\"40\"\n                          transition=\"scale-transition\"\n                          offset-y\n                          min-width=\"auto\"\n                        >\n                          <template v-slot:activator=\"{ on, attrs }\">\n                            <v-text-field\n                              v-model=\"dateRangeText\"\n                              label=\"Select date range\"\n                              prepend-icon=\"mdi-calendar\"\n                              readonly\n                              v-bind=\"attrs\"\n                              v-on=\"on\"\n                              class=\"mt-3\"\n                              required\n                              :rules=\"dateRules\"\n                            ></v-text-field>\n                          </template>\n                          <v-date-picker\n                            v-model=\"editedItem.dates\"\n                            range\n                          ></v-date-picker>\n                        </v-menu>\n\n                        <v-menu\n                          ref=\"menu1\"\n                          v-model=\"menuStart\"\n                          :close-on-content-click=\"false\"\n                          :nudge-right=\"40\"\n                          :return-value.sync=\"editedItem.startHour\"\n                          transition=\"scale-transition\"\n                          offset-y\n                          max-width=\"290px\"\n                          min-width=\"290px\"\n                        >\n                          <template v-slot:activator=\"{ on, attrs }\">\n                            <v-text-field\n                              v-model=\"editedItem.startHour\"\n                              label=\"Start Time\"\n                              prepend-icon=\"mdi-clock-time-four-outline\"\n                              readonly\n                              v-bind=\"attrs\"\n                              v-on=\"on\"\n                              :rules=\"nameRules\"\n                              required\n                            ></v-text-field>\n                          </template>\n                          <v-time-picker\n                            v-if=\"menuStart\"\n                            v-model=\"editedItem.startHour\"\n                            format=\"24h\"\n                            scrollable\n                            full-width\n                            @click:minute=\"\n                              $refs.menu1.save(editedItem.startHour)\n                            \"\n                          ></v-time-picker>\n                        </v-menu>\n\n                        <v-menu\n                          ref=\"menu2\"\n                          v-model=\"menuEnd\"\n                          :close-on-content-click=\"false\"\n                          :nudge-right=\"40\"\n                          :return-value.sync=\"editedItem.endHour\"\n                          transition=\"scale-transition\"\n                          offset-y\n                          max-width=\"290px\"\n                          min-width=\"290px\"\n                        >\n                          <template v-slot:activator=\"{ on, attrs }\">\n                            <v-text-field\n                              v-model=\"editedItem.endHour\"\n                              label=\"End Time\"\n                              prepend-icon=\"mdi-clock-time-four-outline\"\n                              readonly\n                              v-bind=\"attrs\"\n                              v-on=\"on\"\n                              class=\"mb-6\"\n                              :rules=\"nameRules\"\n                              required\n                            ></v-text-field>\n                          </template>\n                          <v-time-picker\n                            v-if=\"menuEnd\"\n                            v-model=\"editedItem.endHour\"\n                            format=\"24h\"\n                            scrollable\n                            full-width\n                            @click:minute=\"$refs.menu2.save(editedItem.endHour)\"\n                          ></v-time-picker>\n                        </v-menu>\n                      </div>\n                      <div>\n                        <h2 class=\"mt-12\">Enable</h2>\n                        <v-switch\n                          color=\"primary\"\n                          v-model=\"editedItem.enable\"\n                        ></v-switch>\n                      </div>\n\n                      <v-btn class=\"mt-12\" @click=\"Validate\" :disabled=\"!valid\"\n                        >Validate Rule</v-btn\n                      >\n                      <!-- <v-textarea v-model=\"editorJSON\"></v-textarea> -->\n                      <!-- <v-btn @click=\"onEditorSync\">Sync</v-btn> -->\n                      <!-- <v-btn @click=\"onEditorImport\">Import</v-btn> -->\n                    </v-form>\n                  </v-col>\n\n                  <v-col md=\"10\">\n                    <ReteEditor v-model=\"editor\" />\n                  </v-col>\n                </v-row>\n              </v-card-text>\n            </v-card>\n          </v-dialog>\n\n          <v-dialog v-model=\"dialogDelete\" max-width=\"573px\">\n            <v-card>\n              <v-card-title class=\"text-h5\"\n                >Are you sure you want to delete this processs?</v-card-title\n              >\n              <v-card-actions>\n                <v-spacer></v-spacer>\n                <v-btn color=\"primary\" text @click=\"closeDelete\">Cancel</v-btn>\n                <v-btn\n                  color=\"primary\"\n                  text\n                  @click=\"\n                    deleteItemConfirm();\n                    snackbar_deleted = true;\n                  \"\n                  >OK</v-btn\n                >\n                <v-spacer></v-spacer>\n              </v-card-actions>\n            </v-card>\n          </v-dialog>\n        </v-toolbar>\n      </template>\n      <template v-slot:[`item.enable`]=\"{ item }\">\n        <v-switch\n          :input-value=\"item.enable\"\n          @change=\"updateEnable($event, item)\"\n          hide-details\n          class=\"ma-0 pa-0\"\n          color=\"primary\"\n        ></v-switch>\n      </template>\n      <template v-slot:[`item.actions`]=\"{ item }\">\n        <v-icon small class=\"mr-2\" @click=\"editItem(item)\"> mdi-pencil </v-icon>\n        <v-icon small @click=\"deleteItem(item)\"> mdi-delete </v-icon>\n      </template>\n    </v-data-table>\n    <div>\n      <v-btn color=\"white\" @click=\"notificationTest\">\n        NOTIFICATION\n      </v-btn>\n    </div>\n    <div class=\"text-center\">\n      <v-snackbar v-model=\"snackbar_saved\" :timeout=\"timeout\">\n        {{ process_save }}\n\n        <template v-slot:action=\"{ attrs }\">\n          <v-btn\n            color=\"blue\"\n            text\n            v-bind=\"attrs\"\n            @click=\"snackbar_saved = false\"\n          >\n            Close\n          </v-btn>\n        </template>\n      </v-snackbar>\n    </div>\n    <div class=\"text-center\">\n      <v-snackbar v-model=\"snackbar_deleted\" :timeout=\"timeout\">\n        {{ process_delete }}\n\n        <template v-slot:action=\"{ attrs }\">\n          <v-btn\n            color=\"blue\"\n            text\n            v-bind=\"attrs\"\n            @click=\"snackbar_deleted = false\"\n          >\n            Close\n          </v-btn>\n        </template>\n      </v-snackbar>\n    </div>\n    <v-spacer></v-spacer>\n    <div class=\"text-center\">\n      <v-snackbar\n        v-for=\"(snackbar, index) in snackbars.filter(s => s.showing)\"\n        :key=\"snackbar.text\"\n        v-model=\"snackbar.showing\"\n        elevation=\"24\"\n        class=\"mb-12 mr-12\"\n        :style=\"`bottom: ${(index * 60) + 8}px`\"\n      >\n        <h2 class=\"font-weight-medium\">{{ snackbar.text }}</h2>\n\n        <template v-slot:action=\"{ attrs }\">\n          <v-btn\n            color=\"white\"\n            text\n            v-bind=\"attrs\"\n            @click=\"snackbar.showing = false\"\n          >\n            Close\n          </v-btn>\n        </template>\n      </v-snackbar>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ReteEditor from \"@/components/rete/ReteEditor\";\nimport * as dayjs from \"dayjs\";\nimport  { mapState }  from 'vuex';\n\nexport default {\n  name: \"Automations\",\n  components: {\n    ReteEditor,\n  },\n\n  data() {\n    return {\n      gpios: [],\n      value: null,\n\n      items: [\n        {\n          title: \"Logout\",\n          icon: \"mdi-logout\",\n          click() {\n            this.$router.push(\"/\");\n          },\n        },\n        {\n          title: \"Dashboard\",\n          icon: \"mdi-view-dashboard\",\n          click() {\n            this.$router.push(\"dashboard\");\n          },\n        },\n        {\n          title: \"Settings\",\n          icon: \"mdi-cogs\",\n          click() {\n            this.$router.push(\"settings\");\n          },\n        },\n      ],\n\n      nameRules: [(v) => !!v],\n      dateRules: [\n        (v) => !!v || \"Insert 2 dates\",\n        (v) =>\n          /^\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])~\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/.test(\n            v\n          ) || \"Insert 2 dates!\",\n      ],\n\n      valid: true,\n      all_valid: false,\n\n      process_save: \"Process Saved!\",\n      process_delete: \"Process Deleted!\",\n\n      //snackbar: false,\n      textProcessTrigger: \"\",\n\n      snackbar_saved: false,\n      snackbar_deleted: false,\n      timeout: 4000,\n\n      menuStart: false,\n      menuEnd: false,\n      menu1: null,\n      menu2: null,\n\n      switch1: false,\n\n      AutomationName: \"\",\n      dialog: false,\n      rule_dialog: false,\n      dialogDelete: false,\n\n      headers: [\n        {\n          text: \"\",\n          value: \"enable\",\n          sortable: false,\n          width: 0,\n        },\n        {\n          text: \"Name\",\n          align: \"start\",\n          value: \"name\",\n        },\n        {\n          text: \"Triggering\",\n          align: \"center\",\n          value: \"triggering\",\n        },\n        {\n          text: \"Last Trigger\",\n          align: \"center\",\n          value: \"lastTimeTriggerStartDisplay\",\n        },\n        { text: \"Actions\", value: \"actions\", sortable: false },\n      ],\n      automations: [],\n      editedIndex: -1,\n      editedItem: {\n        id: 0,\n        name: \"\",\n        rule: 0,\n        enable: true,\n        dates: [],\n        startHour: \"\",\n        endHour: \"\",\n        triggering: false,\n        lastTimeTriggerStart: \"\",\n        lastTimeTriggerStartDisplay: \"Never\",\n        notification: false,\n        blueprint: {},\n      },\n\n      defaultItem: {\n        id: 0,\n        name: \"\",\n        rule: 0,\n        enable: true,\n        dates: [],\n        startHour: \"\",\n        endHour: \"\",\n        triggering: false,\n        lastTimeTriggerStart: \"\",\n        lastTimeTriggerStartDisplay: \"Never\",\n        notification: false,\n        blueprint: {},\n      },\n\n      editor: null,\n      editorJSON: \"\",\n    };\n  },\n\n  computed: {\n    ...mapState(['snackbars']),\n\n    formTitle() {\n      return this.editedIndex === -1 ? \"New Process\" : \"Edit Processes\";\n    },\n    dateRangeText() {\n      return this.editedItem.dates.join(\"~\");\n    },\n    /*allGpios() {\n      if (this.editedIndex < 0) {\n        return this.gpios.sort((a, b) => a.value - b.value);\n      }\n      return this.gpios\n        .concat(\n          this.automations[this.editedIndex].gpios.map((value) => ({\n            text: `GPIO ${value}`,\n            value: value,\n          }))\n        )\n        .sort((a, b) => a.value - b.value);\n    },\n    orderEditedGpios: {\n      get() {\n        return this.editedItem.gpios.sort((a, b) => a - b);\n      },\n      set(value) {\n        this.editedItem.gpios = value;\n      },\n    },*/\n  },\n\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n    dialogDelete(val) {\n      val || this.closeDelete();\n    },\n  },\n\n  async mounted() {\n    \n    this.getProcesses();\n    this.getPins();\n  },\n\n  async created() {\n    //this.interval = setInterval(() => this.getProcesses(), 1000);\n  },\n\n  methods: {\n\n    notificationTest() {\n      this.$store.dispatch('setSnackbar',{\n          text: `process triggered!`\n          })\n    },\n\n    isIsoDate(str) {\n      if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(str)) return false;\n      const d = new Date(str);\n      return d.toISOString() === str;\n    },\n\n    async getProcesses() {\n      const responseAutomations = await fetch(\"http://127.0.0.1:5000/process\");\n      const jsonAutomations = await responseAutomations.json();\n\n      this.automations = jsonAutomations.map((val) => {\n        const startTime = new Date(val.startTime);\n        const endTime = new Date(val.endTime);\n        const triggering = val.triggering;\n        const notification = val.notification;\n        const processName = val.name;\n        \n\n        if (this.isIsoDate(val.lastTimeTriggerStart)) {\n          val.lastTimeTriggerStartDisplay = dayjs(\n            val.lastTimeTriggerStart\n          ).fromNow();\n        } else {\n          val.lastTimeTriggerStartDisplay = \"Never\";\n        }\n\n        if (notification) {\n          this.$store.dispatch('setSnackbar',{\n          text: `${processName} process triggered!`\n          })\n        }\n\n        delete val.notification;\n        delete val.startTime;\n        delete val.endTime;\n        delete val.triggering;\n\n        val.dates = [\n          `${dayjs(startTime).format(\"YYYY-MM-DD\")}`,\n          `${dayjs(endTime).format(\"YYYY-MM-DD\")}`,\n        ];\n        val.startHour = `${dayjs(startTime).format(\"HH:mm\")}`;\n        val.endHour = `${dayjs(endTime).format(\"HH:mm\")}`;\n        val.triggering = triggering;\n\n        return val;\n      });\n    },\n\n    createProcess() {\n      this.createItem();\n      this.getPins();\n      this.$refs.form.reset();\n    },\n\n    triggerSavedProcess() {\n      this.snackbar_saved = true;\n    },\n\n    triggerDeletedProcess() {\n      this.snackbar_deleted = true;\n    },\n\n    async createNodeClick() {},\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n\n    async getPins() {\n      const responseGpios = await fetch(\"http://127.0.0.1:5000/pins\");\n      const jsonGpios = await responseGpios.json();\n\n      this.gpios = jsonGpios.map((value) => ({\n        text: `GPIO ${value}`,\n        value: value,\n      }));\n    },\n\n    async editItem(item) {\n      this.editedIndex = this.automations.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n\n      this.dialog = true;\n\n      setTimeout(async () => {\n        const blueprint = this.editedItem.blueprint;\n        await this.editor.fromJSON(blueprint);\n      }, 200);\n    },\n\n    async createItem() {\n      this.dialog = true;\n      setTimeout(async () => {\n        await this.editor.clear();\n      }, 200);\n    },\n\n    deleteItem(item) {\n      this.editedIndex = this.automations.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n\n    async deleteItemConfirm() {\n      const id = this.editedItem.id;\n      const response = await fetch(`http://127.0.0.1:5000/process?id=${id}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) {\n        this.process_delete = `An error has occured: ${response.status}`;\n      } else {\n        this.process_delete = \"Process Deleted!\";\n      }\n      this.automations.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n\n    close() {\n      this.dialog = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n      this.all_valid = false;\n    },\n\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n\n      this.all_valid = false;\n    },\n\n    async save() {\n      const editor = this.editor;\n\n      const blueprint = await editor.toJSON();\n\n      const endNode = this.editor.nodes.find((node) => node.name === \"GPIO\");\n      const endComponent = editor.getComponent(\"GPIO\");\n\n      const gpios = this.editor.nodes\n        .filter((node) => node.name === \"GPIO\")\n        .map((node) => this.editor.getComponent(node.name).toGPIO(node));\n\n      const logic = endComponent.toJsonLogic?.(endNode);\n\n      const dates = this.editedItem.dates;\n\n      const startHour = this.editedItem.startHour;\n      const endHour = this.editedItem.endHour;\n\n      const startTime = dayjs(dates[0] + \" \" + startHour).toISOString();\n      const endTime = dayjs(dates[1] + \" \" + endHour).toISOString();\n\n      const automation = {\n        name: this.editedItem.name,\n        startTime: startTime,\n        endTime: endTime,\n        enable: this.editedItem.enable,\n        gpios: gpios,\n        triggering: this.editedItem.triggering,\n        lastTimeTriggerStart: this.editedItem.lastTimeTriggerStart,\n        notification: this.editedItem.notification,\n        rules: logic,\n        blueprint: blueprint,\n      };\n\n      const file = JSON.stringify(automation);\n      console.log(file);\n\n      if (this.editedIndex > -1) {\n        const id = this.editedItem.id;\n        const response = await fetch(`http://127.0.0.1:5000/process?id=${id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: file,\n        });\n        Object.assign(this.automations[this.editedIndex], this.editedItem);\n\n        if (!response.ok) {\n          this.process_save = `An error has occured: ${response.status}`;\n          this.close();\n        } else {\n          this.process_save = \"Process Saved!\";\n        }\n      } else {\n        const response = await fetch(\"http://127.0.0.1:5000/process\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: file,\n        });\n        this.automations.push(this.editedItem);\n        if (!response.ok) {\n          this.process_save = `An error has occured: ${response.status}`;\n          this.close();\n        } else {\n          this.process_save = \"Process Saved!\";\n        }\n      }\n      this.close();\n      this.triggerSavedProcess();\n    },\n\n    async updateEnable(event, item) {\n      const id = item.id;\n\n      await fetch(`http://127.0.0.1:5000/process?id=${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          enable: !!event,\n        }),\n      });\n    },\n\n    async Validate() {\n      console.log(\"start validate\");\n      const endNodes = this.editor.nodes.filter((node) => node.name === \"GPIO\");\n      console.log(endNodes.length);\n\n      if (endNodes.length <= 0) {\n        this.all_valid = false;\n        return;\n      }\n\n      const inputNum0 = endNodes[0].inputs.get(\"num\");\n\n      if (inputNum0.connections.length == 0) {\n        this.all_valid = false;\n        return;\n      }\n\n      const connection0 = inputNum0.connections[0];\n      const connectionNode0 = connection0.output.node;\n      const connectionComponent0 = this.editor.getComponent(\n        connectionNode0.name\n      );\n\n      for (let i = 1; i < endNodes.length; i++) {\n        const inputNum = endNodes[i].inputs.get(\"num\");\n        const { connections } = inputNum;\n\n        if (connections.length == 0) {\n          this.all_valid = false;\n          console.log(\"3\");\n          return;\n        }\n\n        const connection = connections[0];\n        const connectionNode = connection.output.node;\n        const connectionComponent = this.editor.getComponent(\n          connectionNode.name\n        );\n\n        if (connectionComponent0 !== connectionComponent) {\n          this.all_valid = false;\n          console.log(\"4\");\n          return;\n        }\n      }\n      this.all_valid = true;\n      console.log(\"sucess\");\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}