{"ast":null,"code":"import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/logical-operators/Node.vue\";\nexport class NOTComponent extends Rete.Component {\n  constructor() {\n    super(\"NOT\");\n    this.data.component = Node;\n  }\n\n  builder(node) {\n    var inp1 = new Rete.Input('num1', \"In\", Socket.boolean);\n    var out = new Rete.Output('num', \"Out\", Socket.boolean);\n    return node.addInput(inp1).addOutput(out);\n  }\n\n  worker(node, outputs) {\n    outputs['num'] = node.data.num;\n  }\n\n}","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/logical-operators/NOTComponent.js"],"names":["Rete","Socket","Node","NOTComponent","Component","constructor","data","component","builder","node","inp1","Input","boolean","out","Output","addInput","addOutput","worker","outputs","num"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,gFAAjB;AAEA,OAAO,MAAMC,YAAN,SAA2BH,IAAI,CAACI,SAAhC,CAA0C;AAC7CC,EAAAA,WAAW,GAAE;AACT,UAAM,KAAN;AACA,SAAKC,IAAL,CAAUC,SAAV,GAAsBL,IAAtB;AACH;;AAEDM,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,QAAIC,IAAI,GAAG,IAAIV,IAAI,CAACW,KAAT,CAAe,MAAf,EAAsB,IAAtB,EAA4BV,MAAM,CAACW,OAAnC,CAAX;AACA,QAAIC,GAAG,GAAG,IAAIb,IAAI,CAACc,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8Bb,MAAM,CAACW,OAArC,CAAV;AAEA,WAAOH,IAAI,CACNM,QADE,CACOL,IADP,EAEFM,SAFE,CAEQH,GAFR,CAAP;AAGH;;AAEDI,EAAAA,MAAM,CAACR,IAAD,EAAOS,OAAP,EAAgB;AAClBA,IAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBT,IAAI,CAACH,IAAL,CAAUa,GAA3B;AACH;;AAjB4C","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/logical-operators/Node.vue\";\n\nexport class NOTComponent extends Rete.Component {\n    constructor(){\n        super(\"NOT\");\n        this.data.component = Node;\n    }\n    \n    builder(node) {\n        var inp1 = new Rete.Input('num1',\"In\", Socket.boolean);\n        var out = new Rete.Output('num', \"Out\", Socket.boolean);\n\n        return node\n            .addInput(inp1)\n            .addOutput(out);\n    }\n    \n    worker(node, outputs) {\n        outputs['num'] = node.data.num;\n    }\n}"]},"metadata":{},"sourceType":"module"}