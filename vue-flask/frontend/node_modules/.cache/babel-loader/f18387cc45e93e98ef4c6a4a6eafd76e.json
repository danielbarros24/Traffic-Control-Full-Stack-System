{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      username: '',\n      password: '',\n      valid: true,\n      invalidCredentials: false\n    };\n  },\n  props: {\n    source: String\n  },\n  methods: {\n    postData: function postData() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var postData, res, data, message, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.$refs.form.validate();\n\n                postData = {\n                  username: _this.username,\n                  password: _this.password\n                };\n                _context.prev = 2;\n                _context.next = 5;\n                return fetch(\"http://127.0.0.1:5000/login\", {\n                  method: \"POST\",\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json;charset=utf-8'\n                  },\n                  body: JSON.stringify(postData)\n                });\n\n              case 5:\n                res = _context.sent;\n                _context.next = 8;\n                return res.json();\n\n              case 8:\n                data = _context.sent;\n                console.log(data);\n\n                if (!(data.access != \"ok\")) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _this.invalidCredentials = true;\n                message = \"An error has occured: \".concat(res.status, \" - \").concat(res.statusText);\n                throw new Error(message);\n\n              case 14:\n                if (data.access == \"ok\") {\n                  _this.$router.push(\"dashboard\");\n                }\n\n                result = {\n                  status: res.status + \"-\" + res.statusText,\n                  headers: {\n                    \"Content-Type\": res.headers.get(\"Content-Type\"),\n                    \"Content-Length\": res.headers.get(\"Content-Length\")\n                  },\n                  data: data\n                };\n                _this.postResult = _this.fortmatResponse(result);\n                _context.next = 22;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](2);\n                _this.postResult = _context.t0.message;\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 19]]);\n      }))();\n    },\n    clearPostOutput: function clearPostOutput() {\n      this.postResult = null;\n    }\n  },\n  mounted: function mounted() {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AACAA;AAAA;AACAC,kBADA;AAEAC,kBAFA;AAGAC,iBAHA;AAIAC;AAJA;AAAA,GADA;AAOAC;AACAC;AADA,GAPA;AAWAC;AACAC,YADA,sBACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACAA,wBAFA,GAEA;AACAP,0CADA;AAEAC;AAFA,iBAFA;AAAA;AAAA;AAAA,uBAOAO;AACAC,gCADA;AAEAC;AACA,gDADA;AAEA;AAFA,mBAFA;AAMAC;AANA,kBAPA;;AAAA;AAOAC,mBAPA;AAAA;AAAA,uBAgBAA,UAhBA;;AAAA;AAgBAb,oBAhBA;AAiBAc;;AAjBA,sBAmBAd,mBAnBA;AAAA;AAAA;AAAA;;AAoBA;AACAe,uBArBA,mCAqBAF,UArBA,gBAqBAA,cArBA;AAAA,sBAsBA,kBAtBA;;AAAA;AAwBA;AACA;AACA;;AAEAG,sBA5BA,GA4BA;AACAC,2DADA;AAEAN;AACA,mEADA;AAEA;AAFA,mBAFA;AAMAX;AANA,iBA5BA;AAoCA;AApCA;AAAA;;AAAA;AAAA;AAAA;AAsCA;;AAtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCA,KAzCA;AA0CAkB,mBA1CA,6BA0CA;AACA;AACA;AA5CA,GAXA;AA0DAC,SA1DA,qBA0DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA3DA","names":["data","username","password","valid","invalidCredentials","props","source","methods","postData","fetch","method","headers","body","res","console","message","result","status","clearPostOutput","mounted"],"sourceRoot":"src/views","sources":["Login.vue"],"sourcesContent":["<template>\n  <v-app id=\"inspire\">\n    <v-main>\n      <v-container class=\"fill-height\">\n        <v-row align=\"center\" justify=\"center\">\n          <v-col cols=\"7\" md=\"4\">\n            <v-card class=\"elevation-12\">\n              <v-window>\n                  <v-card-text class=\"pt-9 pl-10 pr-16 pb-10\" flat>\n                    <v-img\n                      class=\"mb-12 mx-auto text-center\"\n                      src=\"../assets/logo.png\"\n                      max-height=\"160\"\n                      max-width=\"160\"\n                    ></v-img>\n\n                    <v-form ref=\"form\"\n                      v-model=\"valid\"\n                      lazy-validation>\n                      <v-text-field\n                        v-model=\"username\"\n                        label=\"Username\"\n                        name=\"username\"\n                        prepend-icon=\"mdi-account\"\n                        type=\"text\"\n                        color=\"primary\"\n                        required\n                        :rules=\"[v => !!v || 'You must type username!']\"\n                      />\n                      <v-text-field\n                        v-model=\"password\"\n                        id=\"password\"\n                        label=\"Password\"\n                        name=\"password\"\n                        prepend-icon=\"key\"\n                        type=\"password\"\n                        color=\"primary\"\n                        :rules=\"[v => !!v || 'You must type password!']\"\n                      />\n                      <v-btn @click=\"postData()\" rounded color=\"primary\" class=\"mt-4\" block dark \n                      >SIGN IN</v-btn\n                    >\n                    <p class=\"red--text  mt-3 mr-6\" v-show=\"invalidCredentials\" >\n                      Invalid Credentials!\n                    </p>\n                    </v-form>\n\n                  </v-card-text>\n              </v-window>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nexport default {\n  data: () => ({\n    username:'',\n    password:'',\n    valid: true,\n    invalidCredentials: false,\n  }),\n  props: {\n    source: String,\n  },\n\n  methods:{\n    async postData() {\n      this.$refs.form.validate()\n      const postData = {\n        username: this.username,\n        password: this.password,\n      }\n      try {\n        const res = await fetch(\"http://127.0.0.1:5000/login\", {\n          method: \"POST\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json;charset=utf-8'\n          },\n          body: JSON.stringify(postData),\n        })\n\n        const data = await res.json();\n        console.log(data)\n\n        if (data.access != \"ok\") {\n          this.invalidCredentials = true\n          const message = `An error has occured: ${res.status} - ${res.statusText}`;\n          throw new Error(message)\n        }\n        if(data.access == \"ok\") {\n          this.$router.push(\"dashboard\")\n        }\n\n        const result = {\n          status: res.status + \"-\" + res.statusText,\n          headers: {\n            \"Content-Type\": res.headers.get(\"Content-Type\"),\n            \"Content-Length\": res.headers.get(\"Content-Length\"),\n          },\n          data: data,\n        };\n        this.postResult = this.fortmatResponse(result);\n      } catch (err) {\n        this.postResult = err.message;\n      }\n    },\n    clearPostOutput() {\n      this.postResult = null;\n    },\n  },\n\n  async mounted() {\n  }\n};\n\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module"}