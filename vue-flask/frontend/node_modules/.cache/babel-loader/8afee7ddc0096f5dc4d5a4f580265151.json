{"ast":null,"code":"// Styles\nimport \"../../../src/components/VCheckbox/VCheckbox.sass\";\nimport \"../../../src/styles/components/_selection-controls.sass\"; // Components\n\nimport VIcon from '../VIcon';\nimport VInput from '../VInput'; // Mixins\n\nimport Selectable from '../../mixins/selectable';\n/* @vue/component */\n\nexport default Selectable.extend({\n  name: 'v-checkbox',\n  props: {\n    indeterminate: Boolean,\n    indeterminateIcon: {\n      type: String,\n      default: '$checkboxIndeterminate'\n    },\n    offIcon: {\n      type: String,\n      default: '$checkboxOff'\n    },\n    onIcon: {\n      type: String,\n      default: '$checkboxOn'\n    }\n  },\n\n  data() {\n    return {\n      inputIndeterminate: this.indeterminate\n    };\n  },\n\n  computed: {\n    classes() {\n      return { ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls': true,\n        'v-input--checkbox': true,\n        'v-input--indeterminate': this.inputIndeterminate\n      };\n    },\n\n    computedIcon() {\n      if (this.inputIndeterminate) {\n        return this.indeterminateIcon;\n      } else if (this.isActive) {\n        return this.onIcon;\n      } else {\n        return this.offIcon;\n      }\n    },\n\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState() {\n      if (this.isDisabled && !this.inputIndeterminate) return undefined;\n      if (this.hasError && this.shouldValidate) return 'error';\n      if (this.hasSuccess) return 'success';\n      if (this.hasColor !== null) return this.computedColor;\n      return undefined;\n    }\n\n  },\n  watch: {\n    indeterminate(val) {\n      // https://github.com/vuetifyjs/vuetify/issues/8270\n      this.$nextTick(() => this.inputIndeterminate = val);\n    },\n\n    inputIndeterminate(val) {\n      this.$emit('update:indeterminate', val);\n    },\n\n    isActive() {\n      if (!this.indeterminate) return;\n      this.inputIndeterminate = false;\n    }\n\n  },\n  methods: {\n    genCheckbox() {\n      const {\n        title,\n        ...checkboxAttrs\n      } = this.attrs$;\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input'\n      }, [this.$createElement(VIcon, this.setTextColor(this.validationState, {\n        props: {\n          dense: this.dense,\n          dark: this.dark,\n          light: this.light\n        }\n      }), this.computedIcon), this.genInput('checkbox', { ...checkboxAttrs,\n        'aria-checked': this.inputIndeterminate ? 'mixed' : this.isActive.toString()\n      }), this.genRipple(this.setTextColor(this.rippleState))]);\n    },\n\n    genDefaultSlot() {\n      return [this.genCheckbox(), this.genLabel()];\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["VIcon","VInput","Selectable","extend","name","props","indeterminate","Boolean","indeterminateIcon","type","String","default","offIcon","onIcon","data","inputIndeterminate","computed","classes","options","call","computedIcon","isActive","validationState","isDisabled","undefined","hasError","shouldValidate","hasSuccess","hasColor","computedColor","watch","val","$nextTick","$emit","methods","genCheckbox","title","checkboxAttrs","attrs$","$createElement","staticClass","setTextColor","dense","dark","light","genInput","toString","genRipple","rippleState","genDefaultSlot","genLabel"],"sourceRoot":"","sources":["../../../src/components/VCheckbox/VCheckbox.ts"],"sourcesContent":["// Styles\nimport './VCheckbox.sass'\nimport '../../styles/components/_selection-controls.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport VInput from '../VInput'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-checkbox',\n\n  props: {\n    indeterminate: Boolean,\n    indeterminateIcon: {\n      type: String,\n      default: '$checkboxIndeterminate',\n    },\n    offIcon: {\n      type: String,\n      default: '$checkboxOff',\n    },\n    onIcon: {\n      type: String,\n      default: '$checkboxOn',\n    },\n  },\n\n  data () {\n    return {\n      inputIndeterminate: this.indeterminate,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls': true,\n        'v-input--checkbox': true,\n        'v-input--indeterminate': this.inputIndeterminate,\n      }\n    },\n    computedIcon (): string {\n      if (this.inputIndeterminate) {\n        return this.indeterminateIcon\n      } else if (this.isActive) {\n        return this.onIcon\n      } else {\n        return this.offIcon\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.isDisabled && !this.inputIndeterminate) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n  },\n\n  watch: {\n    indeterminate (val) {\n      // https://github.com/vuetifyjs/vuetify/issues/8270\n      this.$nextTick(() => (this.inputIndeterminate = val))\n    },\n    inputIndeterminate (val) {\n      this.$emit('update:indeterminate', val)\n    },\n    isActive () {\n      if (!this.indeterminate) return\n      this.inputIndeterminate = false\n    },\n  },\n\n  methods: {\n    genCheckbox () {\n      const { title, ...checkboxAttrs } = this.attrs$\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.$createElement(VIcon, this.setTextColor(this.validationState, {\n          props: {\n            dense: this.dense,\n            dark: this.dark,\n            light: this.light,\n          },\n        }), this.computedIcon),\n        this.genInput('checkbox', {\n          ...checkboxAttrs,\n          'aria-checked': this.inputIndeterminate\n            ? 'mixed'\n            : this.isActive.toString(),\n        }),\n        this.genRipple(this.setTextColor(this.rippleState)),\n      ])\n    },\n    genDefaultSlot () {\n      return [\n        this.genCheckbox(),\n        this.genLabel(),\n      ]\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}