{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      snackbar_password: false,\n      text_pass: \"Password changed!\",\n      text_mqtt: \"Broker IP changed!\",\n      text_sensors: \"Number of sensors changed!\",\n      timeout: 4000,\n      valid: true,\n      valid_mqtt: true,\n      password: \"\",\n      confirmPassword: \"\",\n      passwordRules: [function (v) {\n        return !!v || \"Password is required\";\n      }],\n      confirmPasswordRules: [function (v) {\n        return !!v || \"Password is required\";\n      }],\n      mqttRules: [function (v) {\n        return !!v || \"Cannot be empty\";\n      }],\n      mqtt_ip: \"192.168.1.199\",\n      valid_sensors: true,\n      n_sensors: 1,\n      SensorsRules: [function (v) {\n        return !!v || \"Cannot be empty\";\n      }],\n      items: [{\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click: function click() {\n          console.log(\"logout\");\n          this.$router.push(\"/\");\n        }\n      }, {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n        click: function click() {\n          console.log(\"processes\");\n          this.$router.push(\"processes\");\n        }\n      }, {\n        title: \"Settings\",\n        icon: \"mdi-cogs\",\n        click: function click() {\n          console.log(\"settings\");\n          this.$router.push(\"settings\");\n        }\n      }]\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.getBrokerIP();\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    clickLogo: function clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick: function handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    submit_password: function submit_password() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var file;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                file = JSON.stringify({\n                  password: _this2.confirmPassword\n                });\n                _context2.next = 3;\n                return fetch(\"http://127.0.0.1:5000/settings\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    submit_mqttIp: function submit_mqttIp() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var file;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                file = JSON.stringify({\n                  Broker_IP: _this3.mqtt_ip\n                });\n                _context3.next = 3;\n                return fetch(\"http://127.0.0.1:5000/settings\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    submit_sensors: function submit_sensors() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var file;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                file = JSON.stringify({\n                  Sensors: _this4.n_sensors\n                });\n                _context4.next = 3;\n                return fetch(\"http://127.0.0.1:5000/settings\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    getBrokerIP: function getBrokerIP() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var responseIP;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return fetch(\"http://127.0.0.1:5000/brokerIP\");\n\n              case 2:\n                responseIP = _context5.sent;\n                _context5.next = 5;\n                return responseIP.json();\n\n              case 5:\n                _this5.mqtt_ip = _context5.sent;\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    }\n  },\n  computed: {\n    passwordConfirmationRule: function passwordConfirmationRule() {\n      var _this6 = this;\n\n      return function () {\n        return _this6.password === _this6.confirmPassword || \"Password must match\";\n      };\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkLA;AACAA;AAAA;AACAC,8BADA;AAEAC,oCAFA;AAGAC,qCAHA;AAIAC,gDAJA;AAKAC,mBALA;AAOAC,iBAPA;AAQAC,sBARA;AASAC,kBATA;AAUAC,yBAVA;AAWAC;AAAA;AAAA,QAXA;AAYAC;AAAA;AAAA,QAZA;AAcAC;AAAA;AAAA,QAdA;AAeAC,8BAfA;AAiBAC,yBAjBA;AAkBAC,kBAlBA;AAmBAC;AAAA;AAAA,QAnBA;AAqBAC,cACA;AACAC,uBADA;AAEAC,0BAFA;AAGAC,aAHA,mBAGA;AACAC;AACA;AACA;AANA,OADA,EASA;AACAH,0BADA;AAEAC,4BAFA;AAGAC,aAHA,mBAGA;AACAC;AACA;AACA;AANA,OATA,EAiBA;AACAH,yBADA;AAEAC,wBAFA;AAGAC,aAHA,mBAGA;AACAC;AACA;AACA;AANA,OAjBA;AArBA;AAAA,GADA;AAkDAC,SAlDA,qBAkDA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,GApDA;AAsDAC;AACAC,aADA,uBACA;AACA;AACA,KAHA;AAIAC,eAJA,uBAIAC,KAJA,EAIA;AACA;AACA,KANA;AAOAC,mBAPA,6BAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,oBADA,GACAC;AAAArB;AAAA,kBADA;AAAA;AAAA,uBAEAsB;AACAC,iCADA;AAEAC;AAAA;AAAA,mBAFA;AAGAC;AAHA,kBAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,KAfA;AAgBAC,iBAhBA,2BAgBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAN,oBADA,GACAC;AAAAM;AAAA,kBADA;AAAA;AAAA,uBAEAL;AACAC,iCADA;AAEAC;AAAA;AAAA,mBAFA;AAGAC;AAHA,kBAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,KAvBA;AAwBAG,kBAxBA,4BAwBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAR,oBADA,GACAC;AAAAQ;AAAA,kBADA;AAAA;AAAA,uBAEAP;AACAC,iCADA;AAEAC;AAAA;AAAA,mBAFA;AAGAC;AAHA,kBAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,KA/BA;AAgCAK,eAhCA,yBAgCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAR,uCADA;;AAAA;AACAS,0BADA;AAAA;AAAA,uBAEAA,iBAFA;;AAAA;AAEA,8BAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAnCA,GAtDA;AA4FAC;AACAC,4BADA,sCACA;AAAA;;AACA;AAAA,eACA,mEADA;AAAA;AAEA;AAJA;AA5FA","names":["data","snackbar_password","text_pass","text_mqtt","text_sensors","timeout","valid","valid_mqtt","password","confirmPassword","passwordRules","confirmPasswordRules","mqttRules","mqtt_ip","valid_sensors","n_sensors","SensorsRules","items","title","icon","click","console","mounted","methods","clickLogo","handleClick","index","submit_password","file","JSON","fetch","method","headers","body","submit_mqttIp","Broker_IP","submit_sensors","Sensors","getBrokerIP","responseIP","computed","passwordConfirmationRule"],"sourceRoot":"src/views","sources":["Settings.vue"],"sourcesContent":["<template>\n  <div>\n    <v-app-bar color=\"transparent\" dark elevation=\"0\">\n      <v-img\n        max-height=\"35\"\n        max-width=\"35\"\n        src=\"../assets/logo_simple.png\"\n        @click=\"clickLogo()\"\n      ></v-img>\n      <v-toolbar-title class=\"ml-4\">Settings</v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-menu transition=\"slide-y-transition\" offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n        </template>\n\n        <v-list>\n          <v-list-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            @click=\"handleClick(index)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ item.title }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n    </v-app-bar>\n\n    <v-card>\n      <v-card-title class=\"text-h4 font-weight-bold\">\n        Administrator\n      </v-card-title>\n      <v-space></v-space>\n\n      <div class=\"ml-3\">\n        <v-card-subtitle class=\"text-h6 font-weight-medium\">\n          Change Password\n        </v-card-subtitle>\n\n        <v-card-text>\n          <v-form v-model=\"valid\">\n            <v-row>\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"password\"\n                  type=\"password\"\n                  :rules=\"passwordRules\"\n                  label=\"Set new password\"\n                  required\n                ></v-text-field>\n              </v-col>\n\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"confirmPassword\"\n                  type=\"password\"\n                  :rules=\"confirmPasswordRules.concat(passwordConfirmationRule)\"\n                  label=\"Confirm new password\"\n                  required\n                ></v-text-field>\n              </v-col>\n            </v-row>\n          </v-form>\n        </v-card-text>\n        <v-card-action>\n          <v-btn class=\"ml-4\" :disabled=\"!valid\" @click=\"submit_password;snackbar = true;\">\n            submit\n          </v-btn>\n        </v-card-action>\n\n        <v-row class=\"mt-8\">\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium\">\n              MQTT Broker Configuration\n            </v-card-subtitle>\n\n            <v-card-text>\n              <p class=\"text-h6 font-weight-medium mt-8\">\n                Change MQTT Broker IP\n              </p>\n              <v-form v-model=\"valid_mqtt\">\n                <v-text-field\n                  v-model=\"mqtt_ip\"\n                  label=\"Set new broker IP\"\n                  required\n                  :rules=\"mqttRules\"\n                ></v-text-field>\n              </v-form>\n            </v-card-text>\n\n            <v-card-action>\n              <v-btn\n                class=\"ml-4 mb-6\"\n                :disabled=\"!valid_mqtt\"\n                @click=\"submit_mqttIp\"\n              >\n                submit\n              </v-btn>\n            </v-card-action>\n          </v-col>\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium mt-3\">\n              Sensors Configuration\n            </v-card-subtitle>\n\n            <v-card-text class=\"ma\">\n              <p class=\"text-h6 font-weight-medium mt-8\">\n                Change sensors number\n              </p>\n              <v-form v-model=\"valid_sensors\">\n                <v-text-field\n                  v-model=\"n_sensors\"\n                  label=\"Enter number of sensors\"\n                  required\n                  :rules=\"SensorsRules\"\n                ></v-text-field>\n              </v-form>\n            </v-card-text>\n\n            <v-card-action>\n              <v-btn\n                class=\"ml-4 mb-6\"\n                :disabled=\"!valid_sensors\"\n                @click=\"submit_sensors\"\n              >\n                submit\n              </v-btn>\n            </v-card-action>\n          </v-col>\n\n          <v-col> </v-col>\n        </v-row>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_password\" :timeout=\"timeout\">\n            {{ text }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_password\" :timeout=\"timeout\">\n            {{ text }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_password\" :timeout=\"timeout\">\n            {{ text }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n      </div>\n    </v-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  data: () => ({\n    snackbar_password: false,\n    text_pass: \"Password changed!\",\n    text_mqtt: \"Broker IP changed!\",\n    text_sensors: \"Number of sensors changed!\",\n    timeout: 4000,\n\n    valid: true,\n    valid_mqtt: true,\n    password: \"\",\n    confirmPassword: \"\",\n    passwordRules: [(v) => !!v || \"Password is required\"],\n    confirmPasswordRules: [(v) => !!v || \"Password is required\"],\n\n    mqttRules: [(v) => !!v || \"Cannot be empty\"],\n    mqtt_ip: \"192.168.1.199\",\n\n    valid_sensors: true,\n    n_sensors: 1,\n    SensorsRules: [(v) => !!v || \"Cannot be empty\"],\n\n    items: [\n      {\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click() {\n          console.log(\"logout\");\n          this.$router.push(\"/\");\n        },\n      },\n      {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n        click() {\n          console.log(\"processes\");\n          this.$router.push(\"processes\");\n        },\n      },\n      {\n        title: \"Settings\",\n        icon: \"mdi-cogs\",\n        click() {\n          console.log(\"settings\");\n          this.$router.push(\"settings\");\n        },\n      },\n    ],\n  }),\n\n  async mounted() {\n    this.getBrokerIP();\n  },\n\n  methods: {\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    async submit_password() {\n      const file = JSON.stringify({ password: this.confirmPassword });\n      await fetch(`http://127.0.0.1:5000/settings`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n      \n    },\n    async submit_mqttIp() {\n      const file = JSON.stringify({ Broker_IP: this.mqtt_ip });\n      await fetch(`http://127.0.0.1:5000/settings`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n    },\n    async submit_sensors() {\n      const file = JSON.stringify({ Sensors: this.n_sensors });\n      await fetch(`http://127.0.0.1:5000/settings`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n    },\n    async getBrokerIP() {\n      const responseIP = await fetch(\"http://127.0.0.1:5000/brokerIP\");\n      this.mqtt_ip = await responseIP.json();\n    },\n  },\n\n  computed: {\n    passwordConfirmationRule() {\n      return () =>\n        this.password === this.confirmPassword || \"Password must match\";\n    },\n  },\n};\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module"}