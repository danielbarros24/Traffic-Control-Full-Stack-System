{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\nexport var DoubleParkComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(DoubleParkComponent, _Rete$Component);\n\n  var _super = _createSuper(DoubleParkComponent);\n\n  function DoubleParkComponent() {\n    var _this;\n\n    _classCallCheck(this, DoubleParkComponent);\n\n    _this = _super.call(this, \"Double-Park\");\n    _this.data.component = Node;\n    return _this;\n  }\n\n  _createClass(DoubleParkComponent, [{\n    key: \"builder\",\n    value: function () {\n      var _builder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node) {\n        var responseZones, zones, array, out1;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://127.0.0.1:5000/settings-zones\");\n\n              case 2:\n                responseZones = _context.sent;\n                _context.next = 5;\n                return responseZones.json();\n\n              case 5:\n                zones = _context.sent;\n                array = zones.Zones;\n                console.log(array);\n                out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n                return _context.abrupt(\"return\", node.addControl(new SelectControl(this.editor, 'type1', zones.map(function (value) {\n                  return {\n                    text: \"Sensor \".concat(value),\n                    value: value\n                  };\n                }), \"Zone\")).addControl(new SelectControl(this.editor, 'type', [{\n                  text: 'All',\n                  value: 'ALL'\n                }, {\n                  text: 'Car',\n                  value: 'CAR'\n                }, {\n                  text: 'Truck',\n                  value: 'TRUCK'\n                }, {\n                  text: 'Bike',\n                  value: 'BIKE'\n                }], \"Vehicle Type\")).addOutput(out1));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function builder(_x) {\n        return _builder.apply(this, arguments);\n      }\n\n      return builder;\n    }()\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['num'] = node.data.num;\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var zone = node.data.type1;\n      var vehicleType = node.data.type;\n      return {\n        \"doublePark\": [zone, vehicleType]\n      };\n    }\n  }]);\n\n  return DoubleParkComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/variables/DoubleParkComponent.js"],"names":["Rete","Socket","SelectControl","Node","DoubleParkComponent","data","component","node","fetch","responseZones","json","zones","array","Zones","console","log","out1","Output","boolean","addControl","editor","map","value","text","addOutput","inputs","outputs","num","zone","type1","vehicleType","type","Component"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AAEA,SAASC,aAAT,QAA8B,oDAA9B;AACA,OAAOC,IAAP,MAAiB,wEAAjB;AAEA,WAAaC,mBAAb;AAAA;;AAAA;;AACI,iCAAa;AAAA;;AAAA;;AACT,8BAAM,aAAN;AACA,UAAKC,IAAL,CAAUC,SAAV,GAAsBH,IAAtB;AAFS;AAGZ;;AAJL;AAAA;AAAA;AAAA,6EAMI,iBAAcI,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEgCC,KAAK,CAAC,sCAAD,CAFrC;;AAAA;AAEUC,gBAAAA,aAFV;AAAA;AAAA,uBAGwBA,aAAa,CAACC,IAAd,EAHxB;;AAAA;AAGUC,gBAAAA,KAHV;AAKUC,gBAAAA,KALV,GAKkBD,KAAK,CAACE,KALxB;AAMIC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACII,gBAAAA,IAPR,GAOe,IAAIhB,IAAI,CAACiB,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8BhB,MAAM,CAACiB,OAArC,CAPf;AAAA,iDAQWX,IAAI,CAENY,UAFE,CAES,IAAIjB,aAAJ,CAAkB,KAAKkB,MAAvB,EAA+B,OAA/B,EAAwCT,KAAK,CAACU,GAAN,CAAU,UAACC,KAAD;AAAA,yBAAY;AACtEC,oBAAAA,IAAI,mBAAYD,KAAZ,CADkE;AAC7CA,oBAAAA,KAAK,EAAEA;AADsC,mBAAZ;AAAA,iBAAV,CAAxC,EAEL,MAFK,CAFT,EAKFH,UALE,CAKS,IAAIjB,aAAJ,CAAkB,KAAKkB,MAAvB,EAA+B,MAA/B,EAAuC,CAC/C;AAAEG,kBAAAA,IAAI,EAAE,KAAR;AAAeD,kBAAAA,KAAK,EAAE;AAAtB,iBAD+C,EAE/C;AAAEC,kBAAAA,IAAI,EAAE,KAAR;AAAeD,kBAAAA,KAAK,EAAE;AAAtB,iBAF+C,EAG/C;AAAEC,kBAAAA,IAAI,EAAE,OAAR;AAAiBD,kBAAAA,KAAK,EAAE;AAAxB,iBAH+C,EAI/C;AAAEC,kBAAAA,IAAI,EAAE,MAAR;AAAgBD,kBAAAA,KAAK,EAAE;AAAvB,iBAJ+C,CAAvC,EAKP,cALO,CALT,EAWJE,SAXI,CAWMR,IAXN,CARX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WA4BI,gBAAOT,IAAP,EAAakB,MAAb,EAAqBC,OAArB,EAA8B;AAC1BA,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBnB,IAAI,CAACF,IAAL,CAAUsB,GAA3B;AACH;AA9BL;AAAA;AAAA,WAgCI,qBAAYpB,IAAZ,EAAkB;AACd,UAAMqB,IAAI,GAAGrB,IAAI,CAACF,IAAL,CAAUwB,KAAvB;AACA,UAAMC,WAAW,GAAGvB,IAAI,CAACF,IAAL,CAAU0B,IAA9B;AAEA,aAAO;AACH,sBAAc,CAAEH,IAAF,EAAQE,WAAR;AADX,OAAP;AAGH;AAvCL;;AAAA;AAAA,EAAyC9B,IAAI,CAACgC,SAA9C","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\n\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\n\nexport class DoubleParkComponent extends Rete.Component {\n    constructor(){\n        super(\"Double-Park\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n\n        const responseZones = await fetch(\"http://127.0.0.1:5000/settings-zones\");\n        const zones = await responseZones.json();\n\n        const array = zones.Zones\n        console.log(array)\n        var out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n        return node\n\n            .addControl(new SelectControl(this.editor, 'type1', zones.map((value) => ({\n                text: `Sensor ${value}`, value: value,\n              })), \"Zone\"))\n            .addControl(new SelectControl(this.editor, 'type', [\n                { text: 'All', value: 'ALL' },\n                { text: 'Car', value: 'CAR' },\n                { text: 'Truck', value: 'TRUCK' },\n                { text: 'Bike', value: 'BIKE' }\n              ], \"Vehicle Type\"))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.num;\n    }\n\n    toJsonLogic(node) {\n        const zone = node.data.type1;\n        const vehicleType = node.data.type;\n\n        return {\n            \"doublePark\": [ zone, vehicleType ] \n        }  \n    }\n}"]},"metadata":{},"sourceType":"module"}