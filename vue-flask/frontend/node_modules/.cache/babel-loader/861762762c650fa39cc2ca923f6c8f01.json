{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { consoleError } from \"vuetify/lib/util/console\";\nexport default {\n  data: function data() {\n    return {\n      snackbar_password: false,\n      snackbar_mqtt: false,\n      snackbar_sensors: false,\n      text_pass: \"Password changed!\",\n      text_mqtt: \"Broker IP changed! Please restart the system!\",\n      text_sensors: \"Number of sensors changed!\",\n      timeout: 4000,\n      valid: true,\n      valid_mqtt: true,\n      password: \"\",\n      confirmPassword: \"\",\n      passwordRules: [function (v) {\n        return !!v;\n      }],\n      confirmPasswordRules: [function (v) {\n        return !!v;\n      }],\n      mqttRules: [function (v) {\n        return !!v || \"Cannot be empty\";\n      }, function (v) {\n        return /\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b/.test(v) || \"Enter a valid IP address\";\n      }],\n      broker_ip: \"\",\n      valid_sensors: true,\n      n_sensors: \"1\",\n      SensorsRules: [function (v) {\n        return !!v || \"Cannot be empty\";\n      }],\n      items: [{\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click: function click() {\n          this.$router.push(\"/\");\n        }\n      }, {\n        title: \"Dashboard\",\n        icon: \"mdi-view-dashboard\",\n        click: function click() {\n          this.$router.push(\"dashboard\");\n        }\n      }, {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n        click: function click() {\n          this.$router.push(\"processes\");\n        }\n      }]\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getSensors();\n\n            case 2:\n              _context.next = 4;\n              return _this.getBrokerIP();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    clickLogo: function clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick: function handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    submit_password: function submit_password() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var password, file, response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                password = {\n                  password: _this2.confirmPassword\n                };\n                file = JSON.stringify(password);\n                _context2.next = 4;\n                return fetch(\"http://127.0.0.1:5000/settings\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 4:\n                response = _context2.sent;\n\n                if (!response.ok) {\n                  _this2.text_pass = \"An error has occured: \".concat(response.status);\n                } else {\n                  _this2.text_pass = \"Password changed!\";\n                }\n\n                _this2.password = \"\";\n                _this2.confirmPassword = \"\";\n\n                _this2.$refs.myForm.reset();\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    submit_mqttIp: function submit_mqttIp() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var broker, file, response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                broker = {\n                  Broker_IP: _this3.broker_ip\n                };\n                file = JSON.stringify(broker);\n                _context3.next = 4;\n                return fetch(\"http://127.0.0.1:5000/settings-broker\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 4:\n                response = _context3.sent;\n\n                if (!response.ok) {\n                  _this3.text_mqtt = \"An error has occured: \".concat(response.status);\n                } else {\n                  _this3.text_mqtt = \"Broker IP changed! Please restart the system!\";\n                }\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    submit_sensors: function submit_sensors() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var sensor, file, response;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                sensor = {\n                  Sensors: _this4.n_sensors\n                };\n                file = JSON.stringify(sensor);\n                _context4.next = 4;\n                return fetch(\"http://127.0.0.1:5000/settings-sensors\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 4:\n                response = _context4.sent;\n\n                if (!response.ok) {\n                  _this4.text_mqtt = \"An error has occured: \".concat(response.status);\n                } else {\n                  _this4.text_mqtt = \"Broker IP changed! Please restart the system!\";\n                }\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    getBrokerIP: function getBrokerIP() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var response, ip;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return fetch(\"http://127.0.0.1:5000/settings-broker\");\n\n              case 2:\n                response = _context5.sent;\n                _context5.next = 5;\n                return response.json();\n\n              case 5:\n                ip = _context5.sent;\n                _this5.broker_ip = ip.Broker;\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    getSensors: function getSensors() {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var response, number;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return fetch(\"http://127.0.0.1:5000/settings-sensors\");\n\n              case 2:\n                response = _context6.sent;\n                _context6.next = 5;\n                return response.json();\n\n              case 5:\n                number = _context6.sent;\n                _this6.n_sensors = number.Number;\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    }\n  },\n  computed: {\n    passwordConfirmationRule: function passwordConfirmationRule() {\n      var _this7 = this;\n\n      return function () {\n        return _this7.password === _this7.confirmPassword || \"Password must match\";\n      };\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["data","snackbar_password","snackbar_mqtt","snackbar_sensors","text_pass","text_mqtt","text_sensors","timeout","valid","valid_mqtt","password","confirmPassword","passwordRules","confirmPasswordRules","mqttRules","broker_ip","valid_sensors","n_sensors","SensorsRules","items","title","icon","click","mounted","methods","clickLogo","handleClick","index","submit_password","file","JSON","fetch","method","headers","body","response","submit_mqttIp","broker","Broker_IP","submit_sensors","sensor","Sensors","getBrokerIP","ip","getSensors","number","computed","passwordConfirmationRule"],"sourceRoot":"src/views","sources":["Settings.vue"],"sourcesContent":["<template>\n  <div>\n    <v-app-bar color=\"transparent\" dark elevation=\"0\">\n      <v-img\n        max-height=\"35\"\n        max-width=\"35\"\n        src=\"../assets/logo_simple.png\"\n        @click=\"clickLogo()\"\n      ></v-img>\n      <v-toolbar-title class=\"ml-4\">Settings</v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-menu transition=\"slide-y-transition\" offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n        </template>\n\n        <v-list>\n          <v-list-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            @click=\"handleClick(index)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ item.title }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n    </v-app-bar>\n\n    <v-card>\n      <v-card-title class=\"text-h4 font-weight-bold\">\n        Administrator\n      </v-card-title>\n      <v-space></v-space>\n\n      <div class=\"ml-3\">\n        <v-card-subtitle class=\"text-h6 font-weight-medium\">\n          Change Password\n        </v-card-subtitle>\n\n        <v-card-text>\n          <v-form v-model=\"valid\" ref=\"myForm\">\n            <v-row>\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"password\"\n                  type=\"password\"\n                  :rules=\"passwordRules\"\n                  label=\"Set new password\"\n                ></v-text-field>\n              </v-col>\n\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"confirmPassword\"\n                  type=\"password\"\n                  :rules=\"confirmPasswordRules.concat(passwordConfirmationRule)\"\n                  label=\"Confirm new password\"\n                ></v-text-field>\n              </v-col>\n            </v-row>\n          </v-form>\n        </v-card-text>\n        <v-card-action>\n          <v-btn\n            class=\"ml-4\"\n            :disabled=\"!valid\"\n            @click=\"\n              submit_password();\n              snackbar_password = true;\n            \"\n          >\n            submit\n          </v-btn>\n        </v-card-action>\n\n        <v-row class=\"mt-8\">\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium\">\n              MQTT Broker Configuration\n            </v-card-subtitle>\n\n            <v-card-text>\n              <v-form v-model=\"valid_mqtt\">\n                <v-text-field\n                  v-model=\"broker_ip\"\n                  label=\"Set new broker IP\"\n                  required\n                  :rules=\"mqttRules\"\n                ></v-text-field>\n              </v-form>\n            </v-card-text>\n\n            <v-card-action>\n              <v-btn\n                class=\"ml-4 mb-6\"\n                :disabled=\"!valid_mqtt\"\n                @click=\"\n                  submit_mqttIp();\n                  snackbar_mqtt = true;\n                \"\n              >\n                submit\n              </v-btn>\n            </v-card-action>\n          </v-col>\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium mt-3\">\n              Sensors Configuration\n            </v-card-subtitle>\n\n            <v-card-text class=\"ma\">\n              <template>\n                <v-simple-table>\n                  <template v-slot:default>\n                    <thead>\n                      <tr>\n                        <th class=\"text-left\">Sensors</th>\n                        <th class=\"text-left\">Number of lanes</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr v-for=\"item in desserts\" :key=\"item.name\">\n                        <td>{{ item.name }}</td>\n                        <td>{{ item.calories }}</td>\n                      </tr>\n                    </tbody>\n                  </template>\n                </v-simple-table>\n              </template></v-card-text\n            ></v-col\n          ></v-row\n        >\n      </div></v-card\n    >\n  </div>\n</template>\n            </v-card-text>\n\n            <v-card-action>\n              <v-btn\n                class=\"ml-4 mb-6\"\n                :disabled=\"!valid_sensors\"\n                @click=\"submit_sensors();snackbar_sensors = true;\"\n              >\n                submit\n              </v-btn>\n            </v-card-action>\n          </v-col>\n\n          <v-col> </v-col>\n        </v-row>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_password\" :timeout=\"timeout\">\n            {{ text_pass }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar_password = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_mqtt\" :timeout=\"timeout\">\n            {{ text_mqtt }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar_mqtt = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_sensors\" :timeout=\"timeout\">\n            {{ text_sensors }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar_sensors = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n      </div>\n    </v-card>\n  </div>\n</template>\n\n<script>\nimport { consoleError } from \"vuetify/lib/util/console\";\n\nexport default {\n  data: () => ({\n    snackbar_password: false,\n    snackbar_mqtt: false,\n    snackbar_sensors: false,\n    text_pass: \"Password changed!\",\n    text_mqtt: \"Broker IP changed! Please restart the system!\",\n    text_sensors: \"Number of sensors changed!\",\n    timeout: 4000,\n\n    valid: true,\n    valid_mqtt: true,\n    password: \"\",\n    confirmPassword: \"\",\n    passwordRules: [(v) => !!v],\n    confirmPasswordRules: [(v) => !!v],\n\n    mqttRules: [\n      (v) => !!v || \"Cannot be empty\",\n      (v) =>\n        /\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b/.test(v) ||\n        \"Enter a valid IP address\",\n    ],\n\n    broker_ip: \"\",\n\n    valid_sensors: true,\n    n_sensors: \"1\",\n    SensorsRules: [(v) => !!v || \"Cannot be empty\"],\n\n    items: [\n      {\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click() {\n          this.$router.push(\"/\");\n        },\n      },\n      {\n        title: \"Dashboard\",\n        icon: \"mdi-view-dashboard\",\n        click() {\n          this.$router.push(\"dashboard\");\n        },\n      },\n      {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n        click() {\n          this.$router.push(\"processes\");\n        },\n      },\n    ],\n  }),\n\n  async mounted() {\n    await this.getSensors();\n    await this.getBrokerIP();\n  },\n\n  methods: {\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    async submit_password() {\n      const password = {\n        password: this.confirmPassword,\n      };\n      const file = JSON.stringify(password);\n      const response = await fetch(`http://127.0.0.1:5000/settings`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n      if (!response.ok) {\n        this.text_pass = `An error has occured: ${response.status}`;\n      } else {\n        this.text_pass = \"Password changed!\";\n      }\n\n      this.password = \"\";\n      this.confirmPassword = \"\";\n      this.$refs.myForm.reset();\n    },\n    async submit_mqttIp() {\n      const broker = {\n        Broker_IP: this.broker_ip,\n      };\n      const file = JSON.stringify(broker);\n      const response = await fetch(`http://127.0.0.1:5000/settings-broker`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n\n      if (!response.ok) {\n        this.text_mqtt = `An error has occured: ${response.status}`;\n      } else {\n        this.text_mqtt = \"Broker IP changed! Please restart the system!\";\n      }\n    },\n\n    async submit_sensors() {\n      const sensor = {\n        Sensors: this.n_sensors,\n      };\n      const file = JSON.stringify(sensor);\n      const response = await fetch(`http://127.0.0.1:5000/settings-sensors`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n\n      if (!response.ok) {\n        this.text_mqtt = `An error has occured: ${response.status}`;\n      } else {\n        this.text_mqtt = \"Broker IP changed! Please restart the system!\";\n      }\n    },\n    async getBrokerIP() {\n      const response = await fetch(\"http://127.0.0.1:5000/settings-broker\");\n      const ip = await response.json();\n      this.broker_ip = ip.Broker;\n    },\n\n    async getSensors() {\n      const response = await fetch(\"http://127.0.0.1:5000/settings-sensors\");\n      const number = await response.json();\n      this.n_sensors = number.Number;\n    },\n  },\n\n  computed: {\n    passwordConfirmationRule() {\n      return () =>\n        this.password === this.confirmPassword || \"Password must match\";\n    },\n  },\n};\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module"}