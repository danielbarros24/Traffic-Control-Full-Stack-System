{"ast":null,"code":"import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\nimport Node from \"rete-vue-render-plugin/src/end/Node.vue\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport { SwitchControl } from \"@/node-editor/controls/SwitchControl/SwitchControl\";\nexport class GpioComponent extends Rete.Component {\n  constructor() {\n    super(\"GPIO\");\n    this.data.component = Node;\n  }\n\n  async builder(node) {\n    const responseGpios = await fetch(\"http://192.168.1.216:5000/pins\");\n    const jsonGpios = await responseGpios.json();\n    var input = new Rete.Input('num', \"Input\", Socket.boolean, true);\n    return node.addInput(input).addControl(new SelectControl(this.editor, 'type1', jsonGpios.map(value => ({\n      text: `GPIO ${value}`,\n      value: value\n    })), \"GPIO\")).addControl(new SwitchControl(this.editor, 'type'));\n  }\n\n  worker(node, inputs, outputs) {}\n\n  toJsonLogic(node) {\n    const {\n      inputs\n    } = node;\n\n    if (inputs.length == 0) {\n      return {};\n    }\n\n    const inputNum = inputs.get('num');\n    const {\n      connections\n    } = inputNum;\n\n    if (connections.length == 0) {\n      return {};\n    }\n\n    const connection = connections[0];\n    const connectionNode = connection.output.node;\n    const connectionComponent = this.editor.getComponent(connectionNode.name);\n    return connectionComponent.toJsonLogic?.(connectionNode);\n  }\n\n  toGPIO(node) {\n    const gpio = parseInt(node.data.type1);\n    const inverted = node.data.type;\n    return {\n      gpio,\n      inverted\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/GpioComponent.js"],"names":["Rete","Socket","Node","SelectControl","SwitchControl","GpioComponent","Component","constructor","data","component","builder","node","responseGpios","fetch","jsonGpios","json","input","Input","boolean","addInput","addControl","editor","map","value","text","worker","inputs","outputs","toJsonLogic","length","inputNum","get","connections","connection","connectionNode","output","connectionComponent","getComponent","name","toGPIO","gpio","parseInt","type1","inverted","type"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAEA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,SAASC,aAAT,QAA8B,oDAA9B;AACA,SAASC,aAAT,QAA8B,oDAA9B;AAEA,OAAO,MAAMC,aAAN,SAA4BL,IAAI,CAACM,SAAjC,CAA2C;AAC9CC,EAAAA,WAAW,GAAE;AACT,UAAM,MAAN;AACA,SAAKC,IAAL,CAAUC,SAAV,GAAsBP,IAAtB;AACH;;AAEY,QAAPQ,OAAO,CAACC,IAAD,EAAO;AAClB,UAAMC,aAAa,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAAjC;AACA,UAAMC,SAAS,GAAG,MAAMF,aAAa,CAACG,IAAd,EAAxB;AAGE,QAAIC,KAAK,GAAG,IAAIhB,IAAI,CAACiB,KAAT,CAAe,KAAf,EAAsB,OAAtB,EAA+BhB,MAAM,CAACiB,OAAtC,EAA+C,IAA/C,CAAZ;AACA,WAAOP,IAAI,CACRQ,QADI,CACKH,KADL,EAEJI,UAFI,CAEO,IAAIjB,aAAJ,CAAkB,KAAKkB,MAAvB,EAA+B,OAA/B,EAAwCP,SAAS,CAACQ,GAAV,CAAeC,KAAD,KAAY;AAC5EC,MAAAA,IAAI,EAAG,QAAOD,KAAM,EADwD;AACrDA,MAAAA,KAAK,EAAEA;AAD8C,KAAZ,CAAd,CAAxC,EAEP,MAFO,CAFP,EAKJH,UALI,CAKO,IAAIhB,aAAJ,CAAkB,KAAKiB,MAAvB,EAA+B,MAA/B,CALP,CAAP;AAMH;;AAEDI,EAAAA,MAAM,CAACd,IAAD,EAAOe,MAAP,EAAeC,OAAf,EAAwB,CAC7B;;AAEDC,EAAAA,WAAW,CAACjB,IAAD,EAAO;AACd,UAAM;AAAEe,MAAAA;AAAF,QAAaf,IAAnB;;AAEA,QAAIe,MAAM,CAACG,MAAP,IAAiB,CAArB,EAAwB;AACpB,aAAO,EAAP;AACH;;AAED,UAAMC,QAAQ,GAAGJ,MAAM,CAACK,GAAP,CAAW,KAAX,CAAjB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkBF,QAAxB;;AAEA,QAAIE,WAAW,CAACH,MAAZ,IAAsB,CAA1B,EAA6B;AACzB,aAAO,EAAP;AACH;;AAED,UAAMI,UAAU,GAAGD,WAAW,CAAC,CAAD,CAA9B;AACA,UAAME,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkBxB,IAAzC;AACA,UAAMyB,mBAAmB,GAAG,KAAKf,MAAL,CAAYgB,YAAZ,CAAyBH,cAAc,CAACI,IAAxC,CAA5B;AAEA,WAAOF,mBAAmB,CAACR,WAApB,GAAkCM,cAAlC,CAAP;AACH;;AAEDK,EAAAA,MAAM,CAAC5B,IAAD,EAAO;AACT,UAAM6B,IAAI,GAAGC,QAAQ,CAAC9B,IAAI,CAACH,IAAL,CAAUkC,KAAX,CAArB;AACA,UAAMC,QAAQ,GAAGhC,IAAI,CAACH,IAAL,CAAUoC,IAA3B;AAEA,WAAO;AAACJ,MAAAA,IAAD;AAAOG,MAAAA;AAAP,KAAP;AACH;;AAjD6C","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\n\nimport Node from \"rete-vue-render-plugin/src/end/Node.vue\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport { SwitchControl } from \"@/node-editor/controls/SwitchControl/SwitchControl\";\n\nexport class GpioComponent extends Rete.Component {\n    constructor(){\n        super(\"GPIO\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n      const responseGpios = await fetch(\"http://192.168.1.216:5000/pins\");\n      const jsonGpios = await responseGpios.json();\n\n      \n        var input = new Rete.Input('num', \"Input\", Socket.boolean, true);\n        return node\n          .addInput(input)\n          .addControl(new SelectControl(this.editor, 'type1', jsonGpios.map((value) => ({\n            text: `GPIO ${value}`, value: value,\n          })), \"GPIO\"))\n          .addControl(new SwitchControl(this.editor, 'type'))\n    }\n\n    worker(node, inputs, outputs) {\n    }\n\n    toJsonLogic(node) {\n        const { inputs } = node;\n\n        if (inputs.length == 0) {\n            return {};\n        }\n\n        const inputNum = inputs.get('num')\n        const { connections } = inputNum;\n\n        if (connections.length == 0) {\n            return {};\n        }\n\n        const connection = connections[0];\n        const connectionNode = connection.output.node;\n        const connectionComponent = this.editor.getComponent(connectionNode.name);\n\n        return connectionComponent.toJsonLogic?.(connectionNode);\n    }\n\n    toGPIO(node) {\n        const gpio = parseInt(node.data.type1)\n        const inverted = node.data.type\n\n        return {gpio, inverted}\n    }\n}"]},"metadata":{},"sourceType":"module"}