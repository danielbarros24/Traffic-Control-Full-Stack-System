{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { consoleError } from 'vuetify/lib/util/console';\nexport default {\n  data: function data() {\n    return {\n      //TABLE\n      dialog: false,\n      dialogDelete: false,\n      headers: [{\n        text: 'Dessert (100g serving)',\n        align: 'start',\n        sortable: false,\n        value: 'name'\n      }, {\n        text: 'Calories',\n        value: 'calories'\n      }, {\n        text: 'Fat (g)',\n        value: 'fat'\n      }, {\n        text: 'Carbs (g)',\n        value: 'carbs'\n      }, {\n        text: 'Protein (g)',\n        value: 'protein'\n      }, {\n        text: 'Actions',\n        value: 'actions',\n        sortable: false\n      }],\n      desserts: [],\n      editedIndex: -1,\n      editedItem: {\n        name: '',\n        calories: 0,\n        fat: 0,\n        carbs: 0,\n        protein: 0\n      },\n      defaultItem: {\n        name: '',\n        calories: 0,\n        fat: 0,\n        carbs: 0,\n        protein: 0\n      },\n      ////////////\n      snackbar_password: false,\n      snackbar_mqtt: false,\n      snackbar_sensors: false,\n      text_pass: \"Password changed!\",\n      text_mqtt: \"Broker IP changed! Please restart the system!\",\n      text_sensors: \"Number of sensors changed!\",\n      timeout: 4000,\n      valid: true,\n      valid_mqtt: true,\n      password: \"\",\n      confirmPassword: \"\",\n      passwordRules: [function (v) {\n        return !!v;\n      }],\n      confirmPasswordRules: [function (v) {\n        return !!v;\n      }],\n      mqttRules: [function (v) {\n        return !!v || \"Cannot be empty\";\n      }, function (v) {\n        return /\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b/.test(v) || 'Enter a valid IP address';\n      }],\n      broker_ip: \"\",\n      valid_sensors: true,\n      n_sensors: \"1\",\n      SensorsRules: [function (v) {\n        return !!v || \"Cannot be empty\";\n      }],\n      items: [{\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click: function click() {\n          this.$router.push(\"/\");\n        }\n      }, {\n        title: \"Dashboard\",\n        icon: \"mdi-view-dashboard\",\n        click: function click() {\n          this.$router.push(\"dashboard\");\n        }\n      }, {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n        click: function click() {\n          this.$router.push(\"processes\");\n        }\n      }]\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getSensors();\n\n            case 2:\n              _context.next = 4;\n              return _this.getBrokerIP();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    initialize: function initialize() {\n      this.desserts = [{\n        name: 'Frozen Yogurt',\n        calories: 159,\n        fat: 6.0,\n        carbs: 24,\n        protein: 4.0\n      }];\n    },\n    clickLogo: function clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick: function handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    submit_password: function submit_password() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var password, file, response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                password = {\n                  password: _this2.confirmPassword\n                };\n                file = JSON.stringify(password);\n                _context2.next = 4;\n                return fetch(\"http://127.0.0.1:5000/settings\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 4:\n                response = _context2.sent;\n\n                if (!response.ok) {\n                  _this2.text_pass = \"An error has occured: \".concat(response.status);\n                } else {\n                  _this2.text_pass = \"Password changed!\";\n                }\n\n                _this2.password = \"\";\n                _this2.confirmPassword = \"\";\n\n                _this2.$refs.myForm.reset();\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    submit_mqttIp: function submit_mqttIp() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var broker, file, response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                broker = {\n                  Broker_IP: _this3.broker_ip\n                };\n                file = JSON.stringify(broker);\n                _context3.next = 4;\n                return fetch(\"http://127.0.0.1:5000/settings-broker\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 4:\n                response = _context3.sent;\n\n                if (!response.ok) {\n                  _this3.text_mqtt = \"An error has occured: \".concat(response.status);\n                } else {\n                  _this3.text_mqtt = \"Broker IP changed! Please restart the system!\";\n                }\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    submit_sensors: function submit_sensors() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var sensor, file, response;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                sensor = {\n                  Sensors: _this4.n_sensors\n                };\n                file = JSON.stringify(sensor);\n                _context4.next = 4;\n                return fetch(\"http://127.0.0.1:5000/settings-sensors\", {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 4:\n                response = _context4.sent;\n\n                if (!response.ok) {\n                  _this4.text_mqtt = \"An error has occured: \".concat(response.status);\n                } else {\n                  _this4.text_mqtt = \"Broker IP changed! Please restart the system!\";\n                }\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    getBrokerIP: function getBrokerIP() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var response, ip;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return fetch(\"http://127.0.0.1:5000/settings-broker\");\n\n              case 2:\n                response = _context5.sent;\n                _context5.next = 5;\n                return response.json();\n\n              case 5:\n                ip = _context5.sent;\n                _this5.broker_ip = ip.Broker;\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    getSensors: function getSensors() {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var response, number;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return fetch(\"http://127.0.0.1:5000/settings-sensors\");\n\n              case 2:\n                response = _context6.sent;\n                _context6.next = 5;\n                return response.json();\n\n              case 5:\n                number = _context6.sent;\n                _this6.n_sensors = number.Number;\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    }\n  },\n  computed: {\n    formTitle: function formTitle() {\n      return this.editedIndex === -1 ? 'New Item' : 'Edit Item';\n    },\n    passwordConfirmationRule: function passwordConfirmationRule() {\n      var _this7 = this;\n\n      return function () {\n        return _this7.password === _this7.confirmPassword || \"Password must match\";\n      };\n    }\n  },\n  watch: {\n    dialog: function dialog(val) {\n      val || this.close();\n    },\n    dialogDelete: function dialogDelete(val) {\n      val || this.closeDelete();\n    }\n  },\n  created: function created() {\n    this.initialize();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2TA;AAEA;AACAA;AAAA;AACA;AACAC,mBAFA;AAGAC,yBAHA;AAIAC,gBACA;AACAC,sCADA;AAEAC,sBAFA;AAGAC,uBAHA;AAIAC;AAJA,OADA,EAOA;AAAAH;AAAAG;AAAA,OAPA,EAQA;AAAAH;AAAAG;AAAA,OARA,EASA;AAAAH;AAAAG;AAAA,OATA,EAUA;AAAAH;AAAAG;AAAA,OAVA,EAWA;AAAAH;AAAAG;AAAAD;AAAA,OAXA,CAJA;AAiBAE,kBAjBA;AAkBAC,qBAlBA;AAmBAC;AACAC,gBADA;AAEAC,mBAFA;AAGAC,cAHA;AAIAC,gBAJA;AAKAC;AALA,OAnBA;AA0BAC;AACAL,gBADA;AAEAC,mBAFA;AAGAC,cAHA;AAIAC,gBAJA;AAKAC;AALA,OA1BA;AAiCA;AAGAE,8BApCA;AAqCAC,0BArCA;AAsCAC,6BAtCA;AAuCAC,oCAvCA;AAwCAC,gEAxCA;AAyCAC,gDAzCA;AA0CAC,mBA1CA;AA4CAC,iBA5CA;AA6CAC,sBA7CA;AA8CAC,kBA9CA;AA+CAC,yBA/CA;AAgDAC;AAAA;AAAA,QAhDA;AAiDAC;AAAA;AAAA,QAjDA;AAmDAC,kBACA;AAAA;AAAA,OADA,EAEA;AAAA;AAAA,OAFA,CAnDA;AAuDAC,mBAvDA;AAyDAC,yBAzDA;AA0DAC,oBA1DA;AA2DAC;AAAA;AAAA,QA3DA;AA6DAC,cACA;AACAC,uBADA;AAEAC,0BAFA;AAGAC,aAHA,mBAGA;AACA;AACA;AALA,OADA,EAQA;AACAF,0BADA;AAEAC,kCAFA;AAGAC,aAHA,mBAGA;AACA;AACA;AALA,OARA,EAeA;AACAF,0BADA;AAEAC,4BAFA;AAGAC,aAHA,mBAGA;AACA;AACA;AALA,OAfA;AA7DA;AAAA,GADA;AAwFAC,SAxFA,qBAwFA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,kBADA;;AAAA;AAAA;AAAA,qBAEA,mBAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,GA3FA;AA6FAC;AAEAC,cAFA,wBAEA;AACA,uBACA;AACA9B,6BADA;AAEAC,qBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC;AALA,OADA;AASA,KAZA;AAaA2B,aAbA,uBAaA;AACA;AACA,KAfA;AAgBAC,eAhBA,uBAgBAC,KAhBA,EAgBA;AACA;AACA,KAlBA;AAmBAC,mBAnBA,6BAmBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAnB,wBADA,GACA;AACAA;AADA,iBADA;AAIAoB,oBAJA,GAIAC,wBAJA;AAAA;AAAA,uBAKAC;AACAC,iCADA;AAEA9C;AAAA;AAAA,mBAFA;AAGA+C;AAHA,kBALA;;AAAA;AAKAC,wBALA;;AAUA;AACA;AACA,iBAFA,MAGA;AACA;AACA;;AAEA;AACA;;AACA;;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA,KAxCA;AAyCAC,iBAzCA,2BAyCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,sBADA,GACA;AACAC;AADA,iBADA;AAIAR,oBAJA,GAIAC,sBAJA;AAAA;AAAA,uBAKAC;AACAC,iCADA;AAEA9C;AAAA;AAAA,mBAFA;AAGA+C;AAHA,kBALA;;AAAA;AAKAC,wBALA;;AAWA;AACA;AACA,iBAFA,MAGA;AACA;AACA;;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,KA1DA;AA4DAI,kBA5DA,4BA4DA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,sBADA,GACA;AACAC;AADA,iBADA;AAIAX,oBAJA,GAIAC,sBAJA;AAAA;AAAA,uBAKAC;AACAC,iCADA;AAEA9C;AAAA;AAAA,mBAFA;AAGA+C;AAHA,kBALA;;AAAA;AAKAC,wBALA;;AAWA;AACA;AACA,iBAFA,MAGA;AACA;AACA;;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,KA9EA;AA+EAO,eA/EA,yBA+EA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAV,8CADA;;AAAA;AACAG,wBADA;AAAA;AAAA,uBAEAA,eAFA;;AAAA;AAEAQ,kBAFA;AAGA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,KAnFA;AAqFAC,cArFA,wBAqFA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAZ,+CADA;;AAAA;AACAG,wBADA;AAAA;AAAA,uBAEAA,eAFA;;AAAA;AAEAU,sBAFA;AAGA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AA1FA,GA7FA;AA0LAC;AACAC,aADA,uBACA;AACA;AACA,KAHA;AAIAC,4BAJA,sCAIA;AAAA;;AACA;AAAA,eACA,mEADA;AAAA;AAEA;AAPA,GA1LA;AAoMAC;AACAhE,UADA,kBACAiE,GADA,EACA;AACAA;AACA,KAHA;AAIAhE,gBAJA,wBAIAgE,GAJA,EAIA;AACAA;AACA;AANA,GApMA;AA6MAC,SA7MA,qBA6MA;AACA;AACA;AA/MA","names":["data","dialog","dialogDelete","headers","text","align","sortable","value","desserts","editedIndex","editedItem","name","calories","fat","carbs","protein","defaultItem","snackbar_password","snackbar_mqtt","snackbar_sensors","text_pass","text_mqtt","text_sensors","timeout","valid","valid_mqtt","password","confirmPassword","passwordRules","confirmPasswordRules","mqttRules","broker_ip","valid_sensors","n_sensors","SensorsRules","items","title","icon","click","mounted","methods","initialize","clickLogo","handleClick","index","submit_password","file","JSON","fetch","method","body","response","submit_mqttIp","broker","Broker_IP","submit_sensors","sensor","Sensors","getBrokerIP","ip","getSensors","number","computed","formTitle","passwordConfirmationRule","watch","val","created"],"sourceRoot":"src/views","sources":["Settings.vue"],"sourcesContent":["<template>\n  <div>\n    <v-app-bar color=\"transparent\" dark elevation=\"0\">\n      <v-img\n        max-height=\"35\"\n        max-width=\"35\"\n        src=\"../assets/logo_simple.png\"\n        @click=\"clickLogo()\"\n      ></v-img>\n      <v-toolbar-title class=\"ml-4\">Settings</v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-menu transition=\"slide-y-transition\" offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n        </template>\n\n        <v-list>\n          <v-list-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            @click=\"handleClick(index)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ item.title }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n    </v-app-bar>\n\n    <v-card>\n      <v-card-title class=\"text-h4 font-weight-bold\">\n        Administrator\n      </v-card-title>\n      <v-space></v-space>\n\n      <div class=\"ml-3\">\n        <v-card-subtitle class=\"text-h6 font-weight-medium\">\n          Change Password\n        </v-card-subtitle>\n\n        <v-card-text>\n          <v-form v-model=\"valid\" ref=\"myForm\">\n            <v-row>\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"password\"\n                  type=\"password\"\n                  :rules=\"passwordRules\"\n                  label=\"Set new password\"\n                ></v-text-field>\n              </v-col>\n\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"confirmPassword\"\n                  type=\"password\"\n                  :rules=\"confirmPasswordRules.concat(passwordConfirmationRule)\"\n                  label=\"Confirm new password\"\n                ></v-text-field>\n              </v-col>\n            </v-row>\n          </v-form>\n        </v-card-text>\n        <v-card-action>\n          <v-btn class=\"ml-4\" :disabled=\"!valid\" @click=\"submit_password(); snackbar_password = true;\">\n            submit\n          </v-btn>\n        </v-card-action>\n\n        <v-row class=\"mt-8\">\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium\">\n              MQTT Broker Configuration\n            </v-card-subtitle>\n\n            <v-card-text>\n              <p class=\"text-h6 font-weight-medium mt-8\">\n                Change MQTT Broker IP\n              </p>\n              <v-form v-model=\"valid_mqtt\">\n                <v-text-field\n                  v-model=\"broker_ip\"\n                  label=\"Set new broker IP\"\n                  required\n                  :rules=\"mqttRules\"\n                ></v-text-field>\n              </v-form>\n            </v-card-text>\n\n            <v-card-action>\n              <v-btn\n                class=\"ml-4 mb-6\"\n                :disabled=\"!valid_mqtt\"\n                @click=\"submit_mqttIp();snackbar_mqtt = true;\"\n              >\n                submit\n              </v-btn>\n            </v-card-action>\n          </v-col>\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium mt-3\">\n              Sensors Configuration\n            </v-card-subtitle>\n\n\n            <v-data-table\n              :headers=\"headers\"\n              :items=\"desserts\"\n              sort-by=\"calories\"\n              class=\"elevation-1\"\n            >\n              <template v-slot:top>\n                <v-toolbar\n                  flat\n                >\n                  <v-toolbar-title>My CRUD</v-toolbar-title>\n                  <v-divider\n                    class=\"mx-4\"\n                    inset\n                    vertical\n                  ></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-dialog\n                    v-model=\"dialog\"\n                    max-width=\"500px\"\n                  >\n                    <template v-slot:activator=\"{ on, attrs }\">\n                      <v-btn\n                        color=\"primary\"\n                        dark\n                        class=\"mb-2\"\n                        v-bind=\"attrs\"\n                        v-on=\"on\"\n                      >\n                        New Item\n                      </v-btn>\n                    </template>\n                    <v-card>\n                      <v-card-title>\n                        <span class=\"text-h5\">{{ formTitle }}</span>\n                      </v-card-title>\n\n                      <v-card-text>\n                        <v-container>\n                          <v-row>\n                            <v-col\n                              cols=\"12\"\n                              sm=\"6\"\n                              md=\"4\"\n                            >\n                              <v-text-field\n                                v-model=\"editedItem.name\"\n                                label=\"Dessert name\"\n                              ></v-text-field>\n                            </v-col>\n                            <v-col\n                              cols=\"12\"\n                              sm=\"6\"\n                              md=\"4\"\n                            >\n                              <v-text-field\n                                v-model=\"editedItem.calories\"\n                                label=\"Calories\"\n                              ></v-text-field>\n                            </v-col>\n                            <v-col\n                              cols=\"12\"\n                              sm=\"6\"\n                              md=\"4\"\n                            >\n                              <v-text-field\n                                v-model=\"editedItem.fat\"\n                                label=\"Fat (g)\"\n                              ></v-text-field>\n                            </v-col>\n                            <v-col\n                              cols=\"12\"\n                              sm=\"6\"\n                              md=\"4\"\n                            >\n                              <v-text-field\n                                v-model=\"editedItem.carbs\"\n                                label=\"Carbs (g)\"\n                              ></v-text-field>\n                            </v-col>\n                            <v-col\n                              cols=\"12\"\n                              sm=\"6\"\n                              md=\"4\"\n                            >\n                              <v-text-field\n                                v-model=\"editedItem.protein\"\n                                label=\"Protein (g)\"\n                              ></v-text-field>\n                            </v-col>\n                          </v-row>\n                        </v-container>\n                      </v-card-text>\n\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn\n                          color=\"blue darken-1\"\n                          text\n                          @click=\"close\"\n                        >\n                          Cancel\n                        </v-btn>\n                        <v-btn\n                          color=\"blue darken-1\"\n                          text\n                          @click=\"save\"\n                        >\n                          Save\n                        </v-btn>\n                      </v-card-actions>\n                    </v-card>\n                  </v-dialog>\n                  <v-dialog v-model=\"dialogDelete\" max-width=\"500px\">\n                    <v-card>\n                      <v-card-title class=\"text-h5\">Are you sure you want to delete this item?</v-card-title>\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn color=\"blue darken-1\" text @click=\"closeDelete\">Cancel</v-btn>\n                        <v-btn color=\"blue darken-1\" text @click=\"deleteItemConfirm\">OK</v-btn>\n                        <v-spacer></v-spacer>\n                      </v-card-actions>\n                    </v-card>\n                  </v-dialog>\n                </v-toolbar>\n              </template>\n              <template v-slot:item.actions=\"{ item }\">\n                <v-icon\n                  small\n                  class=\"mr-2\"\n                  @click=\"editItem(item)\"\n                >\n                  mdi-pencil\n                </v-icon>\n                <v-icon\n                  small\n                  @click=\"deleteItem(item)\"\n                >\n                  mdi-delete\n                </v-icon>\n              </template>\n              <template v-slot:no-data>\n                <v-btn\n                  color=\"primary\"\n                  @click=\"initialize\"\n                >\n                  Reset\n                </v-btn>\n              </template>\n            </v-data-table>\n\n\n            <v-card-action>\n              <v-btn\n                class=\"ml-4 mb-6\"\n                :disabled=\"!valid_sensors\"\n                @click=\"submit_sensors();snackbar_sensors = true;\"\n              >\n                submit\n              </v-btn>\n            </v-card-action>\n          </v-col>\n\n          <v-col> </v-col>\n        </v-row>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_password\" :timeout=\"timeout\">\n            {{ text_pass }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar_password = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_mqtt\" :timeout=\"timeout\">\n            {{ text_mqtt }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar_mqtt = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_sensors\" :timeout=\"timeout\">\n            {{ text_sensors }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn color=\"blue\" text v-bind=\"attrs\" @click=\"snackbar_sensors = false\">\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n      </div>\n    </v-card>\n  </div>\n</template>\n\n<script>\nimport { consoleError } from 'vuetify/lib/util/console';\n\nexport default {\n  data: () => ({\n    //TABLE\n    dialog: false,\n    dialogDelete: false,\n    headers: [\n      {\n        text: 'Dessert (100g serving)',\n        align: 'start',\n        sortable: false,\n        value: 'name',\n      },\n      { text: 'Calories', value: 'calories' },\n      { text: 'Fat (g)', value: 'fat' },\n      { text: 'Carbs (g)', value: 'carbs' },\n      { text: 'Protein (g)', value: 'protein' },\n      { text: 'Actions', value: 'actions', sortable: false },\n    ],\n    desserts: [],\n    editedIndex: -1,\n    editedItem: {\n      name: '',\n      calories: 0,\n      fat: 0,\n      carbs: 0,\n      protein: 0,\n    },\n    defaultItem: {\n      name: '',\n      calories: 0,\n      fat: 0,\n      carbs: 0,\n      protein: 0,\n    },\n    ////////////\n\n\n    snackbar_password: false,\n    snackbar_mqtt: false,\n    snackbar_sensors: false,\n    text_pass: \"Password changed!\",\n    text_mqtt: \"Broker IP changed! Please restart the system!\",\n    text_sensors: \"Number of sensors changed!\",\n    timeout: 4000,\n\n    valid: true,\n    valid_mqtt: true,\n    password: \"\",\n    confirmPassword: \"\",\n    passwordRules: [(v) => !!v],\n    confirmPasswordRules: [(v) => !!v],\n\n    mqttRules: [\n      v => !!v || \"Cannot be empty\",\n      v =>  /\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b/.test(v) || 'Enter a valid IP address',],\n\n    broker_ip: \"\",\n\n    valid_sensors: true,\n    n_sensors: \"1\" ,\n    SensorsRules: [(v) => !!v || \"Cannot be empty\"],\n\n    items: [\n      {\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click() {\n          this.$router.push(\"/\");\n        },\n      },\n      {\n        title: \"Dashboard\",\n        icon: \"mdi-view-dashboard\",\n        click() {\n          this.$router.push(\"dashboard\");\n        },\n      },\n      {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n        click() {\n          this.$router.push(\"processes\");\n        },\n      },\n      \n    ],\n  }),\n\n  async mounted() {\n    await this.getSensors();\n    await this.getBrokerIP();\n  },\n\n  methods: {\n\n    initialize () {\n        this.desserts = [\n          {\n            name: 'Frozen Yogurt',\n            calories: 159,\n            fat: 6.0,\n            carbs: 24,\n            protein: 4.0,\n          },\n        ]\n      },\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    async submit_password() {\n      const password = {\n        password: this.confirmPassword\n      }\n      const file = JSON.stringify(password);\n      const response = await fetch(`http://127.0.0.1:5000/settings`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n      if (!response.ok) {\n          this.text_pass = `An error has occured: ${response.status}`\n        }\n      else {\n        this.text_pass = \"Password changed!\"\n      }\n\n      this.password = \"\"\n      this.confirmPassword = \"\"\n      this.$refs.myForm.reset();\n      \n    },\n    async submit_mqttIp() {\n      const broker = {\n        Broker_IP: this.broker_ip\n      }\n      const file = JSON.stringify(broker);\n      const response = await fetch(`http://127.0.0.1:5000/settings-broker`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n\n      if (!response.ok) {\n          this.text_mqtt = `An error has occured: ${response.status}`\n        }\n      else {\n        this.text_mqtt = \"Broker IP changed! Please restart the system!\"\n      }\n    },\n\n    async submit_sensors() {\n      const sensor = {\n        Sensors: this.n_sensors\n      }\n      const file = JSON.stringify(sensor);\n      const response = await fetch(`http://127.0.0.1:5000/settings-sensors`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n\n      if (!response.ok) {\n          this.text_mqtt = `An error has occured: ${response.status}`\n        }\n      else {\n        this.text_mqtt = \"Broker IP changed! Please restart the system!\"\n      }\n\n    },\n    async getBrokerIP() {\n      const response = await fetch(\"http://127.0.0.1:5000/settings-broker\");\n      const ip= await response.json();\n      this.broker_ip = ip.Broker;\n    },\n\n    async getSensors() {\n      const response = await fetch(\"http://127.0.0.1:5000/settings-sensors\");\n      const number = await response.json();\n      this.n_sensors = number.Number;\n      \n    },\n  },\n\n  computed: {\n    formTitle () {\n        return this.editedIndex === -1 ? 'New Item' : 'Edit Item'\n      },\n    passwordConfirmationRule() {\n      return () =>\n        this.password === this.confirmPassword || \"Password must match\";\n    },\n  },\n  \n  watch: {\n      dialog (val) {\n        val || this.close()\n      },\n      dialogDelete (val) {\n        val || this.closeDelete()\n      },\n    },\n\n    created () {\n      this.initialize()\n    },\n};\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module"}