{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\nexport var CrowdDetectionComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(CrowdDetectionComponent, _Rete$Component);\n\n  var _super = _createSuper(CrowdDetectionComponent);\n\n  function CrowdDetectionComponent() {\n    var _this;\n\n    _classCallCheck(this, CrowdDetectionComponent);\n\n    _this = _super.call(this, \"Crowd Detection\");\n    _this.data.component = Node;\n    return _this;\n  }\n\n  _createClass(CrowdDetectionComponent, [{\n    key: \"builder\",\n    value: function () {\n      var _builder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node) {\n        var responseZones, sensors, all, x, sensor, lanes, out1;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://127.0.0.1:5000/sensors\");\n\n              case 2:\n                responseZones = _context.sent;\n                _context.next = 5;\n                return responseZones.json();\n\n              case 5:\n                sensors = _context.sent;\n                all = [];\n\n                for (x in sensors) {\n                  sensor = sensors[x];\n                  lanes = sensor.lanes;\n                  all.push(sensor.name);\n                }\n\n                out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n                return _context.abrupt(\"return\", node.addControl(new SelectControl(this.editor, 'type1', all.map(function (value) {\n                  return {\n                    text: \"Sensor \".concat(value),\n                    value: \"\".concat(value[0])\n                  };\n                }), \"Zone\")).addOutput(out1));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function builder(_x) {\n        return _builder.apply(this, arguments);\n      }\n\n      return builder;\n    }()\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['num'] = node.data.num;\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var zone = node.data.type1;\n      return {\n        \"crowdDetection\": zone\n      };\n    }\n  }]);\n\n  return CrowdDetectionComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/variables/CrowdDetectionComponent.js"],"names":["Rete","Socket","SelectControl","Node","CrowdDetectionComponent","data","component","node","fetch","responseZones","json","sensors","all","x","sensor","lanes","push","name","out1","Output","boolean","addControl","editor","map","value","text","addOutput","inputs","outputs","num","zone","type1","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AAEA,SAASC,aAAT,QAA8B,oDAA9B;AACA,OAAOC,IAAP,MAAiB,wEAAjB;AAEA,WAAaC,uBAAb;AAAA;;AAAA;;AACI,qCAAa;AAAA;;AAAA;;AACT,8BAAM,iBAAN;AACA,UAAKC,IAAL,CAAUC,SAAV,GAAsBH,IAAtB;AAFS;AAGZ;;AAJL;AAAA;AAAA;AAAA,6EAMI,iBAAcI,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEgCC,KAAK,CAAC,+BAAD,CAFrC;;AAAA;AAEUC,gBAAAA,aAFV;AAAA;AAAA,uBAG0BA,aAAa,CAACC,IAAd,EAH1B;;AAAA;AAGUC,gBAAAA,OAHV;AAKUC,gBAAAA,GALV,GAKgB,EALhB;;AAQI,qBAAWC,CAAX,IAAgBF,OAAhB,EAAyB;AAEfG,kBAAAA,MAFe,GAENH,OAAO,CAACE,CAAD,CAFD;AAGfE,kBAAAA,KAHe,GAGPD,MAAM,CAACC,KAHA;AAKrBH,kBAAAA,GAAG,CAACI,IAAJ,CAASF,MAAM,CAACG,IAAhB;AAEH;;AAEGC,gBAAAA,IAjBR,GAiBe,IAAIlB,IAAI,CAACmB,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8BlB,MAAM,CAACmB,OAArC,CAjBf;AAAA,iDAkBWb,IAAI,CAENc,UAFE,CAES,IAAInB,aAAJ,CAAkB,KAAKoB,MAAvB,EAA+B,OAA/B,EAAwCV,GAAG,CAACW,GAAJ,CAAQ,UAACC,KAAD;AAAA,yBAAY;AACxEC,oBAAAA,IAAI,mBAAYD,KAAZ,CADoE;AAC/CA,oBAAAA,KAAK,YAAKA,KAAK,CAAC,CAAD,CAAV;AAD0C,mBAAZ;AAAA,iBAAR,CAAxC,EAET,MAFS,CAFT,EAKJE,SALI,CAKMR,IALN,CAlBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAgCI,gBAAOX,IAAP,EAAaoB,MAAb,EAAqBC,OAArB,EAA8B;AAC1BA,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBrB,IAAI,CAACF,IAAL,CAAUwB,GAA3B;AACH;AAlCL;AAAA;AAAA,WAoCI,qBAAYtB,IAAZ,EAAkB;AACd,UAAMuB,IAAI,GAAGvB,IAAI,CAACF,IAAL,CAAU0B,KAAvB;AAEA,aAAO;AACH,0BAAkBD;AADf,OAAP;AAGH;AA1CL;;AAAA;AAAA,EAA6C9B,IAAI,CAACgC,SAAlD","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\n\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\n\nexport class CrowdDetectionComponent extends Rete.Component {\n    constructor(){\n        super(\"Crowd Detection\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n\n        const responseZones = await fetch(\"http://127.0.0.1:5000/sensors\");\n        const sensors = await responseZones.json();\n\n        const all = []\n\n\n        for (const x in sensors) {\n\n            const sensor = sensors[x]\n            const lanes = sensor.lanes\n\n            all.push(sensor.name);\n            \n        }\n\n        var out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n        return node\n\n            .addControl(new SelectControl(this.editor, 'type1', all.map((value) => ({\n            text: `Sensor ${value}`, value: `${value[0]}`,\n          })), \"Zone\"))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.num;\n    }\n\n    toJsonLogic(node) {\n        const zone = node.data.type1;\n\n        return {\n            \"crowdDetection\": zone\n        }  \n    }\n}"]},"metadata":{},"sourceType":"module"}