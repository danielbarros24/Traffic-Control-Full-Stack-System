{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\nexport var JamComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(JamComponent, _Rete$Component);\n\n  var _super = _createSuper(JamComponent);\n\n  function JamComponent() {\n    var _this;\n\n    _classCallCheck(this, JamComponent);\n\n    _this = _super.call(this, \"Jam Detection\");\n    _this.data.component = Node;\n    return _this;\n  }\n\n  _createClass(JamComponent, [{\n    key: \"builder\",\n    value: function () {\n      var _builder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node) {\n        var urlDesktop, urlRasp, responseZones, sensors, all, x, sensor, lanes, n, aux, out1;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                _context.next = 4;\n                return fetch(\"http://\".concat(urlDesktop, \"/sensors\"));\n\n              case 4:\n                responseZones = _context.sent;\n                _context.next = 7;\n                return responseZones.json();\n\n              case 7:\n                sensors = _context.sent;\n                all = [];\n\n                for (x in sensors) {\n                  sensor = sensors[x];\n                  lanes = sensor.lanes;\n                  n = 1;\n                  aux = [];\n\n                  while (lanes > 0) {\n                    aux = [];\n                    aux.push(sensor.name);\n                    aux.push(n);\n                    all.push(aux);\n                    n++;\n                    lanes--;\n                  }\n                }\n\n                out1 = new Rete.Output('output', \"Out\", Socket.boolean);\n                return _context.abrupt(\"return\", node.addControl(new SelectControl(this.editor, 'zone', all.map(function (value) {\n                  return {\n                    text: \"\".concat(value[0], \" - Lane \").concat(value[1]),\n                    value: \"\".concat(value[0], \"-\").concat(value[1])\n                  };\n                }), \"Zone\")).addOutput(out1));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function builder(_x) {\n        return _builder.apply(this, arguments);\n      }\n\n      return builder;\n    }()\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['output'] = node.data.zone;\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var zone = node.data.zone;\n      return {\n        \"jamDetection\": zone\n      };\n    }\n  }]);\n\n  return JamComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/variables/JamComponent.js"],"names":["Rete","Socket","SelectControl","Node","JamComponent","data","component","node","urlDesktop","urlRasp","fetch","responseZones","json","sensors","all","x","sensor","lanes","n","aux","push","name","out1","Output","boolean","addControl","editor","map","value","text","addOutput","inputs","outputs","zone","Component"],"mappings":";;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AAEA,SAASC,aAAT,QAA8B,oDAA9B;AACA,OAAOC,IAAP,MAAiB,wEAAjB;AAEA,WAAaC,YAAb;AAAA;;AAAA;;AACI,0BAAa;AAAA;;AAAA;;AACT,8BAAM,eAAN;AACA,UAAKC,IAAL,CAAUC,SAAV,GAAsBH,IAAtB;AAFS;AAGZ;;AAJL;AAAA;AAAA;AAAA,6EAMI,iBAAcI,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,gBAAAA,UAFV,GAEuB,gBAFvB;AAGUC,gBAAAA,OAHV,GAGoB,oBAHpB;AAAA;AAAA,uBAKgCC,KAAK,kBAAWF,UAAX,cALrC;;AAAA;AAKUG,gBAAAA,aALV;AAAA;AAAA,uBAM0BA,aAAa,CAACC,IAAd,EAN1B;;AAAA;AAMUC,gBAAAA,OANV;AAQQC,gBAAAA,GARR,GAQc,EARd;;AAWI,qBAASC,CAAT,IAAcF,OAAd,EAAuB;AAEfG,kBAAAA,MAFe,GAENH,OAAO,CAACE,CAAD,CAFD;AAGfE,kBAAAA,KAHe,GAGPD,MAAM,CAACC,KAHA;AAKfC,kBAAAA,CALe,GAKX,CALW;AAOfC,kBAAAA,GAPe,GAOT,EAPS;;AASnB,yBAAOF,KAAK,GAAG,CAAf,EAAkB;AAEdE,oBAAAA,GAAG,GAAG,EAAN;AACAA,oBAAAA,GAAG,CAACC,IAAJ,CAASJ,MAAM,CAACK,IAAhB;AACAF,oBAAAA,GAAG,CAACC,IAAJ,CAASF,CAAT;AAEAJ,oBAAAA,GAAG,CAACM,IAAJ,CAASD,GAAT;AAEAD,oBAAAA,CAAC;AACDD,oBAAAA,KAAK;AAER;AACJ;;AAEGK,gBAAAA,IAlCR,GAkCe,IAAItB,IAAI,CAACuB,MAAT,CAAgB,QAAhB,EAA0B,KAA1B,EAAiCtB,MAAM,CAACuB,OAAxC,CAlCf;AAAA,iDAmCWjB,IAAI,CAEVkB,UAFM,CAEK,IAAIvB,aAAJ,CAAkB,KAAKwB,MAAvB,EAA+B,MAA/B,EAAuCZ,GAAG,CAACa,GAAJ,CAAQ,UAACC,KAAD;AAAA,yBAAY;AACnEC,oBAAAA,IAAI,YAAKD,KAAK,CAAC,CAAD,CAAV,qBAAwBA,KAAK,CAAC,CAAD,CAA7B,CAD+D;AAC3BA,oBAAAA,KAAK,YAAKA,KAAK,CAAC,CAAD,CAAV,cAAiBA,KAAK,CAAC,CAAD,CAAtB;AADsB,mBAAZ;AAAA,iBAAR,CAAvC,EAEP,MAFO,CAFL,EAKJE,SALI,CAKMR,IALN,CAnCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAiDI,gBAAOf,IAAP,EAAawB,MAAb,EAAqBC,OAArB,EAA8B;AAC1BA,MAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBzB,IAAI,CAACF,IAAL,CAAU4B,IAA9B;AACH;AAnDL;AAAA;AAAA,WAqDI,qBAAY1B,IAAZ,EAAkB;AACd,UAAM0B,IAAI,GAAG1B,IAAI,CAACF,IAAL,CAAU4B,IAAvB;AAEA,aAAO;AACH,wBAAgBA;AADb,OAAP;AAGH;AA3DL;;AAAA;AAAA,EAAkCjC,IAAI,CAACkC,SAAvC","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\n\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\n\nexport class JamComponent extends Rete.Component {\n    constructor(){\n        super(\"Jam Detection\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n\n        const urlDesktop = \"127.0.0.1:5000\"\n        const urlRasp = \"192.168.1.216:5000\"\n        \n        const responseZones = await fetch(`http://${urlDesktop}/sensors`);\n        const sensors = await responseZones.json();\n\n        let all = []\n\n\n        for (let x in sensors) {\n\n            let sensor = sensors[x]\n            let lanes = sensor.lanes\n\n            let n = 1\n\n            let aux = []\n\n            while (lanes > 0) {\n\n                aux = [];\n                aux.push(sensor.name);\n                aux.push(n);\n\n                all.push(aux);\n\n                n ++;\n                lanes --;\n\n            }\n        } \n\n        var out1 = new Rete.Output('output', \"Out\", Socket.boolean);\n        return node\n\n        .addControl(new SelectControl(this.editor, 'zone', all.map((value) => ({\n            text: `${value[0]} - Lane ${value[1]}`, value: `${value[0]}-${value[1]}`,\n        })), \"Zone\"))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['output'] = node.data.zone;\n    }\n\n    toJsonLogic(node) {\n        const zone = node.data.zone;\n\n        return {\n            \"jamDetection\": zone\n        }  \n    }\n}"]},"metadata":{},"sourceType":"module"}