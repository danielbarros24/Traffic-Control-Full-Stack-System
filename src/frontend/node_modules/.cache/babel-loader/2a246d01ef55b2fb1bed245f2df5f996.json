{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport { TimeControl } from \"@/node-editor/controls/TimeControl/TimeControl\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\nexport var FlowComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(FlowComponent, _Rete$Component);\n\n  var _super = _createSuper(FlowComponent);\n\n  function FlowComponent() {\n    var _this;\n\n    _classCallCheck(this, FlowComponent);\n\n    _this = _super.call(this, \"Flow\");\n    _this.data.component = Node;\n    return _this;\n  }\n\n  _createClass(FlowComponent, [{\n    key: \"builder\",\n    value: function () {\n      var _builder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node) {\n        var urlDesktop, urlRasp, responseZones, sensors, all, x, sensor, lanes, n, aux, out1;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                _context.next = 4;\n                return fetch(\"http://\".concat(urlRasp, \"/sensors\"), {\n                  headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n                  }\n                });\n\n              case 4:\n                responseZones = _context.sent;\n                _context.next = 7;\n                return responseZones.json();\n\n              case 7:\n                sensors = _context.sent;\n                all = [];\n\n                for (x in sensors) {\n                  sensor = sensors[x];\n                  lanes = sensor.lanes;\n                  n = 1;\n                  aux = [];\n\n                  while (lanes > 0) {\n                    aux = [];\n                    aux.push(sensor.name);\n                    aux.push(n);\n                    all.push(aux);\n                    n++;\n                    lanes--;\n                  }\n                }\n\n                out1 = new Rete.Output('num', \"Out\", Socket.number);\n                return _context.abrupt(\"return\", node.addControl(new SelectControl(this.editor, 'vehicle', [{\n                  text: 'All',\n                  value: 'ALL'\n                }, {\n                  text: 'Car',\n                  value: 'CAR'\n                }, {\n                  text: 'Truck',\n                  value: 'TRUCK'\n                }, {\n                  text: 'Bike',\n                  value: 'BIKE'\n                }], \"Vehicle Type\")).addControl(new SelectControl(this.editor, 'zone', all.map(function (value) {\n                  return {\n                    text: \"\".concat(value[0], \" - Lane \").concat(value[1]),\n                    value: \"\".concat(value[0], \"-\").concat(value[1])\n                  };\n                }), \"Zone\")).addControl(new TimeControl(this.editor, 'time')).addOutput(out1));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function builder(_x) {\n        return _builder.apply(this, arguments);\n      }\n\n      return builder;\n    }()\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['num'] = node.data.num;\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var zone = node.data.zone;\n      var vehicleType = node.data.vehicle;\n      var duration = node.data.time;\n      return {\n        \"flow\": [zone, vehicleType, duration]\n      };\n    }\n  }]);\n\n  return FlowComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/variables/FlowComponent.js"],"names":["Rete","Socket","TimeControl","SelectControl","Node","FlowComponent","data","component","node","urlDesktop","urlRasp","fetch","headers","localStorage","getItem","responseZones","json","sensors","all","x","sensor","lanes","n","aux","push","name","out1","Output","number","addControl","editor","text","value","map","addOutput","inputs","outputs","num","zone","vehicleType","vehicle","duration","time","Component"],"mappings":"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","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\n\nimport { TimeControl } from \"@/node-editor/controls/TimeControl/TimeControl\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\n\nexport class FlowComponent extends Rete.Component {\n    constructor(){\n        super(\"Flow\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n\n        const urlDesktop = \"127.0.0.1:5000\"\n        const urlRasp = \"192.168.1.216:5000\"\n        \n        const responseZones = await fetch(`http://${urlRasp}/sensors`, {headers: {\n            'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n          }});\n        const sensors = await responseZones.json();\n\n        let all = []\n\n\n        for (let x in sensors) {\n\n            let sensor = sensors[x]\n            let lanes = sensor.lanes\n\n            let n = 1\n\n            let aux = []\n\n            while (lanes > 0) {\n\n                aux = [];\n                aux.push(sensor.name);\n                aux.push(n);\n\n                all.push(aux);\n\n                n ++;\n                lanes --;\n\n            }\n        } \n        var out1 = new Rete.Output('num', \"Out\", Socket.number);\n\n        return node\n    \n          .addControl(new SelectControl(this.editor, 'vehicle', [\n            { text: 'All', value: 'ALL' },\n            { text: 'Car', value: 'CAR' },\n            { text: 'Truck', value: 'TRUCK' },\n            { text: 'Bike', value: 'BIKE' }\n          ], \"Vehicle Type\"))\n          .addControl(new SelectControl(this.editor, 'zone', all.map((value) => ({\n            text: `${value[0]} - Lane ${value[1]}`, value: `${value[0]}-${value[1]}`,\n        })), \"Zone\"))\n          .addControl(new TimeControl(this.editor, 'time'))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.num;\n    }\n    toJsonLogic(node) {\n        const zone = node.data.zone;\n        const vehicleType = node.data.vehicle;\n        const duration = node.data.time;\n\n        return {\n            \"flow\": [ zone, vehicleType, duration ]\n        }  \n    }\n}"]},"metadata":{},"sourceType":"module"}