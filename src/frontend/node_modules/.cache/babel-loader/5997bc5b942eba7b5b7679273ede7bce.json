{"ast":null,"code":"import _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../sockets\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nexport var JamComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(JamComponent, _Rete$Component);\n\n  var _super = _createSuper(JamComponent);\n\n  function JamComponent() {\n    var _this;\n\n    _classCallCheck(this, JamComponent);\n\n    _this = _super.call(this, \"Jam Detection\");\n    _this.data.component = Node;\n    return _this;\n  }\n\n  _createClass(JamComponent, [{\n    key: \"builder\",\n    value: function builder(node) {\n      var out1 = new Rete.Output('num', \"Out\", Socket.number);\n      return node.addControl(new SelectControl(this.editor, 'type1', [{\n        text: 'Sensor 1 - Route 1',\n        value: 'T1-1'\n      }, {\n        text: 'Sensor 1 - Route 2',\n        value: 'T1-2'\n      }], \"Zone\")).addOutput(out1);\n    }\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['num'] = node.data.num;\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var zone = node.data.type1;\n      return {\n        \"jamDetection\": zone\n      };\n    }\n  }]);\n\n  return JamComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/JamComponent.js"],"names":["Rete","Socket","SelectControl","JamComponent","data","component","Node","node","out1","Output","number","addControl","editor","text","value","addOutput","inputs","outputs","num","zone","type1","Component"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAEA,SAASC,aAAT,QAA8B,oDAA9B;AAGA,WAAaC,YAAb;AAAA;;AAAA;;AACI,0BAAa;AAAA;;AAAA;;AACT,8BAAM,eAAN;AACA,UAAKC,IAAL,CAAUC,SAAV,GAAsBC,IAAtB;AAFS;AAGZ;;AAJL;AAAA;AAAA,WAMI,iBAAQC,IAAR,EAAc;AAEV,UAAIC,IAAI,GAAG,IAAIR,IAAI,CAACS,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8BR,MAAM,CAACS,MAArC,CAAX;AACA,aAAOH,IAAI,CAENI,UAFE,CAES,IAAIT,aAAJ,CAAkB,KAAKU,MAAvB,EAA+B,OAA/B,EAAwC,CAChD;AAAEC,QAAAA,IAAI,EAAE,oBAAR;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OADgD,EAEhD;AAAED,QAAAA,IAAI,EAAE,oBAAR;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OAFgD,CAAxC,EAGT,MAHS,CAFT,EAMJC,SANI,CAMMP,IANN,CAAP;AAOH;AAhBL;AAAA;AAAA,WAkBI,gBAAOD,IAAP,EAAaS,MAAb,EAAqBC,OAArB,EAA8B;AAC1BA,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBV,IAAI,CAACH,IAAL,CAAUc,GAA3B;AACH;AApBL;AAAA;AAAA,WAsBI,qBAAYX,IAAZ,EAAkB;AACd,UAAMY,IAAI,GAAGZ,IAAI,CAACH,IAAL,CAAUgB,KAAvB;AAEA,aAAO;AACH,wBAAgBD;AADb,OAAP;AAGH;AA5BL;;AAAA;AAAA,EAAkCnB,IAAI,CAACqB,SAAvC","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\n\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\n\n\nexport class JamComponent extends Rete.Component {\n    constructor(){\n        super(\"Jam Detection\");\n        this.data.component = Node;\n    }\n\n    builder(node) {\n\n        var out1 = new Rete.Output('num', \"Out\", Socket.number);\n        return node\n\n            .addControl(new SelectControl(this.editor, 'type1', [\n                { text: 'Sensor 1 - Route 1', value: 'T1-1' },\n                { text: 'Sensor 1 - Route 2', value: 'T1-2' }\n            ], \"Zone\"))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.num;\n    }\n\n    toJsonLogic(node) {\n        const zone = node.data.type1;\n\n        return {\n            \"jamDetection\": zone\n        }  \n    }\n}"]},"metadata":{},"sourceType":"module"}