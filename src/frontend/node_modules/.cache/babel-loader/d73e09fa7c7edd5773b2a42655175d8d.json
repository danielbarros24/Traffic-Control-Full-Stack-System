{"ast":null,"code":"import _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../sockets\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nexport var VehicleDetectionComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(VehicleDetectionComponent, _Rete$Component);\n\n  var _super = _createSuper(VehicleDetectionComponent);\n\n  function VehicleDetectionComponent() {\n    _classCallCheck(this, VehicleDetectionComponent);\n\n    return _super.call(this, \"Deteção de veículo\");\n  }\n\n  _createClass(VehicleDetectionComponent, [{\n    key: \"builder\",\n    value: function builder(node) {\n      var out1 = new Rete.Output('num', \"Out\", Socket.number);\n      return node.addControl(new SelectControl(this.editor, 'type', [{\n        text: 'All',\n        value: 'ALL'\n      }, {\n        text: 'Car',\n        value: 'CAR'\n      }, {\n        text: 'Truck',\n        value: 'TRUCK'\n      }, {\n        text: 'Motocycle',\n        value: 'MOTO'\n      }], \"Vehicle Type\")).addOutput(out1);\n    }\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['num'] = node.data.type;\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      return node.data.type;\n    }\n  }]);\n\n  return VehicleDetectionComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/VehicleDetectionComponent.js"],"names":["Rete","Socket","SelectControl","VehicleDetectionComponent","node","out1","Output","number","addControl","editor","text","value","addOutput","inputs","outputs","data","type","Component"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAEA,SAASC,aAAT,QAA8B,oDAA9B;AAGA,WAAaC,yBAAb;AAAA;;AAAA;;AACI,uCAAa;AAAA;;AAAA,6BACH,oBADG;AAEZ;;AAHL;AAAA;AAAA,WAKI,iBAAQC,IAAR,EAAc;AACV,UAAIC,IAAI,GAAG,IAAIL,IAAI,CAACM,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8BL,MAAM,CAACM,MAArC,CAAX;AAEA,aAAOH,IAAI,CACRI,UADI,CACO,IAAIN,aAAJ,CAAkB,KAAKO,MAAvB,EAA+B,MAA/B,EAAuC,CACjD;AAAEC,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OADiD,EAEjD;AAAED,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAFiD,EAGjD;AAAED,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,KAAK,EAAE;AAAxB,OAHiD,EAIjD;AAAED,QAAAA,IAAI,EAAE,WAAR;AAAqBC,QAAAA,KAAK,EAAE;AAA5B,OAJiD,CAAvC,EAKT,cALS,CADP,EAOJC,SAPI,CAOMP,IAPN,CAAP;AAQH;AAhBL;AAAA;AAAA,WAkBI,gBAAOD,IAAP,EAAaS,MAAb,EAAqBC,OAArB,EAA8B;AAC1BA,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBV,IAAI,CAACW,IAAL,CAAUC,IAA3B;AACH;AApBL;AAAA;AAAA,WAsBI,qBAAYZ,IAAZ,EAAkB;AACd,aAAOA,IAAI,CAACW,IAAL,CAAUC,IAAjB;AACH;AAxBL;;AAAA;AAAA,EAA+ChB,IAAI,CAACiB,SAApD","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\n\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\n\n\nexport class VehicleDetectionComponent extends Rete.Component {\n    constructor(){\n        super(\"Deteção de veículo\");\n    }\n\n    builder(node) {\n        var out1 = new Rete.Output('num', \"Out\", Socket.number);\n\n        return node\n          .addControl(new SelectControl(this.editor, 'type', [\n            { text: 'All', value: 'ALL' },\n            { text: 'Car', value: 'CAR' },\n            { text: 'Truck', value: 'TRUCK' },\n            { text: 'Motocycle', value: 'MOTO' }\n          ], \"Vehicle Type\"))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.type;\n    }\n\n    toJsonLogic(node) {\n        return node.data.type;\n    }\n}"]},"metadata":{},"sourceType":"module"}