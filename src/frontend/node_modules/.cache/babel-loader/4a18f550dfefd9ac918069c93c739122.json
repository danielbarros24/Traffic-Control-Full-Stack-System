{"ast":null,"code":"// Styles\nimport \"../../../src/styles/components/_selection-controls.sass\";\nimport \"../../../src/components/VSwitch/VSwitch.sass\"; // Mixins\n\nimport Selectable from '../../mixins/selectable';\nimport VInput from '../VInput'; // Directives\n\nimport Touch from '../../directives/touch'; // Components\n\nimport { VFabTransition } from '../transitions';\nimport VProgressCircular from '../VProgressCircular/VProgressCircular'; // Helpers\n\nimport { keyCodes } from '../../util/helpers';\n/* @vue/component */\n\nexport default Selectable.extend({\n  name: 'v-switch',\n  directives: {\n    Touch\n  },\n  props: {\n    inset: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false\n    },\n    flat: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    classes() {\n      return { ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls v-input--switch': true,\n        'v-input--switch--flat': this.flat,\n        'v-input--switch--inset': this.inset\n      };\n    },\n\n    attrs() {\n      return {\n        'aria-checked': String(this.isActive),\n        'aria-disabled': String(this.isDisabled),\n        role: 'switch'\n      };\n    },\n\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState() {\n      if (this.hasError && this.shouldValidate) return 'error';\n      if (this.hasSuccess) return 'success';\n      if (this.hasColor !== null) return this.computedColor;\n      return undefined;\n    },\n\n    switchData() {\n      return this.setTextColor(this.loading ? undefined : this.validationState, {\n        class: this.themeClasses\n      });\n    }\n\n  },\n  methods: {\n    genDefaultSlot() {\n      return [this.genSwitch(), this.genLabel()];\n    },\n\n    genSwitch() {\n      const {\n        title,\n        ...switchAttrs\n      } = this.attrs$;\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input'\n      }, [this.genInput('checkbox', { ...this.attrs,\n        ...switchAttrs\n      }), this.genRipple(this.setTextColor(this.validationState, {\n        directives: [{\n          name: 'touch',\n          value: {\n            left: this.onSwipeLeft,\n            right: this.onSwipeRight\n          }\n        }]\n      })), this.$createElement('div', {\n        staticClass: 'v-input--switch__track',\n        ...this.switchData\n      }), this.$createElement('div', {\n        staticClass: 'v-input--switch__thumb',\n        ...this.switchData\n      }, [this.genProgress()])]);\n    },\n\n    genProgress() {\n      return this.$createElement(VFabTransition, {}, [this.loading === false ? null : this.$slots.progress || this.$createElement(VProgressCircular, {\n        props: {\n          color: this.loading === true || this.loading === '' ? this.color || 'primary' : this.loading,\n          size: 16,\n          width: 2,\n          indeterminate: true\n        }\n      })]);\n    },\n\n    onSwipeLeft() {\n      if (this.isActive) this.onChange();\n    },\n\n    onSwipeRight() {\n      if (!this.isActive) this.onChange();\n    },\n\n    onKeydown(e) {\n      if (e.keyCode === keyCodes.left && this.isActive || e.keyCode === keyCodes.right && !this.isActive) this.onChange();\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["Selectable","VInput","Touch","VFabTransition","VProgressCircular","keyCodes","extend","name","directives","props","inset","Boolean","loading","type","String","default","flat","computed","classes","options","call","attrs","isActive","isDisabled","role","validationState","hasError","shouldValidate","hasSuccess","hasColor","computedColor","undefined","switchData","setTextColor","class","themeClasses","methods","genDefaultSlot","genSwitch","genLabel","title","switchAttrs","attrs$","$createElement","staticClass","genInput","genRipple","value","left","onSwipeLeft","right","onSwipeRight","genProgress","$slots","progress","color","size","width","indeterminate","onChange","onKeydown","e","keyCode"],"sourceRoot":"","sources":["../../../src/components/VSwitch/VSwitch.ts"],"sourcesContent":["// Styles\nimport '../../styles/components/_selection-controls.sass'\nimport './VSwitch.sass'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\nimport VInput from '../VInput'\n\n// Directives\nimport Touch from '../../directives/touch'\n\n// Components\nimport { VFabTransition } from '../transitions'\nimport VProgressCircular from '../VProgressCircular/VProgressCircular'\n\n// Helpers\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeData } from 'vue'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-switch',\n\n  directives: { Touch },\n\n  props: {\n    inset: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false,\n    },\n    flat: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls v-input--switch': true,\n        'v-input--switch--flat': this.flat,\n        'v-input--switch--inset': this.inset,\n      }\n    },\n    attrs (): object {\n      return {\n        'aria-checked': String(this.isActive),\n        'aria-disabled': String(this.isDisabled),\n        role: 'switch',\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n    switchData (): VNodeData {\n      return this.setTextColor(this.loading ? undefined : this.validationState, {\n        class: this.themeClasses,\n      })\n    },\n  },\n\n  methods: {\n    genDefaultSlot (): (VNode | null)[] {\n      return [\n        this.genSwitch(),\n        this.genLabel(),\n      ]\n    },\n    genSwitch (): VNode {\n      const { title, ...switchAttrs } = this.attrs$\n\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.genInput('checkbox', {\n          ...this.attrs,\n          ...switchAttrs,\n        }),\n        this.genRipple(this.setTextColor(this.validationState, {\n          directives: [{\n            name: 'touch',\n            value: {\n              left: this.onSwipeLeft,\n              right: this.onSwipeRight,\n            },\n          }],\n        })),\n        this.$createElement('div', {\n          staticClass: 'v-input--switch__track',\n          ...this.switchData,\n        }),\n        this.$createElement('div', {\n          staticClass: 'v-input--switch__thumb',\n          ...this.switchData,\n        }, [this.genProgress()]),\n      ])\n    },\n    genProgress (): VNode {\n      return this.$createElement(VFabTransition, {}, [\n        this.loading === false\n          ? null\n          : this.$slots.progress || this.$createElement(VProgressCircular, {\n            props: {\n              color: (this.loading === true || this.loading === '')\n                ? (this.color || 'primary')\n                : this.loading,\n              size: 16,\n              width: 2,\n              indeterminate: true,\n            },\n          }),\n      ])\n    },\n    onSwipeLeft () {\n      if (this.isActive) this.onChange()\n    },\n    onSwipeRight () {\n      if (!this.isActive) this.onChange()\n    },\n    onKeydown (e: KeyboardEvent) {\n      if (\n        (e.keyCode === keyCodes.left && this.isActive) ||\n        (e.keyCode === keyCodes.right && !this.isActive)\n      ) this.onChange()\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}