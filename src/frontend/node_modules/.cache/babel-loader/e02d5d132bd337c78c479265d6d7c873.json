{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as dayjs from \"dayjs\";\nimport { mapGetters } from 'vuex';\nexport default {\n  data() {\n    return {\n      valid: true,\n      nameRules: [v => !!v],\n      dateRules: [v => !!v || \"Insert 2 dates\", v => /^\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])~\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/.test(v) || \"Insert 2 dates!\"],\n      dataCountCar: [{\n        name: \"Car Count\",\n        data: {}\n      }],\n      dataCountTruck: [{\n        name: \"Truck Flow\",\n        data: {}\n      }],\n      dataCountBike: [{\n        name: \"Bike Flow\",\n        data: {}\n      }],\n      dataCountDoublePark: [{\n        name: \"Double-Park Flow\",\n        data: {}\n      }],\n      items: [{\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n\n        click() {\n          this.$store.dispatch('logout');\n        }\n\n      }, {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n\n        click() {\n          this.$router.push(\"processes\");\n        }\n\n      }, {\n        title: \"Settings\",\n        icon: \"mdi-cogs\",\n\n        click() {\n          this.$router.push(\"settings\");\n        }\n\n      }],\n      editedItem: {\n        dates: [dayjs().format('YYYY-MM-DD'), dayjs().format('YYYY-MM-DD')],\n        startHour: \"00:00\",\n        endHour: \"23:59\",\n        indicator: \"\"\n      },\n      defaultItem: {\n        dates: [dayjs().format('YYYY-MM-DD'), dayjs().format('YYYY-MM-DD')],\n        startHour: \"00:00\",\n        endHour: \"23:59\",\n        indicator: \"\"\n      },\n      sensors: [],\n      menuStart: false,\n      menuEnd: false,\n      menu1: null,\n      menu2: null,\n      carCountChart: false,\n      truckCountChart: false,\n      bikeCountChart: false,\n      doubleParkVehicles: false,\n      radioGroup: \"T1\",\n      brokerFail: false\n    };\n  },\n\n  methods: {\n    async getBrokerState() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const responseState = await fetch(`http://${urlDesktop}/broker-state`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const res = await responseState.json();\n\n      if (res.state == \"ok\") {\n        this.brokerFail = false;\n      } else {\n        this.brokerFail = true;\n      }\n    },\n\n    async submitGetData() {\n      if (this.carCountChart === true) await this.getData(1);\n      if (this.truckCountChart === true) await this.getData(2);\n      if (this.bikeCountChart === true) await this.getData(3);\n      if (this.doubleParkVehicles === true) await this.getData(4);\n    },\n\n    async getSensors() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const responseSensors = await fetch(`http://${urlDesktop}/sensors`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const sensors_res = await responseSensors.json();\n      this.sensors = sensors_res;\n    },\n\n    async getData(indicator) {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const sensor = this.radioGroup;\n      const dates = this.editedItem.dates;\n      const startHour = this.editedItem.startHour;\n      const endHour = this.editedItem.endHour;\n      const startTime = dayjs(dates[0] + \" \" + startHour).toISOString();\n      const endTime = dayjs(dates[1] + \" \" + endHour).toISOString();\n      let id = parseInt(indicator);\n      const data_json = await fetch(`http://${urlDesktop}/chart?sensor=${sensor}&startTime=${startTime}&endTime=${endTime}&indicator=${id}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const data_array = await data_json.json();\n      const data = Object.assign({}, ...data_array);\n\n      if (id === 1) {\n        this.dataCountCar[0].data = data;\n        let chart = Chartkick.charts[\"car-chart\"];\n        chart.updateData(this.dataCountCar);\n      }\n\n      if (id === 2) {\n        this.dataCountTruck[0].data = data;\n        let chart = Chartkick.charts[\"truck-chart\"];\n        chart.updateData(this.dataCountTruck);\n      }\n\n      if (id === 3) {\n        this.dataCountBike[0].data = data;\n        let chart = Chartkick.charts[\"bike-chart\"];\n        chart.updateData(this.dataCountBike);\n      }\n\n      if (id === 4) {\n        this.dataCountDoublePark[0].data = data;\n        let chart = Chartkick.charts[\"doublePark-chart\"];\n        chart.updateData(this.dataCountDoublePark);\n      }\n    },\n\n    handleClick(index) {\n      this.items[index].click.call(this);\n    }\n\n  },\n  computed: { ...mapGetters('auth', {\n      isAuth: 'isAuthenticated'\n    }),\n\n    dateRangeText() {\n      return this.editedItem.dates.join(\"~\");\n    }\n\n  },\n\n  async mounted() {\n    await this.getBrokerState();\n    await this.getSensors();\n    await this.getData(1);\n    await this.getData(1);\n    await this.getData(2);\n    await this.getData(3);\n    await this.getData(4);\n    this.interval = setInterval(() => this.getBrokerState(), 1000);\n  },\n\n  async beforeDestroy() {\n    clearInterval(this.interval);\n  }\n\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkSA;AACA;AAEA;AACAA;AACA;AACAC,iBADA;AAGAC,2BAHA;AAIAC,kBACAC,4BADA,EAEAA,KACA,2GACAA,CADA,KAEA,iBALA,CAJA;AAYAC,qBACA;AACAC,yBADA;AAEAN;AAFA,OADA,CAZA;AAkBAO,uBACA;AACAD,0BADA;AAEAN;AAFA,OADA,CAlBA;AAwBAQ,sBACA;AACAF,yBADA;AAEAN;AAFA,OADA,CAxBA;AA8BAS,4BACA;AACAH,gCADA;AAEAN;AAFA,OADA,CA9BA;AAqCAU,cACA;AACAC,uBADA;AAEAC,0BAFA;;AAGAC;AACA;AACA;;AALA,OADA,EAQA;AACAF,0BADA;AAEAC,4BAFA;;AAGAC;AACA;AACA;;AALA,OARA,EAeA;AACAF,yBADA;AAEAC,wBAFA;;AAGAC;AACA;AACA;;AALA,OAfA,CArCA;AA6DAC;AACAC,2EADA;AAEAC,0BAFA;AAGAC,wBAHA;AAIAC;AAJA,OA7DA;AAoEAC;AACAJ,2EADA;AAEAC,0BAFA;AAGAC,wBAHA;AAIAC;AAJA,OApEA;AA0EAE,iBA1EA;AA4EAC,sBA5EA;AA6EAC,oBA7EA;AA+EAC,iBA/EA;AAgFAC,iBAhFA;AAkFAC,0BAlFA;AAmFAC,4BAnFA;AAoFAC,2BApFA;AAqFAC,+BArFA;AAsFAC,sBAtFA;AAuFAC;AAvFA;AAyFA,GA3FA;;AA6FAC;AACA;AACA;AACA;AAEA;AAAAC;AACA;AADA;AAAA;AAGA;;AAEA;AACA;AACA,OAFA,MAGA;AACA;AACA;AACA,KAhBA;;AAiBA;AACA;AACA;AACA;AACA;AACA,KAtBA;;AAuBA;AACA;AACA;AAEA;AAAAA;AACA;AADA;AAAA;AAGA;AACA;AACA,KAhCA;;AAkCA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA,oCACA,uGADA,EACA;AAAAA;AACA;AADA;AAAA,OADA;AAKA;AACA;;AAEA;AACA;AACA;AACAC;AACA;;AACA;AACA;AACA;AACAA;AACA;;AACA;AACA;AACA;AACAA;AACA;;AACA;AACA;AACA;AACAA;AACA;AACA,KA7EA;;AA+EAC;AACA;AACA;;AAjFA,GA7FA;AAgLAC,cACA;AACAC;AADA,MADA;;AAIAC;AACA;AACA;;AANA,GAhLA;;AAwLA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA,GArMA;;AAsMA;AACAC;AACA;;AAxMA","names":["data","valid","nameRules","dateRules","v","dataCountCar","name","dataCountTruck","dataCountBike","dataCountDoublePark","items","title","icon","click","editedItem","dates","startHour","endHour","indicator","defaultItem","sensors","menuStart","menuEnd","menu1","menu2","carCountChart","truckCountChart","bikeCountChart","doubleParkVehicles","radioGroup","brokerFail","methods","headers","chart","handleClick","computed","isAuth","dateRangeText","clearInterval"],"sourceRoot":"src/views","sources":["Dashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <v-app-bar color=\"transparent\" dark elevation=\"0\">\n      <v-img\n        max-height=\"35\"\n        max-width=\"35\"\n        src=\"../assets/logo_simple.png\"\n      ></v-img>\n      <v-toolbar-title class=\"ml-4\">Dashboard</v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-menu transition=\"slide-y-transition\" offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n        </template>\n\n        <v-list>\n          <v-list-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            @click=\"handleClick(index)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ item.title }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n    </v-app-bar>\n    <v-row no-gutters>\n      <v-col cols=\"1\" sm=\"3\" md=\"2\">\n        <v-card\n          class=\"d-flex ml-5 mt-13 pa-6\"\n          min-width=\"290\"\n          elevation=\"20\"\n          outlined\n        >\n          <v-card-text>\n            <h2 class=\"text-h6 text--primary\">Sensors</h2>\n            <v-radio-group v-model=\"radioGroup\" mandatory>\n              <v-radio\n                v-for=\"(sensor, idx) in sensors\"\n                :key=\"idx\"\n                :label=\"`${sensor.name}`\"\n                :value=\"sensor.name\"\n              ></v-radio> \n            </v-radio-group>\n\n            <div class=\"my-5\">\n              <v-form ref=\"form\" v-model=\"valid\">\n                <h2 class=\"text-h6 text--primary\">Time</h2>\n                <v-menu\n                  v-model=\"menu2\"\n                  :close-on-content-click=\"false\"\n                  :nudge-right=\"40\"\n                  transition=\"scale-transition\"\n                  offset-y\n                  min-width=\"auto\"\n                >\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-text-field\n                      v-model=\"dateRangeText\"\n                      label=\"Select date range\"\n                      prepend-icon=\"mdi-calendar\"\n                      readonly\n                      v-bind=\"attrs\"\n                      v-on=\"on\"\n                      required\n                      :rules=\"dateRules\"\n                    ></v-text-field>\n                  </template>\n                  <v-date-picker\n                    v-model=\"editedItem.dates\"\n                    range\n                  ></v-date-picker>\n                </v-menu>\n                <v-menu\n                  ref=\"menu1\"\n                  v-model=\"menuStart\"\n                  :close-on-content-click=\"false\"\n                  :nudge-right=\"40\"\n                  :return-value.sync=\"editedItem.startHour\"\n                  transition=\"scale-transition\"\n                  offset-y\n                  max-width=\"290px\"\n                  min-width=\"290px\"\n                >\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-text-field\n                      v-model=\"editedItem.startHour\"\n                      label=\"Start Time\"\n                      prepend-icon=\"mdi-clock-time-four-outline\"\n                      readonly\n                      v-bind=\"attrs\"\n                      v-on=\"on\"\n                      :rules=\"nameRules\"\n                      required\n                    ></v-text-field>\n                  </template>\n                  <v-time-picker\n                    v-if=\"menuStart\"\n                    v-model=\"editedItem.startHour\"\n                    format=\"24h\"\n                    scrollable\n                    full-width\n                    @click:minute=\"$refs.menu1.save(editedItem.startHour)\"\n                  ></v-time-picker>\n                </v-menu>\n\n                <v-menu\n                  ref=\"menu2\"\n                  v-model=\"menuEnd\"\n                  :close-on-content-click=\"false\"\n                  :nudge-right=\"40\"\n                  :return-value.sync=\"editedItem.endHour\"\n                  transition=\"scale-transition\"\n                  offset-y\n                  max-width=\"290px\"\n                  min-width=\"290px\"\n                >\n                  <template v-slot:activator=\"{ on, attrs }\">\n                    <v-text-field\n                      v-model=\"editedItem.endHour\"\n                      label=\"End Time\"\n                      prepend-icon=\"mdi-clock-time-four-outline\"\n                      readonly\n                      v-bind=\"attrs\"\n                      v-on=\"on\"\n                      :rules=\"nameRules\"\n                      required\n                    ></v-text-field>\n                  </template>\n                  <v-time-picker\n                    v-if=\"menuEnd\"\n                    v-model=\"editedItem.endHour\"\n                    format=\"24h\"\n                    scrollable\n                    full-width\n                    @click:minute=\"$refs.menu2.save(editedItem.endHour)\"\n                  ></v-time-picker>\n                </v-menu>\n              </v-form>\n            </div>\n\n            <h2 class=\"text-h6 text--primary\">Indicators</h2>\n            <v-checkbox\n              v-model=\"carCountChart\"\n              label=\"Car Flow\"\n              hide-details\n            ></v-checkbox>\n            <v-checkbox\n              v-model=\"truckCountChart\"\n              label=\"Truck Flow\"\n              hide-details\n            ></v-checkbox>\n            <v-checkbox\n              v-model=\"bikeCountChart\"\n              label=\"Bike flow\"\n              hide-details\n            ></v-checkbox>\n            <v-checkbox\n              v-model=\"doubleParkVehicles\"\n              label=\"Double Park Vehicles\"\n              hide-details\n            ></v-checkbox>\n            <v-btn\n              depressed\n              color=\"primary\"\n              class=\"d-flex mt-10\"\n              @click=\"submitGetData\"\n              :disabled=\"!valid\"\n            >\n              Submit\n            </v-btn>\n          </v-card-text>\n        </v-card>\n      </v-col>\n\n      <v-col cols=\"6\" md=\"10\" no-gutters class=\"mt-13\">\n        <v-row no-gutters max-height=\"800\">\n          <v-card\n            class=\"d-flex mb-4 pt-1 ml-3 px-5\"\n            width=\"750\"\n            height=\"380\"\n            outlined\n          >\n          <v-col>\n            <h1 class=\"d-flex justify-center mb-3 font-weight-regular\">Car Flow</h1>\n            <area-chart\n              :data=\"dataCountCar\"\n              :colors=\"['#db1e1e']\"\n              id=\"car-chart\"\n              xtitle=\"Time\"\n              ytitle=\"Number of Cars\"\n              empty=\"No data\"\n              :dataset=\"{ borderWidth: 2 }\"\n            ></area-chart>\n          </v-col>\n          </v-card>\n\n          <v-card\n            class=\"d-flex ml-3 mb-4 pt-1 px-5 flex-wrap\"\n            width=\"750\"\n            height=\"380\"\n            outlined\n          >\n          <v-col>\n            <h1 class=\"d-flex justify-center mb-3 font-weight-regular\">Truck Flow</h1>\n            <area-chart\n              :data=\"dataCountTruck\"\n              :colors=\"['#32a852']\"\n              id=\"truck-chart\"\n              xtitle=\"Time\"\n              ytitle=\"Number of Trucks\"\n              empty=\"No data\"\n              :dataset=\"{ borderWidth: 2 }\"\n            ></area-chart>\n          </v-col>\n          </v-card>\n\n          <v-card\n            class=\"d-flex ml-3 pt-1 px-5 mb-4\"\n            width=\"750\"\n            height=\"380\"\n            outlined\n          >\n          <v-col>\n             <h1 class=\"d-flex justify-center mb-3 font-weight-regular\">Bike Flow</h1>\n             <area-chart\n              :data=\"dataCountBike\"\n              :colors=\"['#dbcb1e']\"\n              id=\"bike-chart\"\n              xtitle=\"Time\"\n              ytitle=\"Number of Bikes\"\n              empty=\"No data\"\n              :dataset=\"{ borderWidth: 2 }\"\n            ></area-chart>\n          </v-col>\n           \n          </v-card>\n\n          <v-card\n            class=\"d-flex ml-3 pt-2 px-5\"\n            width=\"750\"\n            height=\"380\"\n            outlined\n          >\n          <v-col>\n            <h1 class=\"d-flex justify-center mb-3 font-weight-regular\">Double-Park Vehicles</h1>\n            <area-chart\n              :data=\"dataCountDoublePark\"\n              :colors=\"['#721edb']\"\n              id=\"doublePark-chart\"\n              xtitle=\"Time\"\n              ytitle=\"Number of Double-Parked Vehicles\"\n              empty=\"No data\"\n              :dataset=\"{ borderWidth: 2 }\"\n            ></area-chart>\n          </v-col>\n            \n          </v-card>\n        </v-row>\n      </v-col>\n    </v-row>\n\n    <div class=\"text-center\">\n      <v-snackbar v-model=\"brokerFail\" color=\"red\" >\n        <h2 class=\"font-weight-medium\">BROKER COMMUNICATION DOWN!</h2>\n\n        <template v-slot:action=\"{ attrs }\">\n          <v-btn\n            color=\"white\"\n            text\n            v-bind=\"attrs\"\n            @click=\"brokerFail = false\"\n          >\n            Close\n          </v-btn>\n        </template>\n      </v-snackbar>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport * as dayjs from \"dayjs\";\nimport { mapGetters } from 'vuex'\n\nexport default {\n  data() {\n    return {\n      valid: true,\n      \n      nameRules: [(v) => !!v],\n      dateRules: [\n        (v) => !!v || \"Insert 2 dates\",\n        (v) =>\n          /^\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])~\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/.test(\n            v\n          ) || \"Insert 2 dates!\",\n      ],\n\n      dataCountCar: [\n        {\n          name: \"Car Count\",\n          data: {},\n        },\n      ],\n      dataCountTruck: [\n        {\n          name: \"Truck Flow\",\n          data: {},\n        },\n      ],\n      dataCountBike: [\n        {\n          name: \"Bike Flow\",\n          data: {},\n        },\n      ],\n      dataCountDoublePark: [\n        {\n          name: \"Double-Park Flow\",\n          data: {},\n        },\n      ],\n\n      items: [\n        {\n          title: \"Logout\",\n          icon: \"mdi-logout\",\n          click() {\n            this.$store.dispatch('logout');\n          },\n        },\n        {\n          title: \"Processes\",\n          icon: \"mdi-auto-fix\",\n          click() {\n            this.$router.push(\"processes\");\n          },\n        },\n        {\n          title: \"Settings\",\n          icon: \"mdi-cogs\",\n          click() {\n            this.$router.push(\"settings\");\n          },\n        },\n      ],\n      \n      editedItem: {\n        dates: [dayjs().format('YYYY-MM-DD'),dayjs().format('YYYY-MM-DD')],\n        startHour: \"00:00\",\n        endHour: \"23:59\",\n        indicator: \"\",\n      },\n\n      defaultItem: {\n        dates: [dayjs().format('YYYY-MM-DD'),dayjs().format('YYYY-MM-DD')],\n        startHour: \"00:00\",\n        endHour: \"23:59\",\n        indicator: \"\",\n      },\n      sensors: [],\n\n      menuStart: false,\n      menuEnd: false,\n\n      menu1: null,\n      menu2: null,\n\n      carCountChart: false,\n      truckCountChart: false,\n      bikeCountChart: false,\n      doubleParkVehicles: false,\n      radioGroup: \"T1\",\n      brokerFail: false\n    };\n  },\n\n  methods: {\n    async getBrokerState() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n\n      const responseState= await fetch(`http://${urlDesktop}/broker-state`, {headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }});\n      const res = await responseState.json();\n\n      if (res.state == \"ok\") {\n        this.brokerFail = false\n      }\n      else {\n        this.brokerFail = true\n      }\n    },\n    async submitGetData() {\n      if (this.carCountChart === true) await this.getData(1);\n      if (this.truckCountChart === true) await this.getData(2);\n      if (this.bikeCountChart === true) await this.getData(3);\n      if (this.doubleParkVehicles === true) await this.getData(4);\n    },\n    async getSensors() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n\n      const responseSensors = await fetch(`http://${urlDesktop}/sensors`, {headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }});\n      const sensors_res = await responseSensors.json();\n      this.sensors = sensors_res;\n    },\n\n    async getData(indicator) {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n\n      const sensor = this.radioGroup;\n      const dates = this.editedItem.dates;\n\n      const startHour = this.editedItem.startHour;\n      const endHour = this.editedItem.endHour;\n\n      const startTime = dayjs(dates[0] + \" \" + startHour).toISOString();\n      const endTime = dayjs(dates[1] + \" \" + endHour).toISOString();\n\n      let id = parseInt(indicator);\n\n      const data_json = await fetch(\n        `http://${urlDesktop}/chart?sensor=${sensor}&startTime=${startTime}&endTime=${endTime}&indicator=${id}`, {headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }}\n      );\n      const data_array = await data_json.json();\n      const data = Object.assign({}, ...data_array);\n      \n      if (id === 1) {\n        this.dataCountCar[0].data = data;\n        let chart = Chartkick.charts[\"car-chart\"];\n        chart.updateData(this.dataCountCar);\n      }\n      if (id === 2) {\n        this.dataCountTruck[0].data = data;\n        let chart = Chartkick.charts[\"truck-chart\"];\n        chart.updateData(this.dataCountTruck);\n      }\n      if (id === 3) {\n        this.dataCountBike[0].data = data;\n        let chart = Chartkick.charts[\"bike-chart\"];\n        chart.updateData(this.dataCountBike);\n      }\n      if (id === 4) {\n        this.dataCountDoublePark[0].data = data;\n        let chart = Chartkick.charts[\"doublePark-chart\"];\n        chart.updateData(this.dataCountDoublePark);\n      }\n    },\n\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n  },\n  computed: {\n    ...mapGetters('auth', {\n\t\t\t\tisAuth: 'isAuthenticated',\n\t\t\t}),\n    dateRangeText() {\n      return this.editedItem.dates.join(\"~\");\n    },\n  },\n  async mounted() {\n    \n    await this.getBrokerState();\n\n    await this.getSensors();\n\n    await this.getData(1);\n    await this.getData(1);\n    await this.getData(2);\n    await this.getData(3);\n    await this.getData(4);\n    \n    this.interval = setInterval(() => this.getBrokerState(), 1000);\n  },\n  async beforeDestroy() {\n    clearInterval(this.interval)\n  },\n\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}