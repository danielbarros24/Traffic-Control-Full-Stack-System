{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\nexport var CrowdDetectionComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(CrowdDetectionComponent, _Rete$Component);\n\n  var _super = _createSuper(CrowdDetectionComponent);\n\n  function CrowdDetectionComponent() {\n    var _this;\n\n    _classCallCheck(this, CrowdDetectionComponent);\n\n    _this = _super.call(this, \"Crowd Detection\");\n    _this.data.component = Node;\n    return _this;\n  }\n\n  _createClass(CrowdDetectionComponent, [{\n    key: \"builder\",\n    value: function () {\n      var _builder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node) {\n        var urlDesktop, urlRasp, responseZones, sensors, all, x, sensor, out1;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                _context.next = 4;\n                return fetch(\"http://\".concat(urlDesktop, \"/sensors\"));\n\n              case 4:\n                responseZones = _context.sent;\n                _context.next = 7;\n                return responseZones.json();\n\n              case 7:\n                sensors = _context.sent;\n                all = [];\n\n                for (x in sensors) {\n                  sensor = sensors[x];\n                  all.push(sensor.name);\n                }\n\n                out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n                return _context.abrupt(\"return\", node.addControl(new SelectControl(this.editor, 'zone', all.map(function (value) {\n                  return {\n                    text: \"\".concat(value),\n                    value: \"\".concat(value)\n                  };\n                }), \"Zone\")).addOutput(out1));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function builder(_x) {\n        return _builder.apply(this, arguments);\n      }\n\n      return builder;\n    }()\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['output'] = node.data.num;\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var zone = node.data.zone;\n      return {\n        \"crowdDetection\": zone\n      };\n    }\n  }]);\n\n  return CrowdDetectionComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/variables/CrowdDetectionComponent.js"],"names":["Rete","Socket","SelectControl","Node","CrowdDetectionComponent","data","component","node","urlDesktop","urlRasp","fetch","responseZones","json","sensors","all","x","sensor","push","name","out1","Output","boolean","addControl","editor","map","value","text","addOutput","inputs","outputs","num","zone","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AAEA,SAASC,aAAT,QAA8B,oDAA9B;AACA,OAAOC,IAAP,MAAiB,wEAAjB;AAEA,WAAaC,uBAAb;AAAA;;AAAA;;AACI,qCAAa;AAAA;;AAAA;;AACT,8BAAM,iBAAN;AACA,UAAKC,IAAL,CAAUC,SAAV,GAAsBH,IAAtB;AAFS;AAGZ;;AAJL;AAAA;AAAA;AAAA,6EAMI,iBAAcI,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,gBAAAA,UAFV,GAEuB,gBAFvB;AAGUC,gBAAAA,OAHV,GAGoB,oBAHpB;AAAA;AAAA,uBAKgCC,KAAK,kBAAWF,UAAX,cALrC;;AAAA;AAKUG,gBAAAA,aALV;AAAA;AAAA,uBAM0BA,aAAa,CAACC,IAAd,EAN1B;;AAAA;AAMUC,gBAAAA,OANV;AAQQC,gBAAAA,GARR,GAQc,EARd;;AAWI,qBAASC,CAAT,IAAcF,OAAd,EAAuB;AAEfG,kBAAAA,MAFe,GAENH,OAAO,CAACE,CAAD,CAFD;AAInBD,kBAAAA,GAAG,CAACG,IAAJ,CAASD,MAAM,CAACE,IAAhB;AAEH;;AAEGC,gBAAAA,IAnBR,GAmBe,IAAInB,IAAI,CAACoB,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8BnB,MAAM,CAACoB,OAArC,CAnBf;AAAA,iDAoBWd,IAAI,CAENe,UAFE,CAES,IAAIpB,aAAJ,CAAkB,KAAKqB,MAAvB,EAA+B,MAA/B,EAAuCT,GAAG,CAACU,GAAJ,CAAQ,UAACC,KAAD;AAAA,yBAAY;AACvEC,oBAAAA,IAAI,YAAKD,KAAL,CADmE;AACrDA,oBAAAA,KAAK,YAAKA,KAAL;AADgD,mBAAZ;AAAA,iBAAR,CAAvC,EAET,MAFS,CAFT,EAKJE,SALI,CAKMR,IALN,CApBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAkCI,gBAAOZ,IAAP,EAAaqB,MAAb,EAAqBC,OAArB,EAA8B;AAC1BA,MAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBtB,IAAI,CAACF,IAAL,CAAUyB,GAA9B;AACH;AApCL;AAAA;AAAA,WAsCI,qBAAYvB,IAAZ,EAAkB;AACd,UAAMwB,IAAI,GAAGxB,IAAI,CAACF,IAAL,CAAU0B,IAAvB;AAEA,aAAO;AACH,0BAAkBA;AADf,OAAP;AAGH;AA5CL;;AAAA;AAAA,EAA6C/B,IAAI,CAACgC,SAAlD","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\n\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/variables/Node.vue\";\n\nexport class CrowdDetectionComponent extends Rete.Component {\n    constructor(){\n        super(\"Crowd Detection\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n\n        const urlDesktop = \"127.0.0.1:5000\"\n        const urlRasp = \"192.168.1.216:5000\"\n        \n        const responseZones = await fetch(`http://${urlDesktop}/sensors`);\n        const sensors = await responseZones.json();\n\n        let all = []\n\n\n        for (let x in sensors) {\n\n            let sensor = sensors[x]\n\n            all.push(sensor.name);\n            \n        }\n\n        let out1 = new Rete.Output('num', \"Out\", Socket.boolean);\n        return node\n\n            .addControl(new SelectControl(this.editor, 'zone', all.map((value) => ({\n            text: `${value}`, value: `${value}`,\n          })), \"Zone\"))\n          .addOutput(out1);\n    }\n\n    worker(node, inputs, outputs) {\n        outputs['output'] = node.data.num;\n    }\n\n    toJsonLogic(node) {\n        const zone = node.data.zone;\n\n        return {\n            \"crowdDetection\": zone\n        }  \n    }\n}"]},"metadata":{},"sourceType":"module"}