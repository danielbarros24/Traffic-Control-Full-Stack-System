{"ast":null,"code":"import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\nimport Node from \"rete-vue-render-plugin/src/end/Node.vue\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport { SwitchControl } from \"@/node-editor/controls/SwitchControl/SwitchControl\";\nexport class GpioComponent extends Rete.Component {\n  constructor() {\n    super(\"GPIO\");\n    this.data.component = Node;\n  }\n\n  async builder(node) {\n    const urlDesktop = \"127.0.0.1:5000\";\n    const urlRasp = \"192.168.1.216:5000\";\n    const responseGpios = await fetch(`http://${urlDesktop}/pins`);\n    const jsonGpios = await responseGpios.json();\n    jsonGpios.push(node.data.gpio);\n    var input = new Rete.Input('num', \"Input\", Socket.boolean, true);\n    return node.addInput(input).addControl(new SelectControl(this.editor, 'gpio', jsonGpios.map(value => ({\n      text: `GPIO ${value}`,\n      value: value\n    })), \"GPIO\")).addControl(new SwitchControl(this.editor, 'inverted'));\n  }\n\n  worker(node, inputs, outputs) {}\n\n  toJsonLogic(node) {\n    const {\n      inputs\n    } = node;\n\n    if (inputs.length == 0) {\n      return {};\n    }\n\n    const inputNum = inputs.get('num');\n    const {\n      connections\n    } = inputNum;\n\n    if (connections.length == 0) {\n      return {};\n    }\n\n    const connection = connections[0];\n    const connectionNode = connection.output.node;\n    const connectionComponent = this.editor.getComponent(connectionNode.name);\n    return connectionComponent.toJsonLogic?.(connectionNode);\n  }\n\n  toGPIO(node) {\n    const gpio = parseInt(node.data.gpio);\n    const inverted = node.data.inverted;\n    return {\n      gpio,\n      inverted\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/GpioComponent.js"],"names":["Rete","Socket","Node","SelectControl","SwitchControl","GpioComponent","Component","constructor","data","component","builder","node","urlDesktop","urlRasp","responseGpios","fetch","jsonGpios","json","push","gpio","input","Input","boolean","addInput","addControl","editor","map","value","text","worker","inputs","outputs","toJsonLogic","length","inputNum","get","connections","connection","connectionNode","output","connectionComponent","getComponent","name","toGPIO","parseInt","inverted"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAEA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,SAASC,aAAT,QAA8B,oDAA9B;AACA,SAASC,aAAT,QAA8B,oDAA9B;AAEA,OAAO,MAAMC,aAAN,SAA4BL,IAAI,CAACM,SAAjC,CAA2C;AAC9CC,EAAAA,WAAW,GAAE;AACT,UAAM,MAAN;AACA,SAAKC,IAAL,CAAUC,SAAV,GAAsBP,IAAtB;AACH;;AAEY,QAAPQ,OAAO,CAACC,IAAD,EAAO;AAChB,UAAMC,UAAU,GAAG,gBAAnB;AACA,UAAMC,OAAO,GAAG,oBAAhB;AAEA,UAAMC,aAAa,GAAG,MAAMC,KAAK,CAAE,UAASH,UAAW,OAAtB,CAAjC;AACA,UAAMI,SAAS,GAAG,MAAMF,aAAa,CAACG,IAAd,EAAxB;AACAD,IAAAA,SAAS,CAACE,IAAV,CAAeP,IAAI,CAACH,IAAL,CAAUW,IAAzB;AAEA,QAAIC,KAAK,GAAG,IAAIpB,IAAI,CAACqB,KAAT,CAAe,KAAf,EAAsB,OAAtB,EAA+BpB,MAAM,CAACqB,OAAtC,EAA+C,IAA/C,CAAZ;AACA,WAAOX,IAAI,CACRY,QADI,CACKH,KADL,EAEJI,UAFI,CAEO,IAAIrB,aAAJ,CAAkB,KAAKsB,MAAvB,EAA+B,MAA/B,EAAuCT,SAAS,CAACU,GAAV,CAAeC,KAAD,KAAY;AAC3EC,MAAAA,IAAI,EAAG,QAAOD,KAAM,EADuD;AACpDA,MAAAA,KAAK,EAAEA;AAD6C,KAAZ,CAAd,CAAvC,EAEP,MAFO,CAFP,EAKJH,UALI,CAKO,IAAIpB,aAAJ,CAAkB,KAAKqB,MAAvB,EAA+B,UAA/B,CALP,CAAP;AAMH;;AAEDI,EAAAA,MAAM,CAAClB,IAAD,EAAOmB,MAAP,EAAeC,OAAf,EAAwB,CAC7B;;AAEDC,EAAAA,WAAW,CAACrB,IAAD,EAAO;AACd,UAAM;AAAEmB,MAAAA;AAAF,QAAanB,IAAnB;;AAEA,QAAImB,MAAM,CAACG,MAAP,IAAiB,CAArB,EAAwB;AACpB,aAAO,EAAP;AACH;;AAED,UAAMC,QAAQ,GAAGJ,MAAM,CAACK,GAAP,CAAW,KAAX,CAAjB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkBF,QAAxB;;AAEA,QAAIE,WAAW,CAACH,MAAZ,IAAsB,CAA1B,EAA6B;AACzB,aAAO,EAAP;AACH;;AAED,UAAMI,UAAU,GAAGD,WAAW,CAAC,CAAD,CAA9B;AACA,UAAME,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkB5B,IAAzC;AACA,UAAM6B,mBAAmB,GAAG,KAAKf,MAAL,CAAYgB,YAAZ,CAAyBH,cAAc,CAACI,IAAxC,CAA5B;AAEA,WAAOF,mBAAmB,CAACR,WAApB,GAAkCM,cAAlC,CAAP;AACH;;AAEDK,EAAAA,MAAM,CAAChC,IAAD,EAAO;AACT,UAAMQ,IAAI,GAAGyB,QAAQ,CAACjC,IAAI,CAACH,IAAL,CAAUW,IAAX,CAArB;AACA,UAAM0B,QAAQ,GAAGlC,IAAI,CAACH,IAAL,CAAUqC,QAA3B;AAEA,WAAO;AAAC1B,MAAAA,IAAD;AAAO0B,MAAAA;AAAP,KAAP;AACH;;AApD6C","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\n\nimport Node from \"rete-vue-render-plugin/src/end/Node.vue\";\nimport { SelectControl } from \"@/node-editor/controls/SelectControl/SelectControl\";\nimport { SwitchControl } from \"@/node-editor/controls/SwitchControl/SwitchControl\";\n\nexport class GpioComponent extends Rete.Component {\n    constructor(){\n        super(\"GPIO\");\n        this.data.component = Node;\n    }\n\n    async builder(node) {\n        const urlDesktop = \"127.0.0.1:5000\"\n        const urlRasp = \"192.168.1.216:5000\"\n        \n        const responseGpios = await fetch(`http://${urlDesktop}/pins`);\n        const jsonGpios = await responseGpios.json();\n        jsonGpios.push(node.data.gpio)\n      \n        var input = new Rete.Input('num', \"Input\", Socket.boolean, true);\n        return node\n          .addInput(input)\n          .addControl(new SelectControl(this.editor, 'gpio', jsonGpios.map((value) => ({\n            text: `GPIO ${value}`, value: value,\n          })), \"GPIO\"))\n          .addControl(new SwitchControl(this.editor, 'inverted'))\n    }\n\n    worker(node, inputs, outputs) {\n    }\n\n    toJsonLogic(node) {\n        const { inputs } = node;\n\n        if (inputs.length == 0) {\n            return {};\n        }\n\n        const inputNum = inputs.get('num')\n        const { connections } = inputNum;\n\n        if (connections.length == 0) {\n            return {};\n        }\n\n        const connection = connections[0];\n        const connectionNode = connection.output.node;\n        const connectionComponent = this.editor.getComponent(connectionNode.name);\n\n        return connectionComponent.toJsonLogic?.(connectionNode);\n    }\n\n    toGPIO(node) {\n        const gpio = parseInt(node.data.gpio)\n        const inverted = node.data.inverted\n\n        return {gpio, inverted}\n    }\n}"]},"metadata":{},"sourceType":"module"}