{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nexport default {\n  data: () => ({\n    brokerFail: false,\n    //TABLE/////////////////////////////////////////////////////////////////\n    dialog: false,\n    dialogDelete: false,\n    headers: [{\n      text: \"Sensor\",\n      align: \"start\",\n      sortable: true,\n      value: \"name\"\n    }, {\n      text: \"Number of Lanes\",\n      align: \"center\",\n      value: \"lanes\"\n    }, {\n      text: \"Actions\",\n      value: \"actions\",\n      sortable: false\n    }],\n    editedIndex: -1,\n    editedItem: {\n      id: 0,\n      name: \"\",\n      lanes: 0\n    },\n    defaultItem: {\n      id: 0,\n      name: \"\",\n      lanes: 0\n    },\n    sensors: [],\n    lanesList: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n    sensorRules: [v => !!v || \"Cannot be empty!\"],\n    text_sensors: \"\",\n    /////////////////////////////////////////////////////////////////\n    snackbar_password: false,\n    snackbar_mqtt: false,\n    snackbar_sensors: false,\n    text_pass: \"Password changed!\",\n    text_mqtt: \"Error: Cannot communicate with System\",\n    text_sensors: \"Number of sensors changed!\",\n    timeout: 4000,\n    valid: true,\n    valid_mqtt: true,\n    valid_sensor: true,\n    password: \"\",\n    confirmPassword: \"\",\n    passwordRules: [v => !!v],\n    confirmPasswordRules: [v => !!v],\n    mqttRules: [v => !!v || \"Cannot be empty\", v => /\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b/.test(v) || \"Enter a valid IP address\"],\n    broker_ip: \"\",\n    SensorsRules: [v => !!v || \"Cannot be empty\"],\n    items: [{\n      title: \"Logout\",\n      icon: \"mdi-logout\",\n\n      click() {\n        this.$store.dispatch('logout');\n      }\n\n    }, {\n      title: \"Dashboard\",\n      icon: \"mdi-view-dashboard\",\n\n      click() {\n        this.$router.push(\"dashboard\");\n      }\n\n    }, {\n      title: \"Processes\",\n      icon: \"mdi-auto-fix\",\n\n      click() {\n        this.$router.push(\"processes\");\n      }\n\n    }]\n  }),\n\n  async mounted() {\n    await this.getSensors();\n    await this.getBrokerIP();\n    this.interval = setInterval(() => this.getBrokerState(), 3000);\n  },\n\n  async beforeDestroy() {\n    clearInterval(this.interval);\n  },\n\n  methods: {\n    async getBrokerState() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const responseState = await fetch(`http://${urlRasp}/broker-state`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const res = await responseState.json();\n\n      if (res.state == \"ok\") {\n        this.brokerFail = false;\n      } else {\n        this.brokerFail = true;\n      }\n    },\n\n    async getSensors() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const responseSensors = await fetch(`http://${urlRasp}/sensors`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const sensors_res = await responseSensors.json();\n      this.sensors = sensors_res;\n    },\n\n    resetForm() {\n      this.$refs.form.reset();\n    },\n\n    editItem(item) {\n      this.editedIndex = this.sensors.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n\n    deleteItem(item) {\n      this.editedIndex = this.sensors.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n\n    async deleteItemConfirm() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const id = this.editedItem.id;\n      const response = await fetch(`http://${urlRasp}/sensors?id=${id}`, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n\n      if (!response.ok) {\n        this.text_sensors = `An error has occured: ${response.status}`; //this.close();\n      } else {\n        this.text_sensors = \"Sensor Deleted!\";\n      }\n\n      this.snackbar_sensors = true;\n      this.sensors.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n\n    close() {\n      this.dialog = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    async save() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const sensor = {\n        name: this.editedItem.name,\n        lanes: this.editedItem.lanes\n      };\n      const file = JSON.stringify(sensor);\n\n      if (this.editedIndex > -1) {\n        const id = this.editedItem.id;\n        const response = await fetch(`http://${urlRasp}/sensors?id=${id}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n          },\n          body: file\n        });\n        Object.assign(this.sensors[this.editedIndex], this.editedItem);\n\n        if (!response.ok) {\n          this.text_sensors = `An error has occured: ${response.status}`; //this.close();\n        } else {\n          this.text_sensors = \"Sensor Edited!\";\n        }\n      } else {\n        const response = await fetch(`http://${urlRasp}/sensors`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n          },\n          body: file\n        });\n        this.sensors.push(this.editedItem);\n\n        if (!response.ok) {\n          this.text_sensors = `An error has occured: ${response.status}`;\n        } else {\n          this.text_sensors = \"Sensor Inserted! Please restart the system\";\n        }\n      }\n\n      this.snackbar_sensors = true;\n      await this.getSensors();\n      this.close();\n    },\n\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n\n    async submit_password() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const password = {\n        password: this.confirmPassword\n      };\n      const file = JSON.stringify(password);\n      const response = await fetch(`http://${urlRasp}/settings`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: file\n      });\n\n      if (!response.ok) {\n        this.text_pass = `An error has occured: ${response.status}`;\n      } else {\n        this.text_pass = \"Password changed!\";\n      }\n\n      this.password = \"\";\n      this.confirmPassword = \"\";\n      this.$refs.myForm.reset();\n    },\n\n    async submit_mqttIp() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const broker = {\n        Broker_IP: this.broker_ip\n      };\n      const file = JSON.stringify(broker);\n      const response = await fetch(`http://${urlRasp}/settings-broker`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: file\n      });\n\n      if (!response.ok) {\n        this.text_mqtt = `An error has occured: ${response.status}`;\n      } else if (response.ok) {\n        this.text_mqtt = \"Broker IP changed! Please restart the system!\";\n      }\n\n      this.snackbar_mqtt = true;\n    },\n\n    async getBrokerIP() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n      const response = await fetch(`http://${urlRasp}/settings-broker`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const ip = await response.json();\n      this.broker_ip = ip.Broker;\n    }\n\n  },\n  computed: { ...mapGetters('auth', {\n      isAuth: 'isAuthenticated'\n    }),\n\n    formTitle() {\n      return this.editedIndex === -1 ? \"New Sensor\" : \"Edit Sensor\";\n    },\n\n    passwordConfirmationRule() {\n      return () => this.password === this.confirmPassword || \"Password must match\";\n    }\n\n  },\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n\n    dialogDelete(val) {\n      val || this.closeDelete();\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0RA;AAEA;AAEAA;AACAC,qBADA;AAEA;AACAC,iBAHA;AAIAC,uBAJA;AAKAC,cACA;AACAC,oBADA;AAEAC,oBAFA;AAGAC,oBAHA;AAIAC;AAJA,KADA,EAOA;AAAAH;AAAAC;AAAAE;AAAA,KAPA,EAQA;AAAAH;AAAAG;AAAAD;AAAA,KARA,CALA;AAgBAE,mBAhBA;AAiBAC;AACAC,WADA;AAEAC,cAFA;AAGAC;AAHA,KAjBA;AAsBAC;AACAH,WADA;AAEAC,cAFA;AAGAC;AAHA,KAtBA;AA2BAE,eA3BA;AA4BAC,gBACA,CADA,EACA,CADA,EACA,CADA,EACA,CADA,EACA,CADA,EACA,CADA,EACA,CADA,EACA,CADA,EACA,CADA,EACA,EADA,EACA,EADA,EACA,EADA,EACA,EADA,EACA,EADA,EACA,EADA,EACA,EADA,EACA,EADA,EACA,EADA,EACA,EADA,EACA,EADA,CA5BA;AAgCAC,iDAhCA;AAiCAC,oBAjCA;AAkCA;AACAC,4BAnCA;AAoCAC,wBApCA;AAqCAC,2BArCA;AAsCAC,kCAtCA;AAuCAC,sDAvCA;AAwCAL,8CAxCA;AAyCAM,iBAzCA;AA2CAC,eA3CA;AA4CAC,oBA5CA;AA6CAC,sBA7CA;AA8CAC,gBA9CA;AA+CAC,uBA/CA;AAgDAC,6BAhDA;AAiDAC,oCAjDA;AAmDAC,gBACAC,6BADA,EAEAA,KACA,mEACA,0BAJA,CAnDA;AA0DAC,iBA1DA;AA4DAC,iDA5DA;AA8DAC,YACA;AACAC,qBADA;AAEAC,wBAFA;;AAGAC;AACA;AACA;;AALA,KADA,EAQA;AACAF,wBADA;AAEAC,gCAFA;;AAGAC;AACA;AACA;;AALA,KARA,EAeA;AACAF,wBADA;AAEAC,0BAFA;;AAGAC;AACA;AACA;;AALA,KAfA;AA9DA,IAFA;;AAyFA;AACA;AACA;AAEA;AACA,GA9FA;;AA+FA;AACAC;AACA,GAjGA;;AAmGAC;AACA;AACA;AACA;AAEA,0EACA;AAAArC;AACA;AADA;AAAA,OADA;AAIA;;AAEA;AACA;AACA,OAFA,MAGA;AACA;AACA;AACA,KAjBA;;AAmBA;AACA;AACA;AAEA,uEACA;AAAAA;AACA;AADA;AAAA,OADA;AAIA;AACA;AACA,KA7BA;;AA8BAsC;AACA;AACA,KAhCA;;AAiCAC;AACA;AACA;AACA;AACA,KArCA;;AAuCAC;AACA;AACA;AACA;AACA,KA3CA;;AA6CA;AACA;AACA;AAEA;AACA;AACAC,wBADA;AAEAzC;AACA;AADA;AAFA;;AAMA;AACA,uEADA,CAEA;AACA,OAHA,MAGA;AACA;AACA;;AACA;AACA;AACA;AACA,KAjEA;;AAmEA0C;AACA;AACA;AACA;AACA;AACA,OAHA;AAIA,KAzEA;;AA2EAC;AACA;AACA;AACA;AACA;AACA,OAHA;AAIA,KAjFA;;AAmFA;AACA;AACA;AAEA;AACAnC,kCADA;AAEAC;AAFA;AAKA;;AAEA;AAEA;AACA;AACAgC,yBADA;AAEAzC;AAAA;AAAA;AAAA,WAFA;AAGA4C;AAHA;AAKAC;;AACA;AACA,yEADA,CAEA;AACA,SAHA,MAGA;AACA;AACA;AACA,OAfA,MAeA;AACA;AACAJ,wBADA;AAEAzC;AAAA;AAAA;AAAA,WAFA;AAGA4C;AAHA;AAKA;;AACA;AACA;AACA,SAFA,MAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,KA7HA;;AA+HAE;AACA;AACA,KAjIA;;AAkIAC;AACA;AACA,KApIA;;AAqIA;AACA;AACA;AAEA;AACAvB;AADA;AAGA;AACA;AACAiB,uBADA;AAEAzC;AAAA;AAAA;AAAA,SAFA;AAGA4C;AAHA;;AAKA;AACA;AACA,OAFA,MAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KA3JA;;AA4JA;AACA;AACA;AAEA;AACAI;AADA;AAGA;AACA;AACAP,uBADA;AAEAzC;AAAA;AAAA;AAAA,SAFA;AAGA4C;AAHA;;AAKA;AACA;AACA,OAFA,MAEA;AACA;AACA;;AAEA;AACA,KAhLA;;AAkLA;AACA;AACA;AAEA;AAAA5C;AACA;AADA;AAAA;AAGA;AACA;AACA;;AA3LA,GAnGA;AAiSAiD,cACA;AACAC;AADA,MADA;;AAIAC;AACA;AACA,KANA;;AAOAC;AACA,mBACA,+DADA;AAEA;;AAVA,GAjSA;AA8SAC;AACAvD;AACAwD;AACA,KAHA;;AAIAvD;AACAuD;AACA;;AANA;AA9SA","names":["data","brokerFail","dialog","dialogDelete","headers","text","align","sortable","value","editedIndex","editedItem","id","name","lanes","defaultItem","sensors","lanesList","sensorRules","text_sensors","snackbar_password","snackbar_mqtt","snackbar_sensors","text_pass","text_mqtt","timeout","valid","valid_mqtt","valid_sensor","password","confirmPassword","passwordRules","confirmPasswordRules","mqttRules","v","broker_ip","SensorsRules","items","title","icon","click","clearInterval","methods","resetForm","editItem","deleteItem","method","close","closeDelete","body","Object","clickLogo","handleClick","Broker_IP","computed","isAuth","formTitle","passwordConfirmationRule","watch","val"],"sourceRoot":"src/views","sources":["Settings.vue"],"sourcesContent":["<template>\n  <div>\n    <v-app-bar color=\"transparent\" dark elevation=\"0\">\n      <v-img\n        max-height=\"35\"\n        max-width=\"35\"\n        src=\"../assets/logo_simple.png\"\n        @click=\"clickLogo()\"\n      ></v-img>\n      <v-toolbar-title class=\"ml-4\">Settings</v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-menu transition=\"slide-y-transition\" offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n        </template>\n\n        <v-list>\n          <v-list-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            @click=\"handleClick(index)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ item.title }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n    </v-app-bar>\n\n    <v-card>\n      <v-card-title class=\"text-h4 font-weight-bold\">\n        Administrator\n      </v-card-title>\n      <v-spacer></v-spacer>\n\n      <div class=\"ml-3\">\n        <v-card-subtitle class=\"text-h6 font-weight-medium\">\n          Change Password\n        </v-card-subtitle>\n\n        <v-card-text>\n          <v-form v-model=\"valid\" ref=\"myForm\">\n            <v-row>\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"password\"\n                  type=\"password\"\n                  :rules=\"passwordRules\"\n                  label=\"Set new password\"\n                ></v-text-field>\n              </v-col>\n\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"confirmPassword\"\n                  type=\"password\"\n                  :rules=\"confirmPasswordRules.concat(passwordConfirmationRule)\"\n                  label=\"Confirm new password\"\n                ></v-text-field>\n              </v-col>\n            </v-row>\n          </v-form>\n        </v-card-text>\n        <v-card-action>\n          <v-btn\n            class=\"ml-4\"\n            :disabled=\"!valid\"\n            @click=\"\n              submit_password();\n              snackbar_password = true;\n            \"\n          >\n            submit\n          </v-btn>\n        </v-card-action>\n\n        <v-row class=\"mt-8\">\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium\">\n              MQTT Broker Configuration\n            </v-card-subtitle>\n\n            <v-card-text>\n              <p class=\"text-h6 font-weight-medium mt-8\">\n                Change MQTT Broker IP\n              </p>\n              <v-form v-model=\"valid_mqtt\">\n                <v-text-field\n                  v-model=\"broker_ip\"\n                  label=\"Set new broker IP\"\n                  required\n                  :rules=\"mqttRules\"\n                ></v-text-field>\n              </v-form>\n            </v-card-text>\n\n            <v-card-action>\n              <v-btn\n                class=\"ml-4 mb-6\"\n                :disabled=\"!valid_mqtt\"\n                @click=\"\n                  submit_mqttIp\n                \"\n              >\n                submit\n              </v-btn>\n            </v-card-action>\n          </v-col>\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium mt-3\">\n              Sensors Configuration\n            </v-card-subtitle>\n\n            <v-data-table :headers=\"headers\" :items=\"sensors\" sort-by=\"sensors\">\n              <template v-slot:top>\n                <v-toolbar flat>\n                  <v-dialog v-model=\"dialog\" max-width=\"500px\">\n                    <template v-slot:activator=\"{ on, attrs }\">\n                      <v-btn\n                        color=\"primary\"\n                        dark\n                        class=\"mb-2\"\n                        v-bind=\"attrs\"\n                        v-on=\"on\"\n                        @click=\"resetForm\"\n                      >\n                        New Sensor\n                      </v-btn>\n                    </template>\n                    <v-card>\n                      <v-card-title>\n                        <span class=\"text-h5\">{{ formTitle }}</span>\n                      </v-card-title>\n\n                      <v-card-text>\n                        <v-form ref=\"form\" v-model=\"valid_sensor\">\n                          <v-text-field\n                            v-model=\"editedItem.name\"\n                            label=\"Sensor name\"\n                            required\n                            :rules=\"sensorRules\"\n                            hint=\"Sensor name must be the same as MQTT topic prefix\"\n                            persistent-hint\n                          ></v-text-field>\n                          <v-select\n                            class=\"mt-3\"\n                            v-model=\"editedItem.lanes\"\n                            :items=\"lanesList\"\n                            label=\"Number of lanes\"\n                            solo\n                            clearable\n                            dense\n                            required\n                            :rules=\"sensorRules\"\n                          ></v-select>\n                        </v-form>\n                      </v-card-text>\n\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn color=\"primary\" text @click=\"close\">\n                          Cancel\n                        </v-btn>\n                        <v-btn\n                          color=\"primary\"\n                          text\n                          @click=\"save\"\n                          :disabled=\"!valid_sensor\"\n                        >\n                          Save\n                        </v-btn>\n                      </v-card-actions>\n                    </v-card>\n                  </v-dialog>\n                  <v-dialog v-model=\"dialogDelete\" max-width=\"500px\">\n                    <v-card>\n                      <v-card-title class=\"text-h5\"\n                        >Are you sure you want to delete this\n                        item?</v-card-title\n                      >\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn color=\"primary\" text @click=\"closeDelete\"\n                          >Cancel</v-btn\n                        >\n                        <v-btn color=\"primary\" text @click=\"deleteItemConfirm\"\n                          >OK</v-btn\n                        >\n                        <v-spacer></v-spacer>\n                      </v-card-actions>\n                    </v-card>\n                  </v-dialog>\n                </v-toolbar>\n              </template>\n              <template v-slot:item.actions=\"{ item }\">\n                <v-icon small class=\"mr-2\" @click=\"editItem(item)\">\n                  mdi-pencil\n                </v-icon>\n                <v-icon small @click=\"deleteItem(item)\"> mdi-delete </v-icon>\n              </template>\n            </v-data-table>\n          </v-col>\n\n          <v-col> </v-col>\n        </v-row>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_password\" :timeout=\"timeout\">\n            {{ text_pass }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn\n                color=\"blue\"\n                text\n                dense\n                v-bind=\"attrs\"\n                @click=\"snackbar_password = false\"\n              >\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_mqtt\" :timeout=\"timeout\">\n            {{ text_mqtt }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn\n                color=\"blue\"\n                text\n                v-bind=\"attrs\"\n                @click=\"snackbar_mqtt = false\"\n              >\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_sensors\" :timeout=\"timeout\">\n            {{ text_sensors }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn\n                color=\"blue\"\n                text\n                v-bind=\"attrs\"\n                @click=\"snackbar_sensors = false\"\n              >\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n      </div>\n    </v-card>\n    <div class=\"text-center\">\n      <v-snackbar v-model=\"brokerFail\" color=\"red\" >\n        <h2 class=\"font-weight-medium\">BROKER COMMUNICATION DOWN!</h2>\n\n        <template v-slot:action=\"{ attrs }\">\n          <v-btn\n            color=\"white\"\n            text\n            v-bind=\"attrs\"\n            @click=\"brokerFail = false\"\n          >\n            Close\n          </v-btn>\n        </template>\n      </v-snackbar>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n\n  data: () => ({\n    brokerFail: false,\n    //TABLE/////////////////////////////////////////////////////////////////\n    dialog: false,\n    dialogDelete: false,\n    headers: [\n      {\n        text: \"Sensor\",\n        align: \"start\",\n        sortable: true,\n        value: \"name\",\n      },\n      { text: \"Number of Lanes\", align: \"center\", value: \"lanes\" },\n      { text: \"Actions\", value: \"actions\", sortable: false },\n    ],\n\n    editedIndex: -1,\n    editedItem: {\n      id: 0,\n      name: \"\",\n      lanes: 0,\n    },\n    defaultItem: {\n      id: 0,\n      name: \"\",\n      lanes: 0,\n    },\n    sensors: [],\n    lanesList: [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ],\n\n    sensorRules: [(v) => !!v || \"Cannot be empty!\"],\n    text_sensors: \"\",\n    /////////////////////////////////////////////////////////////////\n    snackbar_password: false,\n    snackbar_mqtt: false,\n    snackbar_sensors: false,\n    text_pass: \"Password changed!\",\n    text_mqtt: \"Error: Cannot communicate with System\",\n    text_sensors: \"Number of sensors changed!\",\n    timeout: 4000,\n\n    valid: true,\n    valid_mqtt: true,\n    valid_sensor: true,\n    password: \"\",\n    confirmPassword: \"\",\n    passwordRules: [(v) => !!v],\n    confirmPasswordRules: [(v) => !!v],\n\n    mqttRules: [\n      (v) => !!v || \"Cannot be empty\",\n      (v) =>\n        /\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b/.test(v) ||\n        \"Enter a valid IP address\",\n    ],\n\n    broker_ip: \"\",\n\n    SensorsRules: [(v) => !!v || \"Cannot be empty\"],\n\n    items: [\n      {\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click() {\n          this.$store.dispatch('logout');\n        },\n      },\n      {\n        title: \"Dashboard\",\n        icon: \"mdi-view-dashboard\",\n        click() {\n          this.$router.push(\"dashboard\");\n        },\n      },\n      {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n        click() {\n          this.$router.push(\"processes\");\n        },\n      },\n    ],\n  }),\n\n  async mounted() {\n    await this.getSensors();\n    await this.getBrokerIP();\n\n    this.interval = setInterval(() => this.getBrokerState(), 3000);\n  },\n  async beforeDestroy() {\n    clearInterval(this.interval)\n  },\n\n  methods: {\n    async getBrokerState() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n\n      const responseState= await fetch(`http://${urlRasp}/broker-state`,\n      {headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }});\n      const res = await responseState.json();\n\n      if (res.state == \"ok\") {\n        this.brokerFail = false\n      }\n      else {\n        this.brokerFail = true\n      }\n    },\n\n    async getSensors() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const responseSensors = await fetch(`http://${urlRasp}/sensors`,\n      {headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }});\n      const sensors_res = await responseSensors.json();\n      this.sensors = sensors_res;\n    },\n    resetForm() {\n      this.$refs.form.reset();\n    },\n    editItem(item) {\n      this.editedIndex = this.sensors.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n\n    deleteItem(item) {\n      this.editedIndex = this.sensors.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n\n    async deleteItemConfirm() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const id = this.editedItem.id;\n      const response = await fetch(`http://${urlRasp}/sensors?id=${id}`, {\n        method: \"DELETE\",\n        headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }\n      });\n      if (!response.ok) {\n        this.text_sensors = `An error has occured: ${response.status}`;\n        //this.close();\n      } else {\n        this.text_sensors = \"Sensor Deleted!\";\n      }\n      this.snackbar_sensors = true;\n      this.sensors.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n\n    close() {\n      this.dialog = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    async save() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const sensor = {\n        name: this.editedItem.name,\n        lanes: this.editedItem.lanes,\n      };\n\n      const file = JSON.stringify(sensor);\n\n      if (this.editedIndex > -1) {\n        \n        const id = this.editedItem.id;\n        const response = await fetch(`http://${urlRasp}/sensors?id=${id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\", 'Authorization': `Bearer ${localStorage.getItem(\"token\")}` },\n          body: file,\n        });\n        Object.assign(this.sensors[this.editedIndex], this.editedItem);\n        if (!response.ok) {\n          this.text_sensors = `An error has occured: ${response.status}`;\n          //this.close();\n        } else {\n          this.text_sensors = \"Sensor Edited!\";\n        }\n      } else {\n        const response = await fetch(`http://${urlRasp}/sensors`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\", 'Authorization': `Bearer ${localStorage.getItem(\"token\")}` },\n          body: file,\n        });\n        this.sensors.push(this.editedItem);\n        if (!response.ok) {\n          this.text_sensors = `An error has occured: ${response.status}`;\n        } else {\n          this.text_sensors = \"Sensor Inserted! Please restart the system\";\n        }\n      }\n      this.snackbar_sensors = true;\n      await this.getSensors();\n      this.close();\n    },\n\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    async submit_password() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const password = {\n        password: this.confirmPassword,\n      };\n      const file = JSON.stringify(password);\n      const response = await fetch(`http://${urlRasp}/settings`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\", 'Authorization': `Bearer ${localStorage.getItem(\"token\")}` },\n        body: file,\n      });\n      if (!response.ok) {\n        this.text_pass = `An error has occured: ${response.status}`;\n      } else {\n        this.text_pass = \"Password changed!\";\n      }\n\n      this.password = \"\";\n      this.confirmPassword = \"\";\n      this.$refs.myForm.reset();\n    },\n    async submit_mqttIp() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const broker = {\n        Broker_IP: this.broker_ip,\n      };\n      const file = JSON.stringify(broker);\n      const response = await fetch(`http://${urlRasp}/settings-broker`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\", 'Authorization': `Bearer ${localStorage.getItem(\"token\")}` },\n        body: file,\n      });\n      if (!response.ok) {\n        this.text_mqtt = `An error has occured: ${response.status}`;\n      } else if (response.ok) {\n        this.text_mqtt = \"Broker IP changed! Please restart the system!\";\n      }\n\n      this.snackbar_mqtt = true;\n    },\n\n    async getBrokerIP() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const response = await fetch(`http://${urlRasp}/settings-broker`, {headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }});\n      const ip = await response.json();\n      this.broker_ip = ip.Broker;\n    },\n  },\n\n  computed: {\n    ...mapGetters('auth', {\n\t\t\t\tisAuth: 'isAuthenticated',\n\t\t\t}),\n    formTitle() {\n      return this.editedIndex === -1 ? \"New Sensor\" : \"Edit Sensor\";\n    },\n    passwordConfirmationRule() {\n      return () =>\n        this.password === this.confirmPassword || \"Password must match\";\n    },\n  },\n\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n    dialogDelete(val) {\n      val || this.closeDelete();\n    },\n  },\n};\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module"}