{"ast":null,"code":"// Styles\nimport \"../../../src/components/VTextarea/VTextarea.sass\"; // Extensions\n\nimport VTextField from '../VTextField/VTextField'; // Utilities\n\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(VTextField);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'v-textarea',\n  props: {\n    autoGrow: Boolean,\n    noResize: Boolean,\n    rowHeight: {\n      type: [Number, String],\n      default: 24,\n      validator: v => !isNaN(parseFloat(v))\n    },\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: v => !isNaN(parseInt(v, 10))\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        'v-textarea': true,\n        'v-textarea--auto-grow': this.autoGrow,\n        'v-textarea--no-resize': this.noResizeHandle,\n        ...VTextField.options.computed.classes.call(this)\n      };\n    },\n\n    noResizeHandle() {\n      return this.noResize || this.autoGrow;\n    }\n\n  },\n  watch: {\n    autoGrow(val) {\n      this.$nextTick(() => {\n        var _this$$refs$input;\n\n        val ? this.calculateInputHeight() : (_this$$refs$input = this.$refs.input) == null ? void 0 : _this$$refs$input.style.removeProperty('height');\n      });\n    },\n\n    lazyValue() {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight);\n    },\n\n    rowHeight() {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight);\n    }\n\n  },\n\n  mounted() {\n    setTimeout(() => {\n      this.autoGrow && this.calculateInputHeight();\n    }, 0);\n  },\n\n  methods: {\n    calculateInputHeight() {\n      const input = this.$refs.input;\n      if (!input) return;\n      input.style.height = '0';\n      const height = input.scrollHeight;\n      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight); // This has to be done ASAP, waiting for Vue\n      // to update the DOM causes ugly layout jumping\n\n      input.style.height = Math.max(minHeight, height) + 'px';\n    },\n\n    genInput() {\n      const input = VTextField.options.methods.genInput.call(this);\n      input.tag = 'textarea';\n      delete input.data.attrs.type;\n      input.data.attrs.rows = this.rows;\n      return input;\n    },\n\n    onInput(e) {\n      VTextField.options.methods.onInput.call(this, e);\n      this.autoGrow && this.calculateInputHeight();\n    },\n\n    onKeyDown(e) {\n      // Prevents closing of a\n      // dialog when pressing\n      // enter\n      if (this.isFocused && e.keyCode === 13) {\n        e.stopPropagation();\n      }\n\n      this.$emit('keydown', e);\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["VTextField","mixins","baseMixins","extend","name","props","autoGrow","Boolean","noResize","rowHeight","type","Number","String","default","validator","v","isNaN","parseFloat","rows","parseInt","computed","classes","noResizeHandle","options","call","watch","val","$nextTick","calculateInputHeight","$refs","input","_this$$refs$input","style","removeProperty","lazyValue","mounted","setTimeout","methods","height","scrollHeight","minHeight","Math","max","genInput","tag","data","attrs","onInput","e","onKeyDown","isFocused","keyCode","stopPropagation","$emit"],"sourceRoot":"","sources":["../../../src/components/VTextarea/VTextarea.ts"],"sourcesContent":["// Styles\nimport './VTextarea.sass'\n\n// Extensions\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport Vue from 'vue'\n\ninterface options extends Vue {\n  $refs: {\n    input: HTMLTextAreaElement\n  }\n}\n\nconst baseMixins = mixins<options &\n  InstanceType<typeof VTextField>\n>(\n  VTextField\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'v-textarea',\n\n  props: {\n    autoGrow: Boolean,\n    noResize: Boolean,\n    rowHeight: {\n      type: [Number, String],\n      default: 24,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseInt(v, 10)),\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-textarea': true,\n        'v-textarea--auto-grow': this.autoGrow,\n        'v-textarea--no-resize': this.noResizeHandle,\n        ...VTextField.options.computed.classes.call(this),\n      }\n    },\n    noResizeHandle (): boolean {\n      return this.noResize || this.autoGrow\n    },\n  },\n\n  watch: {\n    autoGrow (val: boolean) {\n      this.$nextTick(() => {\n        val\n          ? this.calculateInputHeight()\n          : this.$refs.input?.style.removeProperty('height')\n      })\n    },\n    lazyValue () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n    rowHeight () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n  },\n\n  mounted () {\n    setTimeout(() => {\n      this.autoGrow && this.calculateInputHeight()\n    }, 0)\n  },\n\n  methods: {\n    calculateInputHeight () {\n      const input = this.$refs.input\n      if (!input) return\n\n      input.style.height = '0'\n      const height = input.scrollHeight\n      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight)\n      // This has to be done ASAP, waiting for Vue\n      // to update the DOM causes ugly layout jumping\n      input.style.height = Math.max(minHeight, height) + 'px'\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.tag = 'textarea'\n      delete input.data!.attrs!.type\n      input.data!.attrs!.rows = this.rows\n\n      return input\n    },\n    onInput (e: Event) {\n      VTextField.options.methods.onInput.call(this, e)\n      this.autoGrow && this.calculateInputHeight()\n    },\n    onKeyDown (e: KeyboardEvent) {\n      // Prevents closing of a\n      // dialog when pressing\n      // enter\n      if (this.isFocused && e.keyCode === 13) {\n        e.stopPropagation()\n      }\n\n      this.$emit('keydown', e)\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}