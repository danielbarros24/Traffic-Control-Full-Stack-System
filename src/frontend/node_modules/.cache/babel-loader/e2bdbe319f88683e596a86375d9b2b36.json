{"ast":null,"code":"import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/logical-operators/Node.vue\";\nexport class NOTComponent extends Rete.Component {\n  constructor() {\n    super(\"NOT\");\n    this.data.component = Node;\n  }\n\n  builder(node) {\n    var inp1 = new Rete.Input('input1', \"In\", Socket.boolean);\n    var out = new Rete.Output('num', \"Out\", Socket.boolean);\n    return node.addInput(inp1).addOutput(out);\n  }\n\n  worker(node, inputs, outputs) {\n    outputs['num'] = node.data.input;\n  }\n\n  _inputToJsonLogic(node, name) {\n    const {\n      inputs\n    } = node;\n    const input = inputs.get(name);\n    const {\n      connections\n    } = input;\n\n    if (connections.length == 0) {\n      return {};\n    }\n\n    const connection = connections[0];\n    const connectionNode = connection.output.node;\n    const connectionComponent = this.editor.getComponent(connectionNode.name);\n    return connectionComponent.toJsonLogic?.(connectionNode);\n  }\n\n  toJsonLogic(node) {\n    const input1 = this._inputToJsonLogic(node, 'input1');\n\n    return {\n      \"!\": input1\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/logical-operators/NOTComponent.js"],"names":["Rete","Socket","Node","NOTComponent","Component","constructor","data","component","builder","node","inp1","Input","boolean","out","Output","addInput","addOutput","worker","inputs","outputs","input","_inputToJsonLogic","name","get","connections","length","connection","connectionNode","output","connectionComponent","editor","getComponent","toJsonLogic","input1"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,gFAAjB;AAEA,OAAO,MAAMC,YAAN,SAA2BH,IAAI,CAACI,SAAhC,CAA0C;AAC7CC,EAAAA,WAAW,GAAE;AACT,UAAM,KAAN;AACA,SAAKC,IAAL,CAAUC,SAAV,GAAsBL,IAAtB;AACH;;AAEDM,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,QAAIC,IAAI,GAAG,IAAIV,IAAI,CAACW,KAAT,CAAe,QAAf,EAAwB,IAAxB,EAA8BV,MAAM,CAACW,OAArC,CAAX;AACA,QAAIC,GAAG,GAAG,IAAIb,IAAI,CAACc,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8Bb,MAAM,CAACW,OAArC,CAAV;AAEA,WAAOH,IAAI,CACNM,QADE,CACOL,IADP,EAEFM,SAFE,CAEQH,GAFR,CAAP;AAGH;;AAEDI,EAAAA,MAAM,CAACR,IAAD,EAAOS,MAAP,EAAeC,OAAf,EAAwB;AAC1BA,IAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBV,IAAI,CAACH,IAAL,CAAUc,KAA3B;AACH;;AAEDC,EAAAA,iBAAiB,CAACZ,IAAD,EAAOa,IAAP,EAAa;AAC1B,UAAM;AAAEJ,MAAAA;AAAF,QAAaT,IAAnB;AAEA,UAAMW,KAAK,GAAGF,MAAM,CAACK,GAAP,CAAWD,IAAX,CAAd;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAkBJ,KAAxB;;AAEA,QAAII,WAAW,CAACC,MAAZ,IAAsB,CAA1B,EAA6B;AACzB,aAAO,EAAP;AACH;;AAED,UAAMC,UAAU,GAAGF,WAAW,CAAC,CAAD,CAA9B;AACA,UAAMG,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkBnB,IAAzC;AACA,UAAMoB,mBAAmB,GAAG,KAAKC,MAAL,CAAYC,YAAZ,CAAyBJ,cAAc,CAACL,IAAxC,CAA5B;AAEA,WAAOO,mBAAmB,CAACG,WAApB,GAAkCL,cAAlC,CAAP;AACH;;AAEDK,EAAAA,WAAW,CAACvB,IAAD,EAAO;AACd,UAAMwB,MAAM,GAAG,KAAKZ,iBAAL,CAAuBZ,IAAvB,EAA6B,QAA7B,CAAf;;AAEA,WAAO;AAAC,WAAMwB;AAAP,KAAP;AACH;;AAxC4C","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../../sockets\";\nimport Node from \"../../../../node_modules/rete-vue-render-plugin/src/logical-operators/Node.vue\";\n\nexport class NOTComponent extends Rete.Component {\n    constructor(){\n        super(\"NOT\");\n        this.data.component = Node;\n    }\n    \n    builder(node) {\n        var inp1 = new Rete.Input('input1',\"In\", Socket.boolean);\n        var out = new Rete.Output('num', \"Out\", Socket.boolean);\n\n        return node\n            .addInput(inp1)\n            .addOutput(out);\n    }\n    \n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.input;\n    }\n\n    _inputToJsonLogic(node, name) {\n        const { inputs } = node;\n\n        const input = inputs.get(name)\n        const { connections } = input;\n\n        if (connections.length == 0) {\n            return {};\n        }\n\n        const connection = connections[0];\n        const connectionNode = connection.output.node;\n        const connectionComponent = this.editor.getComponent(connectionNode.name);\n\n        return connectionComponent.toJsonLogic?.(connectionNode);\n    }\n\n    toJsonLogic(node) {\n        const input1 = this._inputToJsonLogic(node, 'input1')\n\n        return {\"!\" : input1}\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}