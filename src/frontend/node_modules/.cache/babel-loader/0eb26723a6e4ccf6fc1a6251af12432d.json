{"ast":null,"code":"import Vue from 'vue';\nimport { validateTimestamp, parseTimestamp, parseDate } from '../util/timestamp';\nexport default Vue.extend({\n  name: 'times',\n  props: {\n    now: {\n      type: String,\n      validator: validateTimestamp\n    }\n  },\n  data: () => ({\n    times: {\n      now: parseTimestamp('0000-00-00 00:00', true),\n      today: parseTimestamp('0000-00-00', true)\n    }\n  }),\n  computed: {\n    parsedNow() {\n      return this.now ? parseTimestamp(this.now, true) : null;\n    }\n\n  },\n  watch: {\n    parsedNow: 'updateTimes'\n  },\n\n  created() {\n    this.updateTimes();\n    this.setPresent();\n  },\n\n  methods: {\n    setPresent() {\n      this.times.now.present = this.times.today.present = true;\n      this.times.now.past = this.times.today.past = false;\n      this.times.now.future = this.times.today.future = false;\n    },\n\n    updateTimes() {\n      const now = this.parsedNow || this.getNow();\n      this.updateDay(now, this.times.now);\n      this.updateTime(now, this.times.now);\n      this.updateDay(now, this.times.today);\n    },\n\n    getNow() {\n      return parseDate(new Date());\n    },\n\n    updateDay(now, target) {\n      if (now.date !== target.date) {\n        target.year = now.year;\n        target.month = now.month;\n        target.day = now.day;\n        target.weekday = now.weekday;\n        target.date = now.date;\n      }\n    },\n\n    updateTime(now, target) {\n      if (now.time !== target.time) {\n        target.hour = now.hour;\n        target.minute = now.minute;\n        target.time = now.time;\n      }\n    }\n\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,SACEC,iBADF,EAEEC,cAFF,EAGEC,SAHF,QAIO,mBAJP;AAOA,eAAeH,GAAG,CAACI,MAAJ,CAAW;AACxBC,MAAI,EAAE,OADkB;AAGxBC,OAAK,EAAE;AACLC,OAAG,EAAE;AACHC,UAAI,EAAEC,MADH;AAEHC,eAAS,EAAET;AAFR;AADA,GAHiB;AAUxBU,MAAI,EAAE,OAAO;AACXC,SAAK,EAAE;AACLL,SAAG,EAAEL,cAAc,CAAC,kBAAD,EAAqB,IAArB,CADd;AAELW,WAAK,EAAEX,cAAc,CAAC,YAAD,EAAe,IAAf;AAFhB;AADI,GAAP,CAVkB;AAiBxBY,UAAQ,EAAE;AACRC,aAAS;AACP,aAAO,KAAKR,GAAL,GAAWL,cAAc,CAAC,KAAKK,GAAN,EAAW,IAAX,CAAzB,GAA4C,IAAnD;AACD;;AAHO,GAjBc;AAuBxBS,OAAK,EAAE;AACLD,aAAS,EAAE;AADN,GAvBiB;;AA2BxBE,SAAO;AACL,SAAKC,WAAL;AACA,SAAKC,UAAL;AA7BsB;;AAgCxBC,SAAO,EAAE;AACPD,cAAU;AACR,WAAKP,KAAL,CAAWL,GAAX,CAAec,OAAf,GAAyB,KAAKT,KAAL,CAAWC,KAAX,CAAiBQ,OAAjB,GAA2B,IAApD;AACA,WAAKT,KAAL,CAAWL,GAAX,CAAee,IAAf,GAAsB,KAAKV,KAAL,CAAWC,KAAX,CAAiBS,IAAjB,GAAwB,KAA9C;AACA,WAAKV,KAAL,CAAWL,GAAX,CAAegB,MAAf,GAAwB,KAAKX,KAAL,CAAWC,KAAX,CAAiBU,MAAjB,GAA0B,KAAlD;AAJK;;AAMPL,eAAW;AACT,YAAMX,GAAG,GAAsB,KAAKQ,SAAL,IAAkB,KAAKS,MAAL,EAAjD;AACA,WAAKC,SAAL,CAAelB,GAAf,EAAoB,KAAKK,KAAL,CAAWL,GAA/B;AACA,WAAKmB,UAAL,CAAgBnB,GAAhB,EAAqB,KAAKK,KAAL,CAAWL,GAAhC;AACA,WAAKkB,SAAL,CAAelB,GAAf,EAAoB,KAAKK,KAAL,CAAWC,KAA/B;AAVK;;AAYPW,UAAM;AACJ,aAAOrB,SAAS,CAAC,IAAIwB,IAAJ,EAAD,CAAhB;AAbK;;AAePF,aAAS,CAAElB,GAAF,EAA0BqB,MAA1B,EAAmD;AAC1D,UAAIrB,GAAG,CAACsB,IAAJ,KAAaD,MAAM,CAACC,IAAxB,EAA8B;AAC5BD,cAAM,CAACE,IAAP,GAAcvB,GAAG,CAACuB,IAAlB;AACAF,cAAM,CAACG,KAAP,GAAexB,GAAG,CAACwB,KAAnB;AACAH,cAAM,CAACI,GAAP,GAAazB,GAAG,CAACyB,GAAjB;AACAJ,cAAM,CAACK,OAAP,GAAiB1B,GAAG,CAAC0B,OAArB;AACAL,cAAM,CAACC,IAAP,GAActB,GAAG,CAACsB,IAAlB;AACD;AAtBI;;AAwBPH,cAAU,CAAEnB,GAAF,EAA0BqB,MAA1B,EAAmD;AAC3D,UAAIrB,GAAG,CAAC2B,IAAJ,KAAaN,MAAM,CAACM,IAAxB,EAA8B;AAC5BN,cAAM,CAACO,IAAP,GAAc5B,GAAG,CAAC4B,IAAlB;AACAP,cAAM,CAACQ,MAAP,GAAgB7B,GAAG,CAAC6B,MAApB;AACAR,cAAM,CAACM,IAAP,GAAc3B,GAAG,CAAC2B,IAAlB;AACD;AACF;;AA9BM;AAhCe,CAAX,CAAf","names":["Vue","validateTimestamp","parseTimestamp","parseDate","extend","name","props","now","type","String","validator","data","times","today","computed","parsedNow","watch","created","updateTimes","setPresent","methods","present","past","future","getNow","updateDay","updateTime","Date","target","date","year","month","day","weekday","time","hour","minute"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/mixins/times.ts"],"sourcesContent":["import Vue from 'vue'\n\nimport {\n  validateTimestamp,\n  parseTimestamp,\n  parseDate,\n} from '../util/timestamp'\nimport { CalendarTimestamp } from 'vuetify/types'\n\nexport default Vue.extend({\n  name: 'times',\n\n  props: {\n    now: {\n      type: String,\n      validator: validateTimestamp,\n    },\n  },\n\n  data: () => ({\n    times: {\n      now: parseTimestamp('0000-00-00 00:00', true),\n      today: parseTimestamp('0000-00-00', true),\n    },\n  }),\n\n  computed: {\n    parsedNow (): CalendarTimestamp | null {\n      return this.now ? parseTimestamp(this.now, true) : null\n    },\n  },\n\n  watch: {\n    parsedNow: 'updateTimes',\n  },\n\n  created () {\n    this.updateTimes()\n    this.setPresent()\n  },\n\n  methods: {\n    setPresent (): void {\n      this.times.now.present = this.times.today.present = true\n      this.times.now.past = this.times.today.past = false\n      this.times.now.future = this.times.today.future = false\n    },\n    updateTimes (): void {\n      const now: CalendarTimestamp = this.parsedNow || this.getNow()\n      this.updateDay(now, this.times.now)\n      this.updateTime(now, this.times.now)\n      this.updateDay(now, this.times.today)\n    },\n    getNow (): CalendarTimestamp {\n      return parseDate(new Date())\n    },\n    updateDay (now: CalendarTimestamp, target: CalendarTimestamp): void {\n      if (now.date !== target.date) {\n        target.year = now.year\n        target.month = now.month\n        target.day = now.day\n        target.weekday = now.weekday\n        target.date = now.date\n      }\n    },\n    updateTime (now: CalendarTimestamp, target: CalendarTimestamp): void {\n      if (now.time !== target.time) {\n        target.hour = now.hour\n        target.minute = now.minute\n        target.time = now.time\n      }\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}