{"ast":null,"code":"import _objectSpread from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nexport default {\n  data: function data() {\n    var _ref;\n\n    return _ref = {\n      brokerFail: false,\n      //TABLE/////////////////////////////////////////////////////////////////\n      dialog: false,\n      dialogDelete: false,\n      headers: [{\n        text: \"Sensor\",\n        align: \"start\",\n        sortable: true,\n        value: \"name\"\n      }, {\n        text: \"Number of Lanes\",\n        align: \"center\",\n        value: \"lanes\"\n      }, {\n        text: \"Actions\",\n        value: \"actions\",\n        sortable: false\n      }],\n      editedIndex: -1,\n      editedItem: {\n        id: 0,\n        name: \"\",\n        lanes: 0\n      },\n      defaultItem: {\n        id: 0,\n        name: \"\",\n        lanes: 0\n      },\n      sensors: [],\n      lanesList: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n      sensorRules: [function (v) {\n        return !!v || \"Cannot be empty!\";\n      }],\n      text_sensors: \"\",\n      /////////////////////////////////////////////////////////////////\n      snackbar_password: false,\n      snackbar_mqtt: false,\n      snackbar_sensors: false,\n      text_pass: \"Password changed!\",\n      text_mqtt: \"Error: Cannot communicate with System\"\n    }, _defineProperty(_ref, \"text_sensors\", \"Number of sensors changed!\"), _defineProperty(_ref, \"timeout\", 4000), _defineProperty(_ref, \"valid\", true), _defineProperty(_ref, \"valid_mqtt\", true), _defineProperty(_ref, \"valid_sensor\", true), _defineProperty(_ref, \"password\", \"\"), _defineProperty(_ref, \"confirmPassword\", \"\"), _defineProperty(_ref, \"passwordRules\", [function (v) {\n      return !!v;\n    }]), _defineProperty(_ref, \"confirmPasswordRules\", [function (v) {\n      return !!v;\n    }]), _defineProperty(_ref, \"mqttRules\", [function (v) {\n      return !!v || \"Cannot be empty\";\n    }, function (v) {\n      return /\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b/.test(v) || \"Enter a valid IP address\";\n    }]), _defineProperty(_ref, \"broker_ip\", \"\"), _defineProperty(_ref, \"SensorsRules\", [function (v) {\n      return !!v || \"Cannot be empty\";\n    }]), _defineProperty(_ref, \"items\", [{\n      title: \"Logout\",\n      icon: \"mdi-logout\",\n      click: function click() {\n        this.$store.dispatch('logout');\n      }\n    }, {\n      title: \"Dashboard\",\n      icon: \"mdi-view-dashboard\",\n      click: function click() {\n        this.$router.push(\"dashboard\");\n      }\n    }, {\n      title: \"Processes\",\n      icon: \"mdi-auto-fix\",\n      click: function click() {\n        this.$router.push(\"processes\");\n      }\n    }]), _ref;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getSensors();\n\n            case 2:\n              _context.next = 4;\n              return _this.getBrokerIP();\n\n            case 4:\n              _this.interval = setInterval(function () {\n                return _this.getBrokerState();\n              }, 1000);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    getBrokerState: function getBrokerState() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var urlDesktop, urlRasp, responseState, res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                _context2.next = 4;\n                return fetch(\"http://\".concat(urlDesktop, \"/broker-state\"));\n\n              case 4:\n                responseState = _context2.sent;\n                _context2.next = 7;\n                return responseState.json();\n\n              case 7:\n                res = _context2.sent;\n\n                if (res.state == \"ok\") {\n                  _this2.brokerFail = false;\n                } else {\n                  _this2.brokerFail = true;\n                }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    getSensors: function getSensors() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var urlDesktop, urlRasp, responseSensors, sensors_res;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                _context3.next = 4;\n                return fetch(\"http://\".concat(urlDesktop, \"/sensors\"));\n\n              case 4:\n                responseSensors = _context3.sent;\n                _context3.next = 7;\n                return responseSensors.json();\n\n              case 7:\n                sensors_res = _context3.sent;\n                _this3.sensors = sensors_res;\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    resetForm: function resetForm() {\n      this.$refs.form.reset();\n    },\n    editItem: function editItem(item) {\n      this.editedIndex = this.sensors.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n    deleteItem: function deleteItem(item) {\n      this.editedIndex = this.sensors.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n    deleteItemConfirm: function deleteItemConfirm() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var urlDesktop, urlRasp, id, response;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                id = _this4.editedItem.id;\n                _context4.next = 5;\n                return fetch(\"http://\".concat(urlDesktop, \"/sensors?id=\").concat(id), {\n                  method: \"DELETE\"\n                });\n\n              case 5:\n                response = _context4.sent;\n\n                if (!response.ok) {\n                  _this4.text_sensors = \"An error has occured: \".concat(response.status); //this.close();\n                } else {\n                  _this4.text_sensors = \"Sensor Deleted!\";\n                }\n\n                _this4.snackbar_sensors = true;\n\n                _this4.sensors.splice(_this4.editedIndex, 1);\n\n                _this4.closeDelete();\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    close: function close() {\n      var _this5 = this;\n\n      this.dialog = false;\n      this.$nextTick(function () {\n        _this5.editedItem = Object.assign({}, _this5.defaultItem);\n        _this5.editedIndex = -1;\n      });\n    },\n    closeDelete: function closeDelete() {\n      var _this6 = this;\n\n      this.dialogDelete = false;\n      this.$nextTick(function () {\n        _this6.editedItem = Object.assign({}, _this6.defaultItem);\n        _this6.editedIndex = -1;\n      });\n    },\n    save: function save() {\n      var _this7 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var urlDesktop, urlRasp, sensor, file, id, response, _response;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                sensor = {\n                  name: _this7.editedItem.name,\n                  lanes: _this7.editedItem.lanes\n                };\n                file = JSON.stringify(sensor);\n\n                if (!(_this7.editedIndex > -1)) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                id = _this7.editedItem.id;\n                _context5.next = 8;\n                return fetch(\"http://\".concat(urlDesktop, \"/sensors?id=\").concat(id), {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 8:\n                response = _context5.sent;\n                Object.assign(_this7.sensors[_this7.editedIndex], _this7.editedItem);\n\n                if (!response.ok) {\n                  _this7.text_sensors = \"An error has occured: \".concat(response.status); //this.close();\n                } else {\n                  _this7.text_sensors = \"Sensor Edited!\";\n                }\n\n                _context5.next = 18;\n                break;\n\n              case 13:\n                _context5.next = 15;\n                return fetch(\"http://\".concat(urlDesktop, \"/sensors\"), {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 15:\n                _response = _context5.sent;\n\n                _this7.sensors.push(_this7.editedItem);\n\n                if (!_response.ok) {\n                  _this7.text_sensors = \"An error has occured: \".concat(_response.status);\n                } else {\n                  _this7.text_sensors = \"Sensor Inserted! Please restart the system\";\n                }\n\n              case 18:\n                _this7.snackbar_sensors = true;\n                _context5.next = 21;\n                return _this7.getSensors();\n\n              case 21:\n                _this7.close();\n\n              case 22:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    clickLogo: function clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick: function handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    submit_password: function submit_password() {\n      var _this8 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var urlDesktop, urlRasp, password, file, response;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                password = {\n                  password: _this8.confirmPassword\n                };\n                file = JSON.stringify(password);\n                _context6.next = 6;\n                return fetch(\"http://\".concat(urlDesktop, \"/settings\"), {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 6:\n                response = _context6.sent;\n\n                if (!response.ok) {\n                  _this8.text_pass = \"An error has occured: \".concat(response.status);\n                } else {\n                  _this8.text_pass = \"Password changed!\";\n                }\n\n                _this8.password = \"\";\n                _this8.confirmPassword = \"\";\n\n                _this8.$refs.myForm.reset();\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    submit_mqttIp: function submit_mqttIp() {\n      var _this9 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n        var urlDesktop, urlRasp, broker, file, response;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                broker = {\n                  Broker_IP: _this9.broker_ip\n                };\n                file = JSON.stringify(broker);\n                _context7.next = 6;\n                return fetch(\"http://\".concat(urlDesktop, \"/settings-broker\"), {\n                  method: \"PATCH\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: file\n                });\n\n              case 6:\n                response = _context7.sent;\n\n                if (!response.ok) {\n                  _this9.text_mqtt = \"An error has occured: \".concat(response.status);\n                } else if (response.ok) {\n                  _this9.text_mqtt = \"Broker IP changed! Please restart the system!\";\n                }\n\n                _this9.snackbar_mqtt = true;\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n    getBrokerIP: function getBrokerIP() {\n      var _this10 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n        var urlDesktop, urlRasp, response, ip;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                urlDesktop = \"127.0.0.1:5000\";\n                urlRasp = \"192.168.1.216:5000\";\n                _context8.next = 4;\n                return fetch(\"http://\".concat(urlDesktop, \"/settings-broker\"));\n\n              case 4:\n                response = _context8.sent;\n                _context8.next = 7;\n                return response.json();\n\n              case 7:\n                ip = _context8.sent;\n                _this10.broker_ip = ip.Broker;\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters('auth', {\n    isAuth: 'isAuthenticated'\n  })), {}, {\n    formTitle: function formTitle() {\n      return this.editedIndex === -1 ? \"New Sensor\" : \"Edit Sensor\";\n    },\n    passwordConfirmationRule: function passwordConfirmationRule() {\n      var _this11 = this;\n\n      return function () {\n        return _this11.password === _this11.confirmPassword || \"Password must match\";\n      };\n    }\n  }),\n  watch: {\n    dialog: function dialog(val) {\n      val || this.close();\n    },\n    dialogDelete: function dialogDelete(val) {\n      val || this.closeDelete();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["data","brokerFail","dialog","dialogDelete","headers","text","align","sortable","value","editedIndex","editedItem","id","name","lanes","defaultItem","sensors","lanesList","sensorRules","text_sensors","snackbar_password","snackbar_mqtt","snackbar_sensors","text_pass","text_mqtt","title","icon","click","mounted","methods","getBrokerState","urlDesktop","urlRasp","fetch","responseState","res","getSensors","responseSensors","sensors_res","resetForm","editItem","item","deleteItem","deleteItemConfirm","method","response","close","closeDelete","save","sensor","file","JSON","body","Object","clickLogo","handleClick","index","submit_password","password","submit_mqttIp","broker","Broker_IP","getBrokerIP","ip","computed","mapGetters","isAuth","formTitle","passwordConfirmationRule","watch","val"],"sourceRoot":"src/views","sources":["Settings.vue"],"sourcesContent":["<template>\n  <div>\n    <v-app-bar color=\"transparent\" dark elevation=\"0\">\n      <v-img\n        max-height=\"35\"\n        max-width=\"35\"\n        src=\"../assets/logo_simple.png\"\n        @click=\"clickLogo()\"\n      ></v-img>\n      <v-toolbar-title class=\"ml-4\">Settings</v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-menu transition=\"slide-y-transition\" offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n        </template>\n\n        <v-list>\n          <v-list-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            @click=\"handleClick(index)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ item.title }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n    </v-app-bar>\n\n    <v-card>\n      <v-card-title class=\"text-h4 font-weight-bold\">\n        Administrator\n      </v-card-title>\n      <v-spacer></v-spacer>\n\n      <div class=\"ml-3\">\n        <v-card-subtitle class=\"text-h6 font-weight-medium\">\n          Change Password\n        </v-card-subtitle>\n\n        <v-card-text>\n          <v-form v-model=\"valid\" ref=\"myForm\">\n            <v-row>\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"password\"\n                  type=\"password\"\n                  :rules=\"passwordRules\"\n                  label=\"Set new password\"\n                ></v-text-field>\n              </v-col>\n\n              <v-col cols=\"5\" md=\"2\">\n                <v-text-field\n                  v-model=\"confirmPassword\"\n                  type=\"password\"\n                  :rules=\"confirmPasswordRules.concat(passwordConfirmationRule)\"\n                  label=\"Confirm new password\"\n                ></v-text-field>\n              </v-col>\n            </v-row>\n          </v-form>\n        </v-card-text>\n        <v-card-action>\n          <v-btn\n            class=\"ml-4\"\n            :disabled=\"!valid\"\n            @click=\"\n              submit_password();\n              snackbar_password = true;\n            \"\n          >\n            submit\n          </v-btn>\n        </v-card-action>\n\n        <v-row class=\"mt-8\">\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium\">\n              MQTT Broker Configuration\n            </v-card-subtitle>\n\n            <v-card-text>\n              <p class=\"text-h6 font-weight-medium mt-8\">\n                Change MQTT Broker IP\n              </p>\n              <v-form v-model=\"valid_mqtt\">\n                <v-text-field\n                  v-model=\"broker_ip\"\n                  label=\"Set new broker IP\"\n                  required\n                  :rules=\"mqttRules\"\n                ></v-text-field>\n              </v-form>\n            </v-card-text>\n\n            <v-card-action>\n              <v-btn\n                class=\"ml-4 mb-6\"\n                :disabled=\"!valid_mqtt\"\n                @click=\"\n                  submit_mqttIp\n                \"\n              >\n                submit\n              </v-btn>\n            </v-card-action>\n          </v-col>\n          <v-col cols=\"9\" md=\"5\" sm=\"6\" class=\"mr-16\">\n            <v-card-subtitle class=\"text-h6 font-weight-medium mt-3\">\n              Sensors Configuration\n            </v-card-subtitle>\n\n            <v-data-table :headers=\"headers\" :items=\"sensors\" sort-by=\"sensors\">\n              <template v-slot:top>\n                <v-toolbar flat>\n                  <v-dialog v-model=\"dialog\" max-width=\"500px\">\n                    <template v-slot:activator=\"{ on, attrs }\">\n                      <v-btn\n                        color=\"primary\"\n                        dark\n                        class=\"mb-2\"\n                        v-bind=\"attrs\"\n                        v-on=\"on\"\n                        @click=\"resetForm\"\n                      >\n                        New Sensor\n                      </v-btn>\n                    </template>\n                    <v-card>\n                      <v-card-title>\n                        <span class=\"text-h5\">{{ formTitle }}</span>\n                      </v-card-title>\n\n                      <v-card-text>\n                        <v-form ref=\"form\" v-model=\"valid_sensor\">\n                          <v-text-field\n                            v-model=\"editedItem.name\"\n                            label=\"Sensor name\"\n                            required\n                            :rules=\"sensorRules\"\n                            hint=\"Sensor name must be the same as MQTT topic prefix\"\n                            persistent-hint\n                          ></v-text-field>\n                          <v-select\n                            class=\"mt-3\"\n                            v-model=\"editedItem.lanes\"\n                            :items=\"lanesList\"\n                            label=\"Number of lanes\"\n                            solo\n                            clearable\n                            dense\n                            required\n                            :rules=\"sensorRules\"\n                          ></v-select>\n                        </v-form>\n                      </v-card-text>\n\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn color=\"primary\" text @click=\"close\">\n                          Cancel\n                        </v-btn>\n                        <v-btn\n                          color=\"primary\"\n                          text\n                          @click=\"save\"\n                          :disabled=\"!valid_sensor\"\n                        >\n                          Save\n                        </v-btn>\n                      </v-card-actions>\n                    </v-card>\n                  </v-dialog>\n                  <v-dialog v-model=\"dialogDelete\" max-width=\"500px\">\n                    <v-card>\n                      <v-card-title class=\"text-h5\"\n                        >Are you sure you want to delete this\n                        item?</v-card-title\n                      >\n                      <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn color=\"primary\" text @click=\"closeDelete\"\n                          >Cancel</v-btn\n                        >\n                        <v-btn color=\"primary\" text @click=\"deleteItemConfirm\"\n                          >OK</v-btn\n                        >\n                        <v-spacer></v-spacer>\n                      </v-card-actions>\n                    </v-card>\n                  </v-dialog>\n                </v-toolbar>\n              </template>\n              <template v-slot:item.actions=\"{ item }\">\n                <v-icon small class=\"mr-2\" @click=\"editItem(item)\">\n                  mdi-pencil\n                </v-icon>\n                <v-icon small @click=\"deleteItem(item)\"> mdi-delete </v-icon>\n              </template>\n            </v-data-table>\n          </v-col>\n\n          <v-col> </v-col>\n        </v-row>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_password\" :timeout=\"timeout\">\n            {{ text_pass }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn\n                color=\"blue\"\n                text\n                dense\n                v-bind=\"attrs\"\n                @click=\"snackbar_password = false\"\n              >\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_mqtt\" :timeout=\"timeout\">\n            {{ text_mqtt }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn\n                color=\"blue\"\n                text\n                v-bind=\"attrs\"\n                @click=\"snackbar_mqtt = false\"\n              >\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n        <div class=\"text-center\">\n          <v-snackbar v-model=\"snackbar_sensors\" :timeout=\"timeout\">\n            {{ text_sensors }}\n\n            <template v-slot:action=\"{ attrs }\">\n              <v-btn\n                color=\"blue\"\n                text\n                v-bind=\"attrs\"\n                @click=\"snackbar_sensors = false\"\n              >\n                Close\n              </v-btn>\n            </template>\n          </v-snackbar>\n        </div>\n      </div>\n    </v-card>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n\n  data: () => ({\n    brokerFail: false,\n    //TABLE/////////////////////////////////////////////////////////////////\n    dialog: false,\n    dialogDelete: false,\n    headers: [\n      {\n        text: \"Sensor\",\n        align: \"start\",\n        sortable: true,\n        value: \"name\",\n      },\n      { text: \"Number of Lanes\", align: \"center\", value: \"lanes\" },\n      { text: \"Actions\", value: \"actions\", sortable: false },\n    ],\n\n    editedIndex: -1,\n    editedItem: {\n      id: 0,\n      name: \"\",\n      lanes: 0,\n    },\n    defaultItem: {\n      id: 0,\n      name: \"\",\n      lanes: 0,\n    },\n    sensors: [],\n    lanesList: [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ],\n\n    sensorRules: [(v) => !!v || \"Cannot be empty!\"],\n    text_sensors: \"\",\n    /////////////////////////////////////////////////////////////////\n    snackbar_password: false,\n    snackbar_mqtt: false,\n    snackbar_sensors: false,\n    text_pass: \"Password changed!\",\n    text_mqtt: \"Error: Cannot communicate with System\",\n    text_sensors: \"Number of sensors changed!\",\n    timeout: 4000,\n\n    valid: true,\n    valid_mqtt: true,\n    valid_sensor: true,\n    password: \"\",\n    confirmPassword: \"\",\n    passwordRules: [(v) => !!v],\n    confirmPasswordRules: [(v) => !!v],\n\n    mqttRules: [\n      (v) => !!v || \"Cannot be empty\",\n      (v) =>\n        /\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b/.test(v) ||\n        \"Enter a valid IP address\",\n    ],\n\n    broker_ip: \"\",\n\n    SensorsRules: [(v) => !!v || \"Cannot be empty\"],\n\n    items: [\n      {\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n        click() {\n          this.$store.dispatch('logout');\n        },\n      },\n      {\n        title: \"Dashboard\",\n        icon: \"mdi-view-dashboard\",\n        click() {\n          this.$router.push(\"dashboard\");\n        },\n      },\n      {\n        title: \"Processes\",\n        icon: \"mdi-auto-fix\",\n        click() {\n          this.$router.push(\"processes\");\n        },\n      },\n    ],\n  }),\n\n  async mounted() {\n    await this.getSensors();\n    await this.getBrokerIP();\n\n    this.interval = setInterval(() => this.getBrokerState(), 1000);\n  },\n\n  methods: {\n    async getBrokerState() {\n      const urlDesktop = \"127.0.0.1:5000\";\n      const urlRasp = \"192.168.1.216:5000\";\n\n      const responseState= await fetch(`http://${urlDesktop}/broker-state`);\n      const res = await responseState.json();\n\n      if (res.state == \"ok\") {\n        this.brokerFail = false\n      }\n      else {\n        this.brokerFail = true\n      }\n    },\n    async getSensors() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const responseSensors = await fetch(`http://${urlDesktop}/sensors`);\n      const sensors_res = await responseSensors.json();\n      this.sensors = sensors_res;\n    },\n    resetForm() {\n      this.$refs.form.reset();\n    },\n    editItem(item) {\n      this.editedIndex = this.sensors.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n\n    deleteItem(item) {\n      this.editedIndex = this.sensors.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n\n    async deleteItemConfirm() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const id = this.editedItem.id;\n      const response = await fetch(`http://${urlDesktop}/sensors?id=${id}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) {\n        this.text_sensors = `An error has occured: ${response.status}`;\n        //this.close();\n      } else {\n        this.text_sensors = \"Sensor Deleted!\";\n      }\n      this.snackbar_sensors = true;\n      this.sensors.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n\n    close() {\n      this.dialog = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    async save() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const sensor = {\n        name: this.editedItem.name,\n        lanes: this.editedItem.lanes,\n      };\n\n      const file = JSON.stringify(sensor);\n\n      if (this.editedIndex > -1) {\n        \n        const id = this.editedItem.id;\n        const response = await fetch(`http://${urlDesktop}/sensors?id=${id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: file,\n        });\n        Object.assign(this.sensors[this.editedIndex], this.editedItem);\n        if (!response.ok) {\n          this.text_sensors = `An error has occured: ${response.status}`;\n          //this.close();\n        } else {\n          this.text_sensors = \"Sensor Edited!\";\n        }\n      } else {\n        const response = await fetch(`http://${urlDesktop}/sensors`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: file,\n        });\n        this.sensors.push(this.editedItem);\n        if (!response.ok) {\n          this.text_sensors = `An error has occured: ${response.status}`;\n        } else {\n          this.text_sensors = \"Sensor Inserted! Please restart the system\";\n        }\n      }\n      this.snackbar_sensors = true;\n      await this.getSensors();\n      this.close();\n    },\n\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    async submit_password() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const password = {\n        password: this.confirmPassword,\n      };\n      const file = JSON.stringify(password);\n      const response = await fetch(`http://${urlDesktop}/settings`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n      if (!response.ok) {\n        this.text_pass = `An error has occured: ${response.status}`;\n      } else {\n        this.text_pass = \"Password changed!\";\n      }\n\n      this.password = \"\";\n      this.confirmPassword = \"\";\n      this.$refs.myForm.reset();\n    },\n    async submit_mqttIp() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const broker = {\n        Broker_IP: this.broker_ip,\n      };\n      const file = JSON.stringify(broker);\n      const response = await fetch(`http://${urlDesktop}/settings-broker`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: file,\n      });\n      if (!response.ok) {\n        this.text_mqtt = `An error has occured: ${response.status}`;\n      } else if (response.ok) {\n        this.text_mqtt = \"Broker IP changed! Please restart the system!\";\n      }\n\n      this.snackbar_mqtt = true;\n    },\n\n    async getBrokerIP() {\n      const urlDesktop = \"127.0.0.1:5000\"\n      const urlRasp = \"192.168.1.216:5000\"\n\n      const response = await fetch(`http://${urlDesktop}/settings-broker`);\n      const ip = await response.json();\n      this.broker_ip = ip.Broker;\n    },\n  },\n\n  computed: {\n    ...mapGetters('auth', {\n\t\t\t\tisAuth: 'isAuthenticated',\n\t\t\t}),\n    formTitle() {\n      return this.editedIndex === -1 ? \"New Sensor\" : \"Edit Sensor\";\n    },\n    passwordConfirmationRule() {\n      return () =>\n        this.password === this.confirmPassword || \"Password must match\";\n    },\n  },\n\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n    dialogDelete(val) {\n      val || this.closeDelete();\n    },\n  },\n};\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module"}