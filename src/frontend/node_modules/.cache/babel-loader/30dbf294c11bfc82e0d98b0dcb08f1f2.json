{"ast":null,"code":"// Styles\nimport \"../../../src/components/VBadge/VBadge.sass\"; // Components\n\nimport VIcon from '../VIcon/VIcon'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport Themeable from '../../mixins/themeable';\nimport Toggleable from '../../mixins/toggleable';\nimport Transitionable from '../../mixins/transitionable';\nimport { factory as PositionableFactory } from '../../mixins/positionable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { convertToUnit, getSlot } from '../../util/helpers';\nexport default mixins(Colorable, PositionableFactory(['left', 'bottom']), Themeable, Toggleable, Transitionable).extend({\n  name: 'v-badge',\n  props: {\n    avatar: Boolean,\n    bordered: Boolean,\n    color: {\n      type: String,\n      default: 'primary'\n    },\n    content: {\n      required: false\n    },\n    dot: Boolean,\n    label: {\n      type: String,\n      default: '$vuetify.badge'\n    },\n    icon: String,\n    inline: Boolean,\n    offsetX: [Number, String],\n    offsetY: [Number, String],\n    overlap: Boolean,\n    tile: Boolean,\n    transition: {\n      type: String,\n      default: 'scale-rotate-transition'\n    },\n    value: {\n      default: true\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        'v-badge--avatar': this.avatar,\n        'v-badge--bordered': this.bordered,\n        'v-badge--bottom': this.bottom,\n        'v-badge--dot': this.dot,\n        'v-badge--icon': this.icon != null,\n        'v-badge--inline': this.inline,\n        'v-badge--left': this.left,\n        'v-badge--overlap': this.overlap,\n        'v-badge--tile': this.tile,\n        ...this.themeClasses\n      };\n    },\n\n    computedBottom() {\n      return this.bottom ? 'auto' : this.computedYOffset;\n    },\n\n    computedLeft() {\n      if (this.isRtl) {\n        return this.left ? this.computedXOffset : 'auto';\n      }\n\n      return this.left ? 'auto' : this.computedXOffset;\n    },\n\n    computedRight() {\n      if (this.isRtl) {\n        return this.left ? 'auto' : this.computedXOffset;\n      }\n\n      return !this.left ? 'auto' : this.computedXOffset;\n    },\n\n    computedTop() {\n      return this.bottom ? this.computedYOffset : 'auto';\n    },\n\n    computedXOffset() {\n      return this.calcPosition(this.offsetX);\n    },\n\n    computedYOffset() {\n      return this.calcPosition(this.offsetY);\n    },\n\n    isRtl() {\n      return this.$vuetify.rtl;\n    },\n\n    // Default fallback if offsetX\n    // or offsetY are undefined.\n    offset() {\n      if (this.overlap) return this.dot ? 8 : 12;\n      return this.dot ? 2 : 4;\n    },\n\n    styles() {\n      if (this.inline) return {};\n      return {\n        bottom: this.computedBottom,\n        left: this.computedLeft,\n        right: this.computedRight,\n        top: this.computedTop\n      };\n    }\n\n  },\n  methods: {\n    calcPosition(offset) {\n      return `calc(100% - ${convertToUnit(offset || this.offset)})`;\n    },\n\n    genBadge() {\n      const lang = this.$vuetify.lang;\n      const label = this.$attrs['aria-label'] || lang.t(this.label);\n      const data = this.setBackgroundColor(this.color, {\n        staticClass: 'v-badge__badge',\n        style: this.styles,\n        attrs: {\n          'aria-atomic': this.$attrs['aria-atomic'] || 'true',\n          'aria-label': label,\n          'aria-live': this.$attrs['aria-live'] || 'polite',\n          title: this.$attrs.title,\n          role: this.$attrs.role || 'status'\n        },\n        directives: [{\n          name: 'show',\n          value: this.isActive\n        }]\n      });\n      const badge = this.$createElement('span', data, [this.genBadgeContent()]);\n      if (!this.transition) return badge;\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n          origin: this.origin,\n          mode: this.mode\n        }\n      }, [badge]);\n    },\n\n    genBadgeContent() {\n      // Dot prop shows no content\n      if (this.dot) return undefined;\n      const slot = getSlot(this, 'badge');\n      if (slot) return slot;\n      if (this.content) return String(this.content);\n      if (this.icon) return this.$createElement(VIcon, this.icon);\n      return undefined;\n    },\n\n    genBadgeWrapper() {\n      return this.$createElement('span', {\n        staticClass: 'v-badge__wrapper'\n      }, [this.genBadge()]);\n    }\n\n  },\n\n  render(h) {\n    const badge = [this.genBadgeWrapper()];\n    const children = [getSlot(this)];\n    const {\n      'aria-atomic': _x,\n      'aria-label': _y,\n      'aria-live': _z,\n      role,\n      title,\n      ...attrs\n    } = this.$attrs;\n    if (this.inline && this.left) children.unshift(badge);else children.push(badge);\n    return h('span', {\n      staticClass: 'v-badge',\n      attrs,\n      class: this.classes\n    }, children);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VIcon","Colorable","Themeable","Toggleable","Transitionable","factory","PositionableFactory","mixins","convertToUnit","getSlot","extend","name","props","avatar","Boolean","bordered","color","type","String","default","content","required","dot","label","icon","inline","offsetX","Number","offsetY","overlap","tile","transition","value","computed","classes","bottom","left","themeClasses","computedBottom","computedYOffset","computedLeft","isRtl","computedXOffset","computedRight","computedTop","calcPosition","$vuetify","rtl","offset","styles","right","top","methods","genBadge","lang","$attrs","t","data","setBackgroundColor","staticClass","style","attrs","title","role","directives","isActive","badge","$createElement","genBadgeContent","origin","mode","undefined","slot","genBadgeWrapper","render","h","children","_x","_y","_z","unshift","push","class"],"sourceRoot":"","sources":["../../../src/components/VBadge/VBadge.ts"],"sourcesContent":["// Styles\nimport './VBadge.sass'\n\n// Components\nimport VIcon from '../VIcon/VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport Themeable from '../../mixins/themeable'\nimport Toggleable from '../../mixins/toggleable'\nimport Transitionable from '../../mixins/transitionable'\nimport { factory as PositionableFactory } from '../../mixins/positionable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport {\n  convertToUnit,\n  getSlot,\n} from '../../util/helpers'\n\n// Types\nimport { VNode } from 'vue'\n\nexport default mixins(\n  Colorable,\n  PositionableFactory(['left', 'bottom']),\n  Themeable,\n  Toggleable,\n  Transitionable,\n/* @vue/component */\n).extend({\n  name: 'v-badge',\n\n  props: {\n    avatar: Boolean,\n    bordered: Boolean,\n    color: {\n      type: String,\n      default: 'primary',\n    },\n    content: { required: false },\n    dot: Boolean,\n    label: {\n      type: String,\n      default: '$vuetify.badge',\n    },\n    icon: String,\n    inline: Boolean,\n    offsetX: [Number, String],\n    offsetY: [Number, String],\n    overlap: Boolean,\n    tile: Boolean,\n    transition: {\n      type: String,\n      default: 'scale-rotate-transition',\n    },\n    value: { default: true },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-badge--avatar': this.avatar,\n        'v-badge--bordered': this.bordered,\n        'v-badge--bottom': this.bottom,\n        'v-badge--dot': this.dot,\n        'v-badge--icon': this.icon != null,\n        'v-badge--inline': this.inline,\n        'v-badge--left': this.left,\n        'v-badge--overlap': this.overlap,\n        'v-badge--tile': this.tile,\n        ...this.themeClasses,\n      }\n    },\n    computedBottom (): string {\n      return this.bottom ? 'auto' : this.computedYOffset\n    },\n    computedLeft (): string {\n      if (this.isRtl) {\n        return this.left ? this.computedXOffset : 'auto'\n      }\n\n      return this.left ? 'auto' : this.computedXOffset\n    },\n    computedRight (): string {\n      if (this.isRtl) {\n        return this.left ? 'auto' : this.computedXOffset\n      }\n\n      return !this.left ? 'auto' : this.computedXOffset\n    },\n    computedTop (): string {\n      return this.bottom ? this.computedYOffset : 'auto'\n    },\n    computedXOffset (): string {\n      return this.calcPosition(this.offsetX)\n    },\n    computedYOffset (): string {\n      return this.calcPosition(this.offsetY)\n    },\n    isRtl (): boolean {\n      return this.$vuetify.rtl\n    },\n    // Default fallback if offsetX\n    // or offsetY are undefined.\n    offset (): number {\n      if (this.overlap) return this.dot ? 8 : 12\n      return this.dot ? 2 : 4\n    },\n    styles (): object {\n      if (this.inline) return {}\n\n      return {\n        bottom: this.computedBottom,\n        left: this.computedLeft,\n        right: this.computedRight,\n        top: this.computedTop,\n      }\n    },\n  },\n\n  methods: {\n    calcPosition (offset: string | number): string {\n      return `calc(100% - ${convertToUnit(offset || this.offset)})`\n    },\n    genBadge () {\n      const lang = this.$vuetify.lang\n      const label = this.$attrs['aria-label'] || lang.t(this.label)\n\n      const data = this.setBackgroundColor(this.color, {\n        staticClass: 'v-badge__badge',\n        style: this.styles,\n        attrs: {\n          'aria-atomic': this.$attrs['aria-atomic'] || 'true',\n          'aria-label': label,\n          'aria-live': this.$attrs['aria-live'] || 'polite',\n          title: this.$attrs.title,\n          role: this.$attrs.role || 'status',\n        },\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      })\n\n      const badge = this.$createElement('span', data, [this.genBadgeContent()])\n\n      if (!this.transition) return badge\n\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n          origin: this.origin,\n          mode: this.mode,\n        },\n      }, [badge])\n    },\n    genBadgeContent () {\n      // Dot prop shows no content\n      if (this.dot) return undefined\n\n      const slot = getSlot(this, 'badge')\n\n      if (slot) return slot\n      if (this.content) return String(this.content)\n      if (this.icon) return this.$createElement(VIcon, this.icon)\n\n      return undefined\n    },\n    genBadgeWrapper () {\n      return this.$createElement('span', {\n        staticClass: 'v-badge__wrapper',\n      }, [this.genBadge()])\n    },\n  },\n\n  render (h): VNode {\n    const badge = [this.genBadgeWrapper()]\n    const children = [getSlot(this)]\n    const {\n      'aria-atomic': _x,\n      'aria-label': _y,\n      'aria-live': _z,\n      role,\n      title,\n      ...attrs\n    } = this.$attrs\n\n    if (this.inline && this.left) children.unshift(badge)\n    else children.push(badge)\n\n    return h('span', {\n      staticClass: 'v-badge',\n      attrs,\n      class: this.classes,\n    }, children)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}