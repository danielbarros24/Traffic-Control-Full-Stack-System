{"ast":null,"code":"import _classCallCheck from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Rete from \"rete\";\nimport * as Socket from \"../sockets\";\nexport var LessThanComponent = /*#__PURE__*/function (_Rete$Component) {\n  _inherits(LessThanComponent, _Rete$Component);\n\n  var _super = _createSuper(LessThanComponent);\n\n  function LessThanComponent() {\n    _classCallCheck(this, LessThanComponent);\n\n    return _super.call(this, \"A<B\");\n  }\n\n  _createClass(LessThanComponent, [{\n    key: \"builder\",\n    value: function builder(node) {\n      var inp1 = new Rete.Input('num1', \"A\", Socket.number);\n      var inp2 = new Rete.Input('num2', \"B\", Socket.number);\n      var out = new Rete.Output('num', \"Out\", Socket.boolean);\n      return node.addInput(inp1).addInput(inp2).addOutput(out);\n    }\n  }, {\n    key: \"worker\",\n    value: function worker(node, inputs, outputs) {\n      outputs['num'] = node.data.num;\n    }\n  }, {\n    key: \"_inputToJsonLogic\",\n    value: function _inputToJsonLogic(node, name) {\n      var _connectionComponent$;\n\n      var inputs = node.inputs;\n      var input = inputs.get(name);\n      var connections = input.connections;\n\n      if (connections.length == 0) {\n        return {};\n      }\n\n      var connection = connections[0];\n      var connectionNode = connection.output.node;\n      var connectionComponent = this.editor.getComponent(connectionNode.name);\n      return (_connectionComponent$ = connectionComponent.toJsonLogic) === null || _connectionComponent$ === void 0 ? void 0 : _connectionComponent$.call(connectionComponent, connectionNode);\n    }\n  }, {\n    key: \"toJsonLogic\",\n    value: function toJsonLogic(node) {\n      var json1 = this._inputToJsonLogic(node, 'num1');\n\n      var json2 = this._inputToJsonLogic(node, 'num2');\n\n      return {\n        \"<\": [json1, json2]\n      };\n    }\n  }]);\n\n  return LessThanComponent;\n}(Rete.Component);","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/LessThanComponent.js"],"names":["Rete","Socket","LessThanComponent","node","inp1","Input","number","inp2","out","Output","boolean","addInput","addOutput","inputs","outputs","data","num","name","input","get","connections","length","connection","connectionNode","output","connectionComponent","editor","getComponent","toJsonLogic","json1","_inputToJsonLogic","json2","Component"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAEA,WAAaC,iBAAb;AAAA;;AAAA;;AACI,+BAAa;AAAA;;AAAA,6BACH,KADG;AAEZ;;AAHL;AAAA;AAAA,WAKI,iBAAQC,IAAR,EAAc;AACV,UAAIC,IAAI,GAAG,IAAIJ,IAAI,CAACK,KAAT,CAAe,MAAf,EAAsB,GAAtB,EAA2BJ,MAAM,CAACK,MAAlC,CAAX;AACA,UAAIC,IAAI,GAAG,IAAIP,IAAI,CAACK,KAAT,CAAe,MAAf,EAAsB,GAAtB,EAA2BJ,MAAM,CAACK,MAAlC,CAAX;AACA,UAAIE,GAAG,GAAG,IAAIR,IAAI,CAACS,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8BR,MAAM,CAACS,OAArC,CAAV;AACA,aAAOP,IAAI,CACNQ,QADE,CACOP,IADP,EAEFO,QAFE,CAEOJ,IAFP,EAGFK,SAHE,CAGQJ,GAHR,CAAP;AAIH;AAbL;AAAA;AAAA,WAeI,gBAAOL,IAAP,EAAaU,MAAb,EAAqBC,OAArB,EAA8B;AAC1BA,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBX,IAAI,CAACY,IAAL,CAAUC,GAA3B;AACH;AAjBL;AAAA;AAAA,WAmBI,2BAAkBb,IAAlB,EAAwBc,IAAxB,EAA8B;AAAA;;AAC1B,UAAQJ,MAAR,GAAmBV,IAAnB,CAAQU,MAAR;AAEA,UAAMK,KAAK,GAAGL,MAAM,CAACM,GAAP,CAAWF,IAAX,CAAd;AACA,UAAQG,WAAR,GAAwBF,KAAxB,CAAQE,WAAR;;AAEA,UAAIA,WAAW,CAACC,MAAZ,IAAsB,CAA1B,EAA6B;AACzB,eAAO,EAAP;AACH;;AAED,UAAMC,UAAU,GAAGF,WAAW,CAAC,CAAD,CAA9B;AACA,UAAMG,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkBrB,IAAzC;AACA,UAAMsB,mBAAmB,GAAG,KAAKC,MAAL,CAAYC,YAAZ,CAAyBJ,cAAc,CAACN,IAAxC,CAA5B;AAEA,sCAAOQ,mBAAmB,CAACG,WAA3B,0DAAO,2BAAAH,mBAAmB,EAAeF,cAAf,CAA1B;AACH;AAlCL;AAAA;AAAA,WAoCI,qBAAYpB,IAAZ,EAAkB;AACd,UAAM0B,KAAK,GAAG,KAAKC,iBAAL,CAAuB3B,IAAvB,EAA6B,MAA7B,CAAd;;AACA,UAAM4B,KAAK,GAAG,KAAKD,iBAAL,CAAuB3B,IAAvB,EAA6B,MAA7B,CAAd;;AAEA,aAAO;AAAC,aAAM,CAAC0B,KAAD,EAAQE,KAAR;AAAP,OAAP;AACH;AAzCL;;AAAA;AAAA,EAAuC/B,IAAI,CAACgC,SAA5C","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\n\nexport class LessThanComponent extends Rete.Component {\n    constructor(){\n        super(\"A<B\");\n    }\n    \n    builder(node) {\n        var inp1 = new Rete.Input('num1',\"A\", Socket.number);\n        var inp2 = new Rete.Input('num2',\"B\", Socket.number);\n        var out = new Rete.Output('num', \"Out\", Socket.boolean);\n        return node\n            .addInput(inp1)\n            .addInput(inp2)\n            .addOutput(out);\n    }\n    \n    worker(node, inputs, outputs) {\n        outputs['num'] = node.data.num;\n    }\n\n    _inputToJsonLogic(node, name) {\n        const { inputs } = node;\n\n        const input = inputs.get(name)\n        const { connections } = input;\n\n        if (connections.length == 0) {\n            return {};\n        }\n\n        const connection = connections[0];\n        const connectionNode = connection.output.node;\n        const connectionComponent = this.editor.getComponent(connectionNode.name);\n\n        return connectionComponent.toJsonLogic?.(connectionNode);\n    }\n  \n    toJsonLogic(node) {\n        const json1 = this._inputToJsonLogic(node, 'num1')\n        const json2 = this._inputToJsonLogic(node, 'num2')\n\n        return {\"<\" : [json1, json2]}\n    }\n}"]},"metadata":{},"sourceType":"module"}