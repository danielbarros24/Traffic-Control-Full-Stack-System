{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ReteEditor from \"@/components/rete/ReteEditor\";\nimport * as dayjs from 'dayjs';\nexport default {\n  name: \"Automations\",\n  components: {\n    ReteEditor\n  },\n\n  data() {\n    return {\n      gpios: [],\n      value: null,\n      items: [{\n        title: \"Logout\",\n        icon: \"mdi-logout\",\n\n        click() {\n          console.log(\"logout\");\n          this.$router.push(\"/\");\n        }\n\n      }, {\n        title: \"Dashboard\",\n        icon: \"mdi-view-dashboard\",\n\n        click() {\n          console.log(\"dashboard\");\n          this.$router.push(\"dashboard\");\n        }\n\n      }, {\n        title: \"Settings\",\n        icon: \"mdi-cogs\",\n\n        click() {\n          console.log(\"settings\");\n          this.$router.push(\"settings\");\n        }\n\n      }],\n      menuStart: false,\n      menuEnd: false,\n      menu1: null,\n      menu2: null,\n      switch1: false,\n      AutomationName: \"\",\n      dialog: false,\n      rule_dialog: false,\n      dialogDelete: false,\n      headers: [{\n        text: \"\",\n        value: \"enable\",\n        sortable: false,\n        width: 0\n      }, {\n        text: \"Name\",\n        align: \"start\",\n        value: \"name\"\n      }, {\n        text: \"Actions\",\n        value: \"actions\",\n        sortable: false\n      }],\n      automations: [],\n      editedIndex: -1,\n      editedItem: {\n        id: 0,\n        name: \"\",\n        rule: 0,\n        gpios: [],\n        enable: false,\n        dates: [],\n        startHour: \"\",\n        endHour: \"\",\n        blueprint: {}\n      },\n      defaultItem: {\n        id: 0,\n        name: \"\",\n        rule: 0,\n        gpios: [],\n        enable: false,\n        dates: [],\n        startHour: \"\",\n        endHour: \"\",\n        blueprint: {}\n      },\n      editor: null,\n      editorJSON: \"\"\n    };\n  },\n\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? \"New Automation\" : \"Edit Automation\";\n    },\n\n    dateRangeText() {\n      return this.editedItem.dates.join(\" ~ \");\n    },\n\n    allGpios() {\n      if (this.editedIndex < 0) {\n        return this.gpios.sort((a, b) => a.value - b.value);\n      }\n\n      return this.gpios.concat(this.automations[this.editedIndex].gpios.map(value => ({\n        text: `GPIO ${value}`,\n        value: value\n      }))).sort((a, b) => a.value - b.value);\n    },\n\n    orderEditedGpios: {\n      get() {\n        return this.editedItem.gpios.sort((a, b) => a - b);\n      },\n\n      set(value) {\n        this.editedItem.gpios = value;\n      }\n\n    }\n  },\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n\n    dialogDelete(val) {\n      val || this.closeDelete();\n    }\n\n  },\n\n  async mounted() {\n    const responseAutomations = await fetch(\"http://127.0.0.1:5000/automation\");\n    const jsonAutomations = await responseAutomations.json();\n    this.automations = jsonAutomations.map(val => {\n      const startTime = new Date(val.startTime);\n      const endTime = new Date(val.endTime);\n      delete val.startTime;\n      delete val.endTime;\n      val.dates = [`${dayjs(startTime).format('YYYY-MM-DD')}`, `${dayjs(endTime).format('YYYY-MM-DD')}`];\n      val.startHour = `${dayjs(startTime).format('HH:mm')}`;\n      val.endHour = `${dayjs(endTime).format('HH:mm')}`;\n      return val;\n    });\n    this.getPins();\n  },\n\n  methods: {\n    async createNodeClick() {},\n\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n\n    async getPins() {\n      const responseGpios = await fetch(\"http://127.0.0.1:5000/pins\");\n      const jsonGpios = await responseGpios.json();\n      this.gpios = jsonGpios.map(value => ({\n        text: `GPIO ${value}`,\n        value: value\n      }));\n    },\n\n    async editItem(item) {\n      this.editedIndex = this.automations.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n      setTimeout(async () => {\n        const blueprint = this.editedItem.blueprint; // import blueprint\n\n        await this.editor.fromJSON(blueprint);\n      }, 200);\n    },\n\n    async createItem() {\n      this.dialog = true;\n      setTimeout(async () => {\n        await this.editor.clear();\n      }, 200);\n    },\n\n    deleteItem(item) {\n      this.editedIndex = this.automations.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n\n    async deleteItemConfirm() {\n      const id = this.editedItem.id;\n      await fetch(`http://127.0.0.1:5000/automation?id=${id}`, {\n        method: \"DELETE\"\n      });\n      this.automations.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n\n    close() {\n      this.dialog = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    async save() {\n      const editor = this.editor;\n      const blueprint = await editor.toJSON();\n      const endNode = this.editor.nodes.find(node => node.name === \"End\");\n      const endComponent = editor.getComponent(\"End\");\n      const logic = endComponent.toJsonLogic?.(endNode);\n      const dates = this.editedItem.dates;\n      const startHour = this.editedItem.startHour;\n      const endHour = this.editedItem.endHour;\n      const startTime = dayjs(dates[0] + ' ' + startHour).toISOString();\n      const endTime = dayjs(dates[1] + ' ' + endHour).toISOString();\n      const automation = {\n        name: this.editedItem.name,\n        startTime: startTime,\n        endTime: endTime,\n        enable: this.editedItem.enable,\n        gpios: this.editedItem.gpios,\n        rules: logic,\n        blueprint: blueprint\n      };\n      const file = JSON.stringify(automation);\n      console.log(file);\n\n      if (this.editedIndex > -1) {\n        const id = this.editedItem.id;\n        await fetch(`http://127.0.0.1:5000/automation?id=${id}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: file\n        });\n        Object.assign(this.automations[this.editedIndex], this.editedItem);\n      } else {\n        await fetch(\"http://127.0.0.1:5000/automation\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: file\n        });\n        this.automations.push(this.editedItem);\n      }\n\n      this.close();\n    },\n\n    async updateEnable(event, item) {\n      const id = item.id;\n      await fetch(`http://127.0.0.1:5000/automation?id=${id}`, {\n        method: \"PATCH\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          enable: !!event\n        })\n      });\n    },\n\n    async onExport() {\n      const editor = this.editor;\n      const endNode = this.editor.nodes.find(node => node.name === \"End\");\n      const endComponent = editor.getComponent(\"End\");\n      console.log(JSON.stringify(endComponent.toJsonLogic?.(endNode)));\n    },\n\n    async onEditorImport() {\n      await this.editor.fromJSON(JSON.parse(this.editorJSON));\n    },\n\n    async onEditorSync() {\n      this.editorJSON = JSON.stringify(await this.editor.toJSON());\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","components","ReteEditor","data","gpios","value","items","title","icon","click","console","menuStart","menuEnd","menu1","menu2","switch1","AutomationName","dialog","rule_dialog","dialogDelete","headers","text","sortable","width","align","automations","editedIndex","editedItem","id","rule","enable","dates","startHour","endHour","blueprint","defaultItem","editor","editorJSON","computed","formTitle","dateRangeText","allGpios","orderEditedGpios","get","set","watch","val","methods","handleClick","clickLogo","setTimeout","deleteItem","method","close","closeDelete","startTime","endTime","rules","body","Object"],"sourceRoot":"src/views","sources":["Automations.vue"],"sourcesContent":["<template>\n  <div>\n    <v-app-bar color=\"transparent\" dark elevation=\"0\">\n      <v-img\n        max-height=\"35\"\n        max-width=\"35\"\n        src=\"../assets/logo_simple.png\"\n        @click=\"clickLogo()\"\n      ></v-img>\n      <v-toolbar-title class=\"ml-4\">Automations</v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-menu transition=\"slide-y-transition\" offset-y>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-account</v-icon>\n          </v-btn>\n        </template>\n\n        <v-list>\n          <v-list-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            @click=\"handleClick(index)\"\n          >\n            <v-list-item-icon>\n              <v-icon v-text=\"item.icon\"></v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ item.title }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n    </v-app-bar>\n\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"automations\"\n      class=\"elevation-24 mt-13\"\n    >\n      <template v-slot:top>\n        <v-toolbar flat>\n          <v-toolbar-title class=\"font-weight-bold\"\n            >Automations</v-toolbar-title\n          >\n          <v-spacer></v-spacer>\n          <v-btn\n            color=\"secondary\"\n            depressed\n            elevation=\"4\"\n            raised\n            mx-auto\n            rounded\n            dark\n            @click=\"createItem(); getPins();\"\n          >\n            <v-icon class=\"mr-3\">mdi-plus</v-icon>Create automation\n          </v-btn>\n          <v-dialog v-model=\"dialog\" full-screen>\n            <v-card overflow-hidden>\n              <v-card-title>\n                <span class=\"text-h4 font-weight-bold\">{{ formTitle }}</span>\n              </v-card-title>\n              <v-card-actions>\n                <v-btn color=\"blue darken-1 mr-auto\" text @click=\"save\">\n                  Save\n                </v-btn>\n                <v-btn color=\"blue darken-1 mr-auto\" text @click=\"close\">\n                  Cancel\n                </v-btn>\n              </v-card-actions>\n\n              <v-card-text>\n                <v-row>\n                  <v-col cols=\"4\" md=\"2\">\n                    <h2 class=\"mt-12\">Name</h2>\n                    <v-text-field\n                      v-model=\"editedItem.name\"\n                      label=\"Insert Automation Name Here!\"\n                      required\n                      class=\"mt-3 mb-6\"\n                    ></v-text-field>\n\n                    <div>\n                      <h2>Time</h2>\n                      <v-menu\n                        v-model=\"menu2\"\n                        :close-on-content-click=\"false\"\n                        :nudge-right=\"40\"\n                        transition=\"scale-transition\"\n                        offset-y\n                        min-width=\"auto\"\n                      >\n                        <template v-slot:activator=\"{ on, attrs }\">\n                          <v-text-field\n                            v-model=\"dateRangeText\"\n                            label=\"Select date range\"\n                            prepend-icon=\"mdi-calendar\"\n                            readonly\n                            v-bind=\"attrs\"\n                            v-on=\"on\"\n                            class=\"mt-3\"\n                          ></v-text-field>\n                        </template>\n                        <v-date-picker\n                          v-model=\"editedItem.dates\"\n                          range\n                        ></v-date-picker>\n                      </v-menu>\n\n                      <v-menu\n                        ref=\"menu1\"\n                        v-model=\"menuStart\"\n                        :close-on-content-click=\"false\"\n                        :nudge-right=\"40\"\n                        :return-value.sync=\"editedItem.startHour\"\n                        transition=\"scale-transition\"\n                        offset-y\n                        max-width=\"290px\"\n                        min-width=\"290px\"\n                      >\n                        <template v-slot:activator=\"{ on, attrs }\">\n                          <v-text-field\n                            v-model=\"editedItem.startHour\"\n                            label=\"Start Time\"\n                            prepend-icon=\"mdi-clock-time-four-outline\"\n                            readonly\n                            v-bind=\"attrs\"\n                            v-on=\"on\"\n                          ></v-text-field>\n                        </template>\n                        <v-time-picker\n                          v-if=\"menuStart\"\n                          v-model=\"editedItem.startHour\"\n                          format=\"24h\"\n                          scrollable\n                          full-width\n                          @click:minute=\"$refs.menu1.save(editedItem.startHour)\"\n                        ></v-time-picker>\n                      </v-menu>\n\n                      <v-menu\n                        ref=\"menu2\"\n                        v-model=\"menuEnd\"\n                        :close-on-content-click=\"false\"\n                        :nudge-right=\"40\"\n                        :return-value.sync=\"editedItem.endHour\"\n                        transition=\"scale-transition\"\n                        offset-y\n                        max-width=\"290px\"\n                        min-width=\"290px\"\n                      >\n                        <template v-slot:activator=\"{ on, attrs }\">\n                          <v-text-field\n                            v-model=\"editedItem.endHour\"\n                            label=\"End Time\"\n                            prepend-icon=\"mdi-clock-time-four-outline\"\n                            readonly\n                            v-bind=\"attrs\"\n                            v-on=\"on\"\n                            class=\"mb-6\"\n                          ></v-text-field>\n                        </template>\n                        <v-time-picker\n                          v-if=\"menuEnd\"\n                          v-model=\"editedItem.endHour\"\n                          format=\"24h\"\n                          scrollable\n                          full-width\n                          @click:minute=\"$refs.menu2.save(editedItem.endHour)\"\n                        ></v-time-picker>\n                      </v-menu>\n                    </div>\n\n                    <div>\n                      <h2>Outputs</h2>\n                      <v-row>\n                        <v-autocomplete\n                          v-model=\"orderEditedGpios\"\n                          :items=\"allGpios\"\n                          chips\n                          deletable-chips\n                          multiple\n                          label=\"Select GPIOS as outputs\"\n                          class=\"ml-3 mt-3 mb-6\"\n                        >\n                          <template v-slot:item=\"{ item, on, attrs }\">\n                            <v-list-item v-on=\"on\" v-bind=\"attrs\">\n                              <v-list-item-content>\n                                <v-list-item-title>\n                                  <v-chip dark color=\"primary\">\n                                    {{ item.text }}\n                                  </v-chip>\n                                </v-list-item-title>\n                              </v-list-item-content>\n                            </v-list-item>\n                          </template>\n                        </v-autocomplete>\n                      </v-row>\n                    </div>\n\n                    <div>\n                      <h2>Enable</h2>\n                      <v-switch v-model=\"editedItem.enable\"></v-switch>\n                    </div>\n\n                    <v-btn @click=\"onExport\">Export</v-btn>\n\n                    <v-textarea v-model=\"editorJSON\"></v-textarea>\n                    <v-btn @click=\"onEditorSync\">Sync</v-btn>\n                    <v-btn @click=\"onEditorImport\">Import</v-btn>\n                  </v-col>\n                  <v-col md=\"10\">\n                    <ReteEditor v-model=\"editor\" />\n                  </v-col>\n                </v-row>\n              </v-card-text>\n            </v-card>\n          </v-dialog>\n\n          <v-dialog v-model=\"dialogDelete\" max-width=\"573px\">\n            <v-card>\n              <v-card-title class=\"text-h5\"\n                >Are you sure you want to delete this automation?</v-card-title\n              >\n              <v-card-actions>\n                <v-spacer></v-spacer>\n                <v-btn color=\"blue darken-1\" text @click=\"closeDelete\"\n                  >Cancel</v-btn\n                >\n                <v-btn color=\"blue darken-1\" text @click=\"deleteItemConfirm\"\n                  >OK</v-btn\n                >\n                <v-spacer></v-spacer>\n              </v-card-actions>\n            </v-card>\n          </v-dialog>\n        </v-toolbar>\n      </template>\n      <template v-slot:[`item.enable`]=\"{ item }\">\n        <v-switch\n          :input-value=\"item.enable\"\n          @change=\"updateEnable($event, item)\"\n          hide-details\n          class=\"ma-0 pa-0\"\n        ></v-switch>\n      </template>\n      <template v-slot:[`item.actions`]=\"{ item }\">\n        <v-icon small class=\"mr-2\" @click=\"editItem(item)\"> mdi-pencil </v-icon>\n        <v-icon small @click=\"deleteItem(item)\"> mdi-delete </v-icon>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n\n<script>\nimport ReteEditor from \"@/components/rete/ReteEditor\";\nimport * as dayjs from 'dayjs'\n\n\nexport default {\n  name: \"Automations\",\n  components: {\n    ReteEditor,\n  },\n\n  data() {\n\n    return {\n      gpios: [],\n      value: null,\n\n      items: [\n        {\n          title: \"Logout\",\n          icon: \"mdi-logout\",\n          click() {\n            console.log(\"logout\");\n            this.$router.push(\"/\");\n          },\n        },\n        {\n          title: \"Dashboard\",\n          icon: \"mdi-view-dashboard\",\n          click() {\n            console.log(\"dashboard\");\n            this.$router.push(\"dashboard\");\n          },\n        },\n        {\n          title: \"Settings\",\n          icon: \"mdi-cogs\",\n          click() {\n            console.log(\"settings\");\n            this.$router.push(\"settings\");\n          },\n        },\n      ],\n\n      menuStart: false,\n      menuEnd: false,\n      menu1: null,\n      menu2: null,\n\n      switch1: false,\n\n      AutomationName: \"\",\n      dialog: false,\n      rule_dialog: false,\n      dialogDelete: false,\n      \n      headers: [\n        {\n          text: \"\",\n          value: \"enable\",\n          sortable: false,\n          width: 0,\n        },\n        {\n          text: \"Name\",\n          align: \"start\",\n          value: \"name\",\n        },\n        { text: \"Actions\", value: \"actions\", sortable: false },\n      ],\n      automations: [],\n      editedIndex: -1,\n      editedItem: {\n        id: 0,\n        name: \"\",\n        rule: 0,\n        gpios: [],\n        enable: false,\n        dates: [],\n        startHour: \"\",\n        endHour: \"\",\n        blueprint: {},\n      },\n\n      defaultItem: {\n        id: 0,\n        name: \"\",\n        rule: 0,\n        gpios: [],\n        enable: false,\n        dates: [],\n        startHour: \"\",\n        endHour: \"\",\n        blueprint: {},\n      },\n\n      editor: null,\n      editorJSON: \"\",\n    };\n  },\n\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? \"New Automation\" : \"Edit Automation\";\n    },\n    dateRangeText() {\n      return this.editedItem.dates.join(\" ~ \");\n    },\n    allGpios() {\n      if(this.editedIndex < 0) {\n        return this.gpios.sort((a, b) => a.value - b.value)\n      }\n      return this.gpios.concat(this.automations[this.editedIndex].gpios.map(value => ({ text: `GPIO ${value}`, value: value }))).sort((a, b) => a.value - b.value)\n    },\n    orderEditedGpios: {\n      get() {\n        return this.editedItem.gpios.sort((a, b) => a - b)\n      },\n      set(value) {\n        this.editedItem.gpios = value\n      }\n    }\n  },\n\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n    dialogDelete(val) {\n      val || this.closeDelete();\n    },\n  },\n\n  async mounted() {\n    const responseAutomations = await fetch(\"http://127.0.0.1:5000/automation\");\n    const jsonAutomations = await responseAutomations.json();\n    this.automations = jsonAutomations.map((val) => {\n      const startTime = new Date(val.startTime);\n      const endTime = new Date(val.endTime);\n\n      delete val.startTime;\n      delete val.endTime;\n\n      val.dates = [\n        `${dayjs(startTime).format('YYYY-MM-DD')}`,\n        `${dayjs(endTime).format('YYYY-MM-DD')}`,\n      ];\n      val.startHour = `${dayjs(startTime).format('HH:mm')}`;\n      val.endHour = `${dayjs(endTime).format('HH:mm')}`;\n\n      return val;\n    });\n\n    this.getPins()\n    \n  },\n\n  methods: {\n    async createNodeClick() {},\n    handleClick(index) {\n      this.items[index].click.call(this);\n    },\n    clickLogo() {\n      this.$router.push(\"dashboard\");\n    },\n\n    async getPins() {\n      const responseGpios = await fetch(\"http://127.0.0.1:5000/pins\");\n      const jsonGpios = await responseGpios.json();\n    \n      this.gpios = jsonGpios.map(value => ({ text: `GPIO ${value}`, value: value }))\n    },\n\n    async editItem(item) {\n      this.editedIndex = this.automations.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n\n      this.dialog = true;\n\n      setTimeout(async () => {\n        const blueprint = this.editedItem.blueprint;\n        // import blueprint\n        await this.editor.fromJSON(blueprint);\n      }, 200);\n    },\n\n    async createItem() {\n      this.dialog = true;\n      setTimeout(async () => {\n        await this.editor.clear();\n      }, 200);\n    },\n\n    deleteItem(item) {\n      this.editedIndex = this.automations.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n\n    async deleteItemConfirm() {\n      const id = this.editedItem.id;\n      await fetch(`http://127.0.0.1:5000/automation?id=${id}`, {\n        method: \"DELETE\",\n      });\n      this.automations.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n\n    close() {\n      this.dialog = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n\n    async save() {\n      const editor = this.editor;\n\n      const blueprint = await editor.toJSON();\n\n      const endNode = this.editor.nodes.find((node) => node.name === \"End\");\n      const endComponent = editor.getComponent(\"End\");\n\n      const logic = endComponent.toJsonLogic?.(endNode);\n\n      const dates = this.editedItem.dates;\n\n      const startHour = this.editedItem.startHour;\n      const endHour = this.editedItem.endHour;\n\n      const startTime = dayjs(dates[0] + ' ' + startHour).toISOString();\n      const endTime = dayjs(dates[1] + ' ' +  endHour).toISOString();\n\n      const automation = {\n        name: this.editedItem.name,\n        startTime: startTime,\n        endTime: endTime,\n        enable: this.editedItem.enable,\n        gpios: this.editedItem.gpios,\n        rules: logic,\n        blueprint: blueprint,\n      };\n\n      const file = JSON.stringify(automation);\n\n      console.log(file);\n\n      if (this.editedIndex > -1) {\n        const id = this.editedItem.id;\n        await fetch(`http://127.0.0.1:5000/automation?id=${id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: file,\n        });\n        Object.assign(this.automations[this.editedIndex], this.editedItem);\n      } else {\n        await fetch(\"http://127.0.0.1:5000/automation\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: file,\n        });\n        this.automations.push(this.editedItem);\n      }\n\n      this.close();\n    },\n\n    async updateEnable(event, item) {\n      const id = item.id;\n\n      await fetch(`http://127.0.0.1:5000/automation?id=${id}`, {\n      method: \"PATCH\",\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        enable: !!event\n      })\n    });\n      \n    },\n\n    async onExport() {\n      const editor = this.editor;\n\n      const endNode = this.editor.nodes.find((node) => node.name === \"End\");\n      const endComponent = editor.getComponent(\"End\");\n\n      console.log(JSON.stringify(endComponent.toJsonLogic?.(endNode)));\n    },\n\n    async onEditorImport() {\n      await this.editor.fromJSON(JSON.parse(this.editorJSON));\n    },\n\n    async onEditorSync() {\n      this.editorJSON = JSON.stringify(await this.editor.toJSON());\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}