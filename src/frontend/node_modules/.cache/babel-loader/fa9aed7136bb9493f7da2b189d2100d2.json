{"ast":null,"code":"import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\nexport class LessThanOrEqualToComponent extends Rete.Component {\n  constructor() {\n    super(\"A<=B\");\n  }\n\n  builder(node) {\n    var inp1 = new Rete.Input('num1', \"A\", Socket.number);\n    var inp2 = new Rete.Input('num2', \"B\", Socket.number);\n    var out = new Rete.Output('num', \"Out\", Socket.boolean);\n    return node.addInput(inp1).addInput(inp2).addOutput(out);\n  }\n\n  worker(node, inputs, outputs) {\n    outputs['num'] = node.data.num;\n  }\n\n  _inputToJsonLogic(node, name) {\n    const {\n      inputs\n    } = node;\n    const input = inputs.get(name);\n    const {\n      connections\n    } = input;\n\n    if (connections.length == 0) {\n      return {};\n    }\n\n    const connection = connections[0];\n    const connectionNode = connection.output.node;\n    const connectionComponent = this.editor.getComponent(connectionNode.name);\n    return connectionComponent.toJsonLogic?.(connectionNode);\n  }\n\n  toJsonLogic(node) {\n    const json1 = this._inputToJsonLogic(node, 'num1');\n\n    const json2 = this._inputToJsonLogic(node, 'num2');\n\n    return {\n      \"<=\": [json1, json2]\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/src/node-editor/components/LessThanOrEqualToComponent.js"],"names":["Rete","Socket","LessThanOrEqualToComponent","Component","constructor","builder","node","inp1","Input","number","inp2","out","Output","boolean","addInput","addOutput","worker","inputs","outputs","data","num","_inputToJsonLogic","name","input","get","connections","length","connection","connectionNode","output","connectionComponent","editor","getComponent","toJsonLogic","json1","json2"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AAEA,OAAO,MAAMC,0BAAN,SAAyCF,IAAI,CAACG,SAA9C,CAAwD;AAC3DC,EAAAA,WAAW,GAAE;AACT,UAAM,MAAN;AACH;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,QAAIC,IAAI,GAAG,IAAIP,IAAI,CAACQ,KAAT,CAAe,MAAf,EAAsB,GAAtB,EAA2BP,MAAM,CAACQ,MAAlC,CAAX;AACA,QAAIC,IAAI,GAAG,IAAIV,IAAI,CAACQ,KAAT,CAAe,MAAf,EAAsB,GAAtB,EAA2BP,MAAM,CAACQ,MAAlC,CAAX;AACA,QAAIE,GAAG,GAAG,IAAIX,IAAI,CAACY,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8BX,MAAM,CAACY,OAArC,CAAV;AAEA,WAAOP,IAAI,CACNQ,QADE,CACOP,IADP,EAEFO,QAFE,CAEOJ,IAFP,EAGFK,SAHE,CAGQJ,GAHR,CAAP;AAIH;;AAEDK,EAAAA,MAAM,CAACV,IAAD,EAAOW,MAAP,EAAgBC,OAAhB,EAAyB;AAC3BA,IAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBZ,IAAI,CAACa,IAAL,CAAUC,GAA3B;AACH;;AAEDC,EAAAA,iBAAiB,CAACf,IAAD,EAAOgB,IAAP,EAAa;AAC1B,UAAM;AAAEL,MAAAA;AAAF,QAAaX,IAAnB;AAEA,UAAMiB,KAAK,GAAGN,MAAM,CAACO,GAAP,CAAWF,IAAX,CAAd;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAkBF,KAAxB;;AAEA,QAAIE,WAAW,CAACC,MAAZ,IAAsB,CAA1B,EAA6B;AACzB,aAAO,EAAP;AACH;;AAED,UAAMC,UAAU,GAAGF,WAAW,CAAC,CAAD,CAA9B;AACA,UAAMG,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkBvB,IAAzC;AACA,UAAMwB,mBAAmB,GAAG,KAAKC,MAAL,CAAYC,YAAZ,CAAyBJ,cAAc,CAACN,IAAxC,CAA5B;AAEA,WAAOQ,mBAAmB,CAACG,WAApB,GAAkCL,cAAlC,CAAP;AACH;;AAEDK,EAAAA,WAAW,CAAC3B,IAAD,EAAO;AACd,UAAM4B,KAAK,GAAG,KAAKb,iBAAL,CAAuBf,IAAvB,EAA6B,MAA7B,CAAd;;AACA,UAAM6B,KAAK,GAAG,KAAKd,iBAAL,CAAuBf,IAAvB,EAA6B,MAA7B,CAAd;;AAEA,WAAO;AAAC,YAAO,CAAC4B,KAAD,EAAQC,KAAR;AAAR,KAAP;AACH;;AA1C0D","sourcesContent":["import Rete from \"rete\";\nimport * as Socket from \"../sockets\";\n\nexport class LessThanOrEqualToComponent extends Rete.Component {\n    constructor(){\n        super(\"A<=B\");\n    }\n    \n    builder(node) {\n        var inp1 = new Rete.Input('num1',\"A\", Socket.number);\n        var inp2 = new Rete.Input('num2',\"B\", Socket.number);\n        var out = new Rete.Output('num', \"Out\", Socket.boolean);\n\n        return node\n            .addInput(inp1)\n            .addInput(inp2)\n            .addOutput(out);\n    }\n    \n    worker(node, inputs,  outputs) {\n        outputs['num'] = node.data.num;\n    }\n\n    _inputToJsonLogic(node, name) {\n        const { inputs } = node;\n\n        const input = inputs.get(name)\n        const { connections } = input;\n\n        if (connections.length == 0) {\n            return {};\n        }\n\n        const connection = connections[0];\n        const connectionNode = connection.output.node;\n        const connectionComponent = this.editor.getComponent(connectionNode.name);\n\n        return connectionComponent.toJsonLogic?.(connectionNode);\n    }\n  \n    toJsonLogic(node) {\n        const json1 = this._inputToJsonLogic(node, 'num1')\n        const json2 = this._inputToJsonLogic(node, 'num2')\n\n        return {\"<=\" : [json1, json2]}\n    }\n}"]},"metadata":{},"sourceType":"module"}