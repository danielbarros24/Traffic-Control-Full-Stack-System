{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Projects/Thesis/Jamadgy/python_backend/vue-flask/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar baseURL = \"http://127.0.0.1:5000\";\nexport default {\n  data: function data() {\n    return {\n      step: 1,\n      age: 11,\n      username: '',\n      password: ''\n    };\n  },\n  props: {\n    source: String\n  },\n  methods: {\n    signIn: function signIn() {\n      console.log(\"Logged in\");\n      this.$router.push(\"dashboard\");\n    },\n    fortmatResponse: function fortmatResponse(res) {\n      return JSON.stringify(res, null, 2);\n    },\n    postData: function postData() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var postData, res, message, data, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                postData = {\n                  username: _this.username,\n                  password: _this.password\n                };\n                _context.prev = 1;\n                _context.next = 4;\n                return fetch(\"\".concat(baseURL, \"/login\"), {\n                  method: \"post\",\n                  headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json;charset=utf-8'\n                  },\n                  body: JSON.stringify(postData)\n                });\n\n              case 4:\n                res = _context.sent;\n                console.log(res);\n\n                if (res.ok) {\n                  _context.next = 9;\n                  break;\n                }\n\n                message = \"An error has occured: \".concat(res.status, \" - \").concat(res.statusText);\n                throw new Error(message);\n\n              case 9:\n                _context.next = 11;\n                return res.json();\n\n              case 11:\n                data = _context.sent;\n                result = {\n                  status: res.status + \"-\" + res.statusText,\n                  headers: {\n                    \"Content-Type\": res.headers.get(\"Content-Type\"),\n                    \"Content-Length\": res.headers.get(\"Content-Length\")\n                  },\n                  data: data\n                };\n                _this.postResult = _this.fortmatResponse(result);\n                _context.next = 19;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](1);\n                _this.postResult = _context.t0.message;\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 16]]);\n      }))();\n    },\n    clearPostOutput: function clearPostOutput() {\n      this.postResult = null;\n    }\n  },\n  mounted: function mounted() {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var response, data;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"\".concat(baseURL, \"/login\"));\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context2.sent;\n              console.log(data);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;AACAA;AAAA;AACAC,aADA;AAEAC,aAFA;AAGAC,kBAHA;AAIAC;AAJA;AAAA,GADA;AAOAC;AACAC;AADA,GAPA;AAWAC;AACAC,UADA,oBACA;AACAC;AACA;AACA,KAJA;AAKAC,mBALA,2BAKAC,GALA,EAKA;AACA;AACA,KAPA;AAQAC,YARA,sBAQA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAA,wBADA,GACA;AACAT,0CADA;AAEAC;AAFA,iBADA;AAAA;AAAA;AAAA,uBAMAS;AACAC,gCADA;AAEAC;AACA,gDADA;AAEA;AAFA,mBAFA;AAMAC;AANA,kBANA;;AAAA;AAMAL,mBANA;AAcAF;;AAdA,oBAeAE,MAfA;AAAA;AAAA;AAAA;;AAgBAM,uBAhBA,mCAgBAN,UAhBA,gBAgBAA,cAhBA;AAAA,sBAiBA,kBAjBA;;AAAA;AAAA;AAAA,uBAmBAA,UAnBA;;AAAA;AAmBAX,oBAnBA;AAoBAkB,sBApBA,GAoBA;AACAC,2DADA;AAEAJ;AACA,mEADA;AAEA;AAFA,mBAFA;AAMAf;AANA,iBApBA;AA4BA;AA5BA;AAAA;;AAAA;AAAA;AAAA;AA8BA;;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA,KAxCA;AAyCAoB,mBAzCA,6BAyCA;AACA;AACA;AA3CA,GAXA;AAyDAC,SAzDA,qBAyDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACAR,mCADA;;AAAA;AACAS,sBADA;AAAA;AAAA,qBAGAA,eAHA;;AAAA;AAGAtB,kBAHA;AAIAS;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AA9DA","names":["data","step","age","username","password","props","source","methods","signIn","console","fortmatResponse","res","postData","fetch","method","headers","body","message","result","status","clearPostOutput","mounted","response"],"sourceRoot":"src/views","sources":["Login.vue"],"sourcesContent":["<template>\n  <v-app id=\"inspire\">\n    <v-main>\n      <v-container class=\"fill-height\">\n        <v-row align=\"center\" justify=\"center\">\n          <v-col cols=\"7\" md=\"4\">\n            <v-card class=\"elevation-12\">\n              <v-window v-model=\"step\">\n                  <v-card-text class=\"pt-9 pl-10 pr-16 pb-10\" flat>\n                    <v-img\n                      class=\"mb-12 mx-auto text-center\"\n                      src=\"../assets/logo.png\"\n                      max-height=\"160\"\n                      max-width=\"160\"\n                    ></v-img>\n\n                    <v-form>\n                      <v-text-field\n                        v-model=\"username\"\n                        label=\"Username\"\n                        name=\"username\"\n                        prepend-icon=\"mdi-account\"\n                        type=\"text\"\n                        color=\"deep-purple darken-3\"\n                      />\n                      <v-text-field\n                        v-model=\"password\"\n                        id=\"password\"\n                        label=\"Password\"\n                        name=\"password\"\n                        prepend-icon=\"key\"\n                        type=\"password\"\n                        color=\"deep-purple darken-3\"\n                        :rules=\"[v => !!v || 'You must type password!']\"\n                      />\n                      <v-btn to=\"/dashboard\" rounded color=\"deep-purple darken-3\" class=\"mt-4\" block dark \n                      >SIGN IN</v-btn\n                    >\n                    </v-form>\n\n                  </v-card-text>\n              </v-window>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nconst baseURL = \"http://127.0.0.1:5000\";\nexport default {\n  data: () => ({\n    step: 1,\n    age: 11,\n    username:'',\n    password:''\n  }),\n  props: {\n    source: String,\n  },\n\n  methods:{\n    signIn() {\n      console.log(\"Logged in\")\n      this.$router.push(\"dashboard\");\n    },\n    fortmatResponse(res) {\n      return JSON.stringify(res, null, 2);\n    },\n    async postData() {\n      const postData = {\n        username: this.username,\n        password: this.password,\n      };\n      try {\n        const res = await fetch(`${baseURL}/login`, {\n          method: \"post\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json;charset=utf-8'\n          },\n          body: JSON.stringify(postData),\n        });\n        console.log(res)\n        if (!res.ok) {\n          const message = `An error has occured: ${res.status} - ${res.statusText}`;\n          throw new Error(message);\n        }\n        const data = await res.json();\n        const result = {\n          status: res.status + \"-\" + res.statusText,\n          headers: {\n            \"Content-Type\": res.headers.get(\"Content-Type\"),\n            \"Content-Length\": res.headers.get(\"Content-Length\"),\n          },\n          data: data,\n        };\n        this.postResult = this.fortmatResponse(result);\n      } catch (err) {\n        this.postResult = err.message;\n      }\n    },\n    clearPostOutput() {\n      this.postResult = null;\n    },\n  },\n\n  async mounted() {\n    const response = await fetch(`${baseURL}/login`)\n\n    const data = await response.json()\n    console.log(data)\n  }\n};\n\n</script>\n\n<style>\n.v-app {\n  background: rgb(63, 154, 251);\n  background: radial-gradient(\n    circle,\n    rgba(63, 154, 251, 1) 0%,\n    rgba(140, 91, 251, 1) 45%,\n    rgba(126, 70, 252, 1) 100%\n  );\n}\n\n\n</style>"]},"metadata":{},"sourceType":"module"}