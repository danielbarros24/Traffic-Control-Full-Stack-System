{"ast":null,"code":"// Mixins\nimport CalendarBase from './calendar-base'; // Util\n\nimport props from '../util/props';\nimport { parseTime, copyTimestamp, updateMinutes, createDayList, createIntervalList, createNativeLocaleFormatter, MINUTES_IN_DAY } from '../util/timestamp';\n/* @vue/component */\n\nexport default CalendarBase.extend({\n  name: 'calendar-with-intervals',\n  props: props.intervals,\n  computed: {\n    parsedFirstInterval() {\n      return parseInt(this.firstInterval);\n    },\n\n    parsedIntervalMinutes() {\n      return parseInt(this.intervalMinutes);\n    },\n\n    parsedIntervalCount() {\n      return parseInt(this.intervalCount);\n    },\n\n    parsedIntervalHeight() {\n      return parseFloat(this.intervalHeight);\n    },\n\n    parsedFirstTime() {\n      return parseTime(this.firstTime);\n    },\n\n    firstMinute() {\n      const time = this.parsedFirstTime;\n      return time !== false && time >= 0 && time <= MINUTES_IN_DAY ? time : this.parsedFirstInterval * this.parsedIntervalMinutes;\n    },\n\n    bodyHeight() {\n      return this.parsedIntervalCount * this.parsedIntervalHeight;\n    },\n\n    days() {\n      return createDayList(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips, this.maxDays);\n    },\n\n    intervals() {\n      const days = this.days;\n      const first = this.firstMinute;\n      const minutes = this.parsedIntervalMinutes;\n      const count = this.parsedIntervalCount;\n      const now = this.times.now;\n      return days.map(d => createIntervalList(d, first, minutes, count, now));\n    },\n\n    intervalFormatter() {\n      if (this.intervalFormat) {\n        return this.intervalFormat;\n      }\n\n      const longOptions = {\n        timeZone: 'UTC',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      const shortOptions = {\n        timeZone: 'UTC',\n        hour: 'numeric',\n        minute: '2-digit'\n      };\n      const shortHourOptions = {\n        timeZone: 'UTC',\n        hour: 'numeric'\n      };\n      return createNativeLocaleFormatter(this.currentLocale, (tms, short) => short ? tms.minute === 0 ? shortHourOptions : shortOptions : longOptions);\n    }\n\n  },\n  methods: {\n    showIntervalLabelDefault(interval) {\n      const first = this.intervals[0][0];\n      const isFirst = first.hour === interval.hour && first.minute === interval.minute;\n      return !isFirst;\n    },\n\n    intervalStyleDefault(_interval) {\n      return undefined;\n    },\n\n    getTimestampAtEvent(e, day) {\n      const timestamp = copyTimestamp(day);\n      const bounds = e.currentTarget.getBoundingClientRect();\n      const baseMinutes = this.firstMinute;\n      const touchEvent = e;\n      const mouseEvent = e;\n      const touches = touchEvent.changedTouches || touchEvent.touches;\n      const clientY = touches && touches[0] ? touches[0].clientY : mouseEvent.clientY;\n      const addIntervals = (clientY - bounds.top) / this.parsedIntervalHeight;\n      const addMinutes = Math.floor(addIntervals * this.parsedIntervalMinutes);\n      const minutes = baseMinutes + addMinutes;\n      return updateMinutes(timestamp, minutes, this.times.now);\n    },\n\n    getSlotScope(timestamp) {\n      const scope = copyTimestamp(timestamp);\n      scope.timeToY = this.timeToY;\n      scope.timeDelta = this.timeDelta;\n      scope.minutesToPixels = this.minutesToPixels;\n      scope.week = this.days;\n      return scope;\n    },\n\n    scrollToTime(time) {\n      const y = this.timeToY(time);\n      const pane = this.$refs.scrollArea;\n\n      if (y === false || !pane) {\n        return false;\n      }\n\n      pane.scrollTop = y;\n      return true;\n    },\n\n    minutesToPixels(minutes) {\n      return minutes / this.parsedIntervalMinutes * this.parsedIntervalHeight;\n    },\n\n    timeToY(time, clamp = true) {\n      let y = this.timeDelta(time);\n\n      if (y !== false) {\n        y *= this.bodyHeight;\n\n        if (clamp) {\n          if (y < 0) {\n            y = 0;\n          }\n\n          if (y > this.bodyHeight) {\n            y = this.bodyHeight;\n          }\n        }\n      }\n\n      return y;\n    },\n\n    timeDelta(time) {\n      const minutes = parseTime(time);\n\n      if (minutes === false) {\n        return false;\n      }\n\n      const min = this.firstMinute;\n      const gap = this.parsedIntervalCount * this.parsedIntervalMinutes;\n      return (minutes - min) / gap;\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["CalendarBase","props","parseTime","copyTimestamp","updateMinutes","createDayList","createIntervalList","createNativeLocaleFormatter","MINUTES_IN_DAY","extend","name","intervals","computed","parsedFirstInterval","parseInt","firstInterval","parsedIntervalMinutes","intervalMinutes","parsedIntervalCount","intervalCount","parsedIntervalHeight","parseFloat","intervalHeight","parsedFirstTime","firstTime","firstMinute","time","bodyHeight","days","parsedStart","parsedEnd","times","today","weekdaySkips","maxDays","first","minutes","count","now","map","d","intervalFormatter","intervalFormat","longOptions","timeZone","hour","minute","shortOptions","shortHourOptions","currentLocale","tms","short","methods","showIntervalLabelDefault","interval","isFirst","intervalStyleDefault","_interval","undefined","getTimestampAtEvent","e","day","timestamp","bounds","currentTarget","getBoundingClientRect","baseMinutes","touchEvent","mouseEvent","touches","changedTouches","clientY","addIntervals","top","addMinutes","Math","floor","getSlotScope","scope","timeToY","timeDelta","minutesToPixels","week","scrollToTime","y","pane","$refs","scrollArea","scrollTop","clamp","min","gap"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/mixins/calendar-with-intervals.ts"],"sourcesContent":["\n// Mixins\nimport CalendarBase from './calendar-base'\n\n// Util\nimport props from '../util/props'\nimport {\n  parseTime,\n  copyTimestamp,\n  updateMinutes,\n  createDayList,\n  createIntervalList,\n  createNativeLocaleFormatter,\n  VTime,\n  MINUTES_IN_DAY,\n} from '../util/timestamp'\nimport { CalendarTimestamp, CalendarFormatter, CalendarDayBodySlotScope } from 'vuetify/types'\n\n/* @vue/component */\nexport default CalendarBase.extend({\n  name: 'calendar-with-intervals',\n\n  props: props.intervals,\n\n  computed: {\n    parsedFirstInterval (): number {\n      return parseInt(this.firstInterval)\n    },\n    parsedIntervalMinutes (): number {\n      return parseInt(this.intervalMinutes)\n    },\n    parsedIntervalCount (): number {\n      return parseInt(this.intervalCount)\n    },\n    parsedIntervalHeight (): number {\n      return parseFloat(this.intervalHeight)\n    },\n    parsedFirstTime (): number | false {\n      return parseTime(this.firstTime)\n    },\n    firstMinute (): number {\n      const time = this.parsedFirstTime\n\n      return time !== false && time >= 0 && time <= MINUTES_IN_DAY\n        ? time\n        : this.parsedFirstInterval * this.parsedIntervalMinutes\n    },\n    bodyHeight (): number {\n      return this.parsedIntervalCount * this.parsedIntervalHeight\n    },\n    days (): CalendarTimestamp[] {\n      return createDayList(\n        this.parsedStart,\n        this.parsedEnd,\n        this.times.today,\n        this.weekdaySkips,\n        this.maxDays\n      )\n    },\n    intervals (): CalendarTimestamp[][] {\n      const days: CalendarTimestamp[] = this.days\n      const first: number = this.firstMinute\n      const minutes: number = this.parsedIntervalMinutes\n      const count: number = this.parsedIntervalCount\n      const now: CalendarTimestamp = this.times.now\n\n      return days.map(d => createIntervalList(d, first, minutes, count, now))\n    },\n    intervalFormatter (): CalendarFormatter {\n      if (this.intervalFormat) {\n        return this.intervalFormat as CalendarFormatter\n      }\n\n      const longOptions = { timeZone: 'UTC', hour: '2-digit', minute: '2-digit' }\n      const shortOptions = { timeZone: 'UTC', hour: 'numeric', minute: '2-digit' }\n      const shortHourOptions = { timeZone: 'UTC', hour: 'numeric' }\n\n      return createNativeLocaleFormatter(\n        this.currentLocale,\n        (tms, short) => short ? (tms.minute === 0 ? shortHourOptions : shortOptions) : longOptions\n      )\n    },\n  },\n\n  methods: {\n    showIntervalLabelDefault (interval: CalendarTimestamp): boolean {\n      const first: CalendarTimestamp = this.intervals[0][0]\n      const isFirst: boolean = first.hour === interval.hour && first.minute === interval.minute\n      return !isFirst\n    },\n    intervalStyleDefault (_interval: CalendarTimestamp): object | undefined {\n      return undefined\n    },\n    getTimestampAtEvent (e: MouseEvent | TouchEvent, day: CalendarTimestamp): CalendarTimestamp {\n      const timestamp: CalendarTimestamp = copyTimestamp(day)\n      const bounds = (e.currentTarget as HTMLElement).getBoundingClientRect()\n      const baseMinutes: number = this.firstMinute\n      const touchEvent: TouchEvent = e as TouchEvent\n      const mouseEvent: MouseEvent = e as MouseEvent\n      const touches: TouchList = touchEvent.changedTouches || touchEvent.touches\n      const clientY: number = touches && touches[0] ? touches[0].clientY : mouseEvent.clientY\n      const addIntervals: number = (clientY - bounds.top) / this.parsedIntervalHeight\n      const addMinutes: number = Math.floor(addIntervals * this.parsedIntervalMinutes)\n      const minutes: number = baseMinutes + addMinutes\n\n      return updateMinutes(timestamp, minutes, this.times.now)\n    },\n    getSlotScope (timestamp: CalendarTimestamp): CalendarDayBodySlotScope {\n      const scope = copyTimestamp(timestamp) as any\n      scope.timeToY = this.timeToY\n      scope.timeDelta = this.timeDelta\n      scope.minutesToPixels = this.minutesToPixels\n      scope.week = this.days\n      return scope\n    },\n    scrollToTime (time: VTime): boolean {\n      const y = this.timeToY(time)\n      const pane = this.$refs.scrollArea as HTMLElement\n\n      if (y === false || !pane) {\n        return false\n      }\n\n      pane.scrollTop = y\n\n      return true\n    },\n    minutesToPixels (minutes: number): number {\n      return minutes / this.parsedIntervalMinutes * this.parsedIntervalHeight\n    },\n    timeToY (time: VTime, clamp = true): number | false {\n      let y = this.timeDelta(time)\n\n      if (y !== false) {\n        y *= this.bodyHeight\n\n        if (clamp) {\n          if (y < 0) {\n            y = 0\n          }\n          if (y > this.bodyHeight) {\n            y = this.bodyHeight\n          }\n        }\n      }\n\n      return y\n    },\n    timeDelta (time: VTime): number | false {\n      const minutes = parseTime(time)\n\n      if (minutes === false) {\n        return false\n      }\n\n      const min: number = this.firstMinute\n      const gap: number = this.parsedIntervalCount * this.parsedIntervalMinutes\n\n      return (minutes - min) / gap\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}