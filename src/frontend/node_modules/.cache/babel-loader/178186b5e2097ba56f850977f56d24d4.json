{"ast":null,"code":"// Mixins\nimport mixins from '../../../util/mixins';\nimport Colorable from '../../../mixins/colorable';\nimport Localable from '../../../mixins/localable';\nimport Mouse from './mouse';\nimport Themeable from '../../../mixins/themeable';\nimport Times from './times'; // Directives\n\nimport Resize from '../../../directives/resize'; // Util\n\nimport props from '../util/props';\nimport { parseTimestamp, getWeekdaySkips, createDayList, createNativeLocaleFormatter, getStartOfWeek, getEndOfWeek, getTimestampIdentifier } from '../util/timestamp';\nexport default mixins(Colorable, Localable, Mouse, Themeable, Times\n/* @vue/component */\n).extend({\n  name: 'calendar-base',\n  directives: {\n    Resize\n  },\n  props: props.base,\n  computed: {\n    parsedWeekdays() {\n      return Array.isArray(this.weekdays) ? this.weekdays : (this.weekdays || '').split(',').map(x => parseInt(x, 10));\n    },\n\n    weekdaySkips() {\n      return getWeekdaySkips(this.parsedWeekdays);\n    },\n\n    weekdaySkipsReverse() {\n      const reversed = this.weekdaySkips.slice();\n      reversed.reverse();\n      return reversed;\n    },\n\n    parsedStart() {\n      return parseTimestamp(this.start, true);\n    },\n\n    parsedEnd() {\n      const start = this.parsedStart;\n      const end = this.end ? parseTimestamp(this.end) || start : start;\n      return getTimestampIdentifier(end) < getTimestampIdentifier(start) ? start : end;\n    },\n\n    days() {\n      return createDayList(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips);\n    },\n\n    dayFormatter() {\n      if (this.dayFormat) {\n        return this.dayFormat;\n      }\n\n      const options = {\n        timeZone: 'UTC',\n        day: 'numeric'\n      };\n      return createNativeLocaleFormatter(this.currentLocale, (_tms, _short) => options);\n    },\n\n    weekdayFormatter() {\n      if (this.weekdayFormat) {\n        return this.weekdayFormat;\n      }\n\n      const longOptions = {\n        timeZone: 'UTC',\n        weekday: 'long'\n      };\n      const shortOptions = {\n        timeZone: 'UTC',\n        weekday: 'short'\n      };\n      return createNativeLocaleFormatter(this.currentLocale, (_tms, short) => short ? shortOptions : longOptions);\n    }\n\n  },\n  methods: {\n    getRelativeClasses(timestamp, outside = false) {\n      return {\n        'v-present': timestamp.present,\n        'v-past': timestamp.past,\n        'v-future': timestamp.future,\n        'v-outside': outside\n      };\n    },\n\n    getStartOfWeek(timestamp) {\n      return getStartOfWeek(timestamp, this.parsedWeekdays, this.times.today);\n    },\n\n    getEndOfWeek(timestamp) {\n      return getEndOfWeek(timestamp, this.parsedWeekdays, this.times.today);\n    },\n\n    getFormatter(options) {\n      return createNativeLocaleFormatter(this.locale, (_tms, _short) => options);\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["mixins","Colorable","Localable","Mouse","Themeable","Times","Resize","props","parseTimestamp","getWeekdaySkips","createDayList","createNativeLocaleFormatter","getStartOfWeek","getEndOfWeek","getTimestampIdentifier","extend","name","directives","base","computed","parsedWeekdays","Array","isArray","weekdays","split","map","x","parseInt","weekdaySkips","weekdaySkipsReverse","reversed","slice","reverse","parsedStart","start","parsedEnd","end","days","times","today","dayFormatter","dayFormat","options","timeZone","day","currentLocale","_tms","_short","weekdayFormatter","weekdayFormat","longOptions","weekday","shortOptions","short","methods","getRelativeClasses","timestamp","outside","present","past","future","getFormatter","locale"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/mixins/calendar-base.ts"],"sourcesContent":["\n// Mixins\nimport mixins from '../../../util/mixins'\nimport Colorable from '../../../mixins/colorable'\nimport Localable from '../../../mixins/localable'\nimport Mouse from './mouse'\nimport Themeable from '../../../mixins/themeable'\nimport Times from './times'\n\n// Directives\nimport Resize from '../../../directives/resize'\n\n// Util\nimport props from '../util/props'\nimport {\n  parseTimestamp,\n  getWeekdaySkips,\n  createDayList,\n  createNativeLocaleFormatter,\n  getStartOfWeek,\n  getEndOfWeek,\n  getTimestampIdentifier,\n} from '../util/timestamp'\nimport { CalendarTimestamp, CalendarFormatter } from 'vuetify/types'\n\nexport default mixins(\n  Colorable,\n  Localable,\n  Mouse,\n  Themeable,\n  Times\n/* @vue/component */\n).extend({\n  name: 'calendar-base',\n\n  directives: {\n    Resize,\n  },\n\n  props: props.base,\n\n  computed: {\n    parsedWeekdays (): number[] {\n      return Array.isArray(this.weekdays)\n        ? this.weekdays\n        : (this.weekdays || '').split(',').map(x => parseInt(x, 10))\n    },\n    weekdaySkips (): number[] {\n      return getWeekdaySkips(this.parsedWeekdays)\n    },\n    weekdaySkipsReverse (): number [] {\n      const reversed = this.weekdaySkips.slice()\n      reversed.reverse()\n      return reversed\n    },\n    parsedStart (): CalendarTimestamp {\n      return parseTimestamp(this.start, true)\n    },\n    parsedEnd (): CalendarTimestamp {\n      const start = this.parsedStart\n      const end: CalendarTimestamp = this.end ? parseTimestamp(this.end) || start : start\n\n      return getTimestampIdentifier(end) < getTimestampIdentifier(start) ? start : end\n    },\n    days (): CalendarTimestamp[] {\n      return createDayList(\n        this.parsedStart,\n        this.parsedEnd,\n        this.times.today,\n        this.weekdaySkips\n      )\n    },\n    dayFormatter (): CalendarFormatter {\n      if (this.dayFormat) {\n        return this.dayFormat as CalendarFormatter\n      }\n\n      const options = { timeZone: 'UTC', day: 'numeric' }\n\n      return createNativeLocaleFormatter(\n        this.currentLocale,\n        (_tms, _short) => options\n      )\n    },\n    weekdayFormatter (): CalendarFormatter {\n      if (this.weekdayFormat) {\n        return this.weekdayFormat as CalendarFormatter\n      }\n\n      const longOptions = { timeZone: 'UTC', weekday: 'long' }\n      const shortOptions = { timeZone: 'UTC', weekday: 'short' }\n\n      return createNativeLocaleFormatter(\n        this.currentLocale,\n        (_tms, short) => short ? shortOptions : longOptions\n      )\n    },\n  },\n\n  methods: {\n    getRelativeClasses (timestamp: CalendarTimestamp, outside = false): object {\n      return {\n        'v-present': timestamp.present,\n        'v-past': timestamp.past,\n        'v-future': timestamp.future,\n        'v-outside': outside,\n      }\n    },\n    getStartOfWeek (timestamp: CalendarTimestamp): CalendarTimestamp {\n      return getStartOfWeek(timestamp, this.parsedWeekdays, this.times.today)\n    },\n    getEndOfWeek (timestamp: CalendarTimestamp): CalendarTimestamp {\n      return getEndOfWeek(timestamp, this.parsedWeekdays, this.times.today)\n    },\n    getFormatter (options: object): CalendarFormatter {\n      return createNativeLocaleFormatter(\n        this.locale,\n        (_tms, _short) => options\n      )\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}